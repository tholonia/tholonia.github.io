<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">

<svg
    id="svg"
    class="svg"
    viewBox="-960 -512 1920 1024"
    fill="black"
    style="background-color: black;"
    opacity="1"
    xmlns="http://www.w3.org/2000/svg"
    stroke-linejoin="round"
    stroke-linecap="round"
    stroke-width="1"
    xml:space="preserve"
    align="center"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    >

    // * ─────────────────────────────── old vars ─────────────────
    // *  viewBox="-960 -512 1920 1024"
    // * transform="translate(0 -0) rotate(-90) "
    // * transform="translate(450 -400) rotate(-90) "
    // * transform="rotate(-90 50 100)"
    // * <rect x="0" y="0" width="400" height="400"  style="stroke: #ffffff; fill:none;"/>
    // * width="400"
    // * height="400"
    // * version="1.1"
    // * fill-rule="evenodd"
    // * zoomAndPan="magnify" width="1150" height="767"
    // * ────────────────────────────────────────────────
    // * viewBox="-500 -500 1000 1000"
    // * width="99%"
    // * height="99%"
    // * stroke="white"
    // * onclick="initSound()"
    // * ────────────────────────────────────────────────

    // For copying
    // ! ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    // * ────────────────────────────────────────────────
    // ? ════════════════════════════════════════════════
    // % ████████████████████████████████████████████████
    //@ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
    //! ≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡
    //* °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
    //? ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    //! ┌───────────────────────────────────────────────
    //! │
    //! └───────────────────────────────────────────────

    //! important
    //* deprecated
    //? question
    //% TODO
    //@ FIXME
    //: UNDEFINED

    <style>
        .map {pointer-events:none;}

        // svg  {
        //       mix-blend-mode: difference;
        //       position:relative;
        //       background: rgb(232 240 254 / 0.4);
        // }
    </style>
    
    // *

    //@ FIXME: not sure if I still need this
    <defs>
        <radialGradient id="CircleGradient">
            <stop offset="10%" stop-color="gold" />
            <stop offset="95%" stop-color="red" />
        </radialGradient>
    </defs>

    //?  wrap scripts in CDATA tags as SVG should be valid XML


    <script type="text/javascript"><![CDATA[
//* Used to conver MP3 to Base-64
//* https://codebeautify.org/mp3-to-base64-converter
//* https://codepen.io/xewl/pen/NjyRJx

const a3 = "
const b3 = "
const c3 = "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
const d3 = "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cl/xLszefDKDQyPmnkhE8dJEqPyRJP8AscZ9Xbx1j1d+5Dlf/9LbEXZFyK8Rss2kRYDhwBgSJhV96//+zunPE4AokRS7EJWBixPWff8hUNHfB326uI3VgkpVBhC6BtNp8dVpCBc9SyBGElmR8OyQsVVuAxEFuWEkMvRpowV/9VZhXZZ9ueB0Monz5gSzCjjGJBg8KISw+13//6rlrpoAgAGVtSEelRQeFcF7Gvk/cBULMFm3lQ2H7wYpNsn9GvpbauSMgkCBGEm0rZJo0ejIsTYY/AdjkEmrKsBUVlZHt0vVOnqyn+2Rba5XmM6KZHKqL6ospPOz//uSBOoEAucjyLsJPBBhqGkdZYWEC/UnIGyUdYF1laSphZYQMNM4g3Zq//f64hWAAJBLloCPSWgW9fweSZ0Tfzyn7KbFImbEHRqvpdgnqB+cs5XsS6joNRMGIWmTp0TupbhWd50fMcl09DFr09lMXptR1J/9LpsfdGq5QyemqrZXQjnTPsSi0jvq/+itUXqj9YLa2gBFUdaYpNK4HTw+p/mhNUcuCJTnBkceuw3bNCjhO0INrzURQ4ic286doHoaw+KHGNw4URZss6uA1RxzbouX2/fVvvS27PdblUxGfdWnSx0ZB5VQ71Oijzbtv///qS5CclgBNUdmIkICZUpWNZOGzaDGgwRD8eXtVe2w3bZfj3UjILwksIoximN26bykzg4ZYCObywipR11TI8tNWrT3/ps36vI7u16KyqR5UV2dDLF9ilO65RFTd8Jf/7/7KwLVYq6qSbVJiGYRho5kPUO5KI9OG22I6xLWhUoQkA+YK7KCfTZTBhlVtpG0o5GiepKDpn6UjPZicoJEyc+KCQoSJissABgMLNAdAiBMmUEbGf/7kgTrBIMZTEjTKywgYglpCmTjrAwxKyDsrLDBfiTkDZWWGHbQ95dlQXf/064aAtGG6RCHszIgPWQpf6Sw0sVEuVm7QF4rBPrQHB/SCNUm4PxgcnBHUFk2KRQ72Mi9q6hSbJGIkIsfCD3tpmDEybmIQQs/SGFpyTozLTZDBG0RHD5Nv//9/eZmFJueMXy7j11ye9Ta/oAATjAAb1BxLA7BKbBri4nwLjonQmKIQieB1I6uSrF0LsKE2SKmihs2XG3HGzQseceKljY8bcaNiwuNuOFTZYonvFDTcd/////uY7+ogJlQAWUAKoRINou5wHkISbCOfAImRwlZGJJAYwBWRQARgVpFR2xcUTxQwbFhY4kjjRkLFht5o2bHJs04bNC6ywcadljCm/5Tf//f//xLpUxBTUUzLjk5LjNVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+5AE5oADEy/OUekzdF7FGUphhjhJpDMbhj2CSTkIoqT3mBl
const e3 = "";
const f3 = "";
const g3 = "

const a4 = "
const b4 = "";
const c4 = "";
const d4 = "
const e4 = "
const f4 = "";
const g4 = "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";

const a5 = "
const b5 = "SUQzAwAAAAAAalRYWFgAAABgAAAARW5jb2RlZCBieQBNb3ppbGxhLzUuMCAoV2luZG93czsgVTsgV2luZG93cyBOVCA1LjE7IGVuLVVTOyBydjoxLjkpIEdlY2tvLzIwMDgwNTI5MDYgRmlyZWZveC8zLjD/+5AEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABJbmZvAAAADwAAABoAACwTAAkJCRMTExMdHR0dJycnJzExMTE7Ozs7RERETk5OTlhYWFhiYmJibGxsbHZ2dnaAgICJiYmJk5OTk52dnZ2np6ensbGxsbu7u7vExMTOzs7O2NjY2OLi4uLs7Ozs9vb29v///wAAADlMQU1FMy45OXIBqgAAAAAAAAAAFIAkAuRGAACAAAAsE5xaAf0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/+5AEAAwCY209gANnQD3s6B8EIr5KFbMMVDKAAUQ2IYKGUAH5+nXP3Qv0CJvufQM89ERK7ohBxZoX6VzSun7u7m8JES9TRESvu7nX///iJMzSZpTubvlKUpNNOzMzfxZV0QxHj7c370hX25OE47nb7uqokMyr98iCQ5yzdV0+QPv2/y0///jg//1g/////HjG/xyX4P6+b////6PnOer5AghXOHAAAioQAEeHGbkkUBOu7vAAAFgCtXcg7CYHOJmY4gAYHdX8ivT/87f9G/6yVyN/3rN7bN1Z0/a9a/u6L1237U//+vdX1WPT1ZmUYiC5Chg8wfM7ORSh8xVKEB3AAARKHFqBxWABCABhAUkK8TAAAG///+Q6N//2/Rb/0737oy2X6kI6d6JfdZU0k9P///620bo6Ws5FECIRxErFHCYwaAhDuNHEHAYRFxMwg0hJaPbabX3a5iYKhkBJHm+3l1AYEVcZv83dLQPxE2AuyLBARxqD7H8sgBsA0nG+ccYYjczDQxHoY3pWSRMzcYoY3C5shXrQoSbLqg9ci5uM2O//+5IEKIAD3j1KbmJgAHtpWS3MRAAMLMVAGYmAAXuV6Fce8AD/oPJwwIYTgs8Zv+t/m4m8R+SZcIoh/3bquxcQY0QQX/+4CLp/Qr7LPTetESqQRiQym0hoJgsAgDuHLTFi1EuiqcEYCKAUEDyhwokaBPYR5KD6IwBWDOksX1jQEaIDTHQOBSNzxscNDo6BkCbdkjF1qLhemJ+QQgn/WjNCfUaDNkH/qb1nycW5BDT//7SfUTBXPnjczMP///N0g/v//p/2Hv/9n/7mxMtPDjRXpWvPPmemO+rmJPJeGgJaKorvAGGSQGagxAE5KrkXOBdAd5fSFiEvNCVIOkWhdiTl8WAZ0fBdKBo6kCKoENPGQ7kkEzNPs5bqc4kSXUnNdDcoMpGtZ1jM/Je4joAQAP/ATIiTpWJEhQQQTYIgRsCubhdWMNIlCYJGLfIA2QADt/tpSYZ6oJ5EQ0QRC25xwpj2eYUezTzH0/o8Zb0u3KPdswHD/cs7RmTeY0P/y/699f7lW1obTe9OVa7DtaATJBSTcoMCwxihUw+QEIjlFRdNpuGv//uSBAuAAvFK0lc+IAZf5tqJ57QBi/DpSUw88TmAJagliI5/tcE1Q0fIEMQI2Nj5VI4XCTztRF6bsvMRQKKbVGIti35wroPomIyiSXoP23V6TZgyKMfBW/RR/Ov/+urtXW99HZJtloOerl3yST7c1YYC4MaI5KUR5YJcpV6VgWdQWWpiAVCWSNjYewggEWbucJIewKcRk1MdJEDsPZJVQnogiWtF0X6TiZVei/adQf0yo2SONqQf9A3/MiCkczrq9wRa5gtmBUJC0gukoyiYSSkGjRxqTB2XtgPx3UZNOSyRMKgbOq0K7dJS4ffUh6F5bo/84LAxnH/7CVb3/xTgWa6j6qwHeFV/gr7xL9ZUs3zt23FTflzvShf+TK1zcPmDaCMtYYuZ9GyF3dlJIUIAYTuWGizO1/tGPHVeupAMkb5qjHe9ZdM6BIcv3y6zIKMpqagDXjtK3WGNbXl0LFSq+YmgzCXx2/mHrmJp+hu3d/y8f9cZ0tV/Ml45t52T6pw0pS6ShsiBEDfOiaVECMMLMxwl7T7IKRznsfwJLM0giC3Giv/7kgQLgAL5NdBrT2woXKlKXGGitYvhK0+MNUv5e6TmHbmWKSj059ZzKWbGTG/3rJ8Bk0R07ayAB48L0xYF09tH8DOW1kjEXrakxAn7Ryv3rLv6Wtun/Ot+df3aIsth2LG4VWIzrQVQ////99SEZgi7lLEJ6f0437ZoOBRqRrTW3qxjzZvoVNY/tkHfv8mW7IxTOv+VE0VaqlvajoAvH2qlQJtVdZMJF+pIX/3/UT9H1bp/Bv+Zv69Je9nIxGVWPfMVFBDnU0VRpbYsLClf9Yo27rwu9DLMB6OLWG3fpqoshsoC3wcLeTh3mpslWGkgvycCrSauwE4ee04Nt+oErd0Cc/MqOvocaL8hXQQpf8eDX6Hl/3I6JVVMV5yorWMVNa3PZGLaru+kJACTAdCUrQVH2JXk/jilVNXJr74OvfIiyX4utfiBg5vLNaxTwqslVOygvUXl7ohbFHZEviODWjZY9Na5iKUbdo39FfQ3jfX+NJ+ER39/dVZ2Rk0yq65UeLiSuvUQMKIEEAiAUBNXBSZcpgswuI+EQeVtZdLnAJAQmHf/+5IEDYADDj/MU20d0F2mun0+An2LmQ9b57S2sYck6nT4Ij67aBuVmOt0Kw3h8FNvRb7q6wGL6/aoF4ut0icF3V5US638Sb2lfW86Uvzvfl5/yp/2//KErK4ZgpDATFmG1EnA8VEDmaf/pdorVDedqRTClLQG0JKKYngP1QvC5KY0FKRPwLC2RqeoS8KR1sY0MthvgyVUpBxxtpyAgklTQQH2J0QNFMsuCmqpUnN+pv2eFfhv7N+H90UFDQmQKqY6xySA8HXOXS7sDKalEa2uSQD1FzMwUs6wFEieaC8rT5XRqfmXrIZuuuJXiOEOb386/IZAqq75uLIIk481k8C+tsfEiz9QXX3p71f6qL0fin8GDfxe+7yqYqUI89rpRRIe9E2X9++FqpUktbbgGEIeTwIePsR0NHni5pwI+vn16G3PzZ1+P4VjE0zhEC0/hxqDWRMwy09qKAuVOipNIgT12o+86r6ik1B+j/KNv/wWJzVaW8fPWnVVL10rJxU9M7OaoUCCmBDXLAYADxIIBVEBtnTDcF5FlD90oU8bc6J6Gfky//uSBA2AAwg1y+ttFTJfRtqtPkWnzATHO61hp+l/JaVltorgD3rEKWOmWrUX/Hmai5MKvE/D/N1MhACWtwWR9q2MQlUfKzBm1rC9eqf3g/4Q1PDN+Df8L//9sBfHl3OEKDTwLiIdNx/jFLqLHUbrc03A3k3CLMExCVDq5fXeEYRsrd3Mh7kmX//awVzCs2wVQNbFQLl0SODYjex1bBwJ59FIelU3Mzo49knp+oJ+7U9P4Qf6A4pfcoJqDOj+e0U6J6t8OhmEM/inF6IwxL1EonBADOpYxBS4t0D2lFE4RD0detQnuDE+0Buv/63t8UoH8pf3HS2RMxv8OUAVBrvJwKs27sFL9QlLfNPaYnvsNRQee1GLfnXf/H/88ei61KaWUpZ96R7mjkmcpBpBToDkMJBM6bE7TJz+jWKwxIZhsJALpm4TCl9XRjB/hc1/kgyW89qGdThbV55zPc6PWpk0icAJ6SNJy6Nns42ev9qBB+srecbnW/Hf8GX+fszsV2runfOjnqY5IVMKKpUIwhXXUsDADIBUgvVTqBB4dI71eAIagv/7kgQMAAMBOVFjMCzMWqY5aW8xOgv5JTmtNHPpgRsnfZaV9eDv27H6LTd+VWM2Eh4VM6ibArlU21uF0z7WkqI6RbWSg+2+Kk/wYmpahmiYDgrhbdR/1CIJ+nSowDA7HSTWhIGWpMYlOgOplphAgBRli8JGQgCtUiaUJzyvqVtKeACEmZ1tyMszlukeGudICQqDAlnWTAJY0WrkUp0JDw+a3cmzf4pc/3t7Thr9IgpLsZtyn/Ouyr+y8ueBAZcTcwmkwVU57atgIgxEU0wXA3ISkMbRlf9YE4hSt7XpQ9aqLQfrMD7gZojRds6qtwCMtSqw4SG3H8CUJt0ARlrbidfRC+N8dvW6llHqrO635z+TF/r19VkdnakvwhA9jehFe3HKkK6/97JCCVJgAHZkkqIKbxscredfInBFkrV4TDdVk0fJcwPTABi3WIUUFNqA8w8H2saAj5xlGc1AYGtk0kqKkVHQUw92p1eFL+FD43y/xBvwGf5rPOpXN27h0O9eRvAeJhLaD/KRiVQTFSRtMFsK1CxjyGAEbsoFOh4jRA3Xgkz/+5IEDYADFjZTafhsjmBmyn09jVPMHMlJrD4F8Xea5mmmnig3gl2/utDOFow1bikrULJXrC2q8nAq0moytJdaDEwIu2hhAJaJTnCNrXWUS1jj8z/iDFP8mZhZVV5t6+HY1VMuS7evMQ9/zIrILpS2pbIkxAH6nyFviQEP59H+lxzHgR0uCl4lXxYg+pIVLB5N21FYdka0kg/AIswai5wLE+yaCJgGy3M3X0T8XCG/oCBEB2P8vP+kv6zr+xlU/7z21IsMXMe+9U9bPu3YxIYJ2o2UWC45kHElb1iR8CBtEG4ZRJSzz5BlweP3+vqRgP8uaD0nzUA1GC7ZTEFk24/ivLa6i6J8SbnRnl6sQnbU84e1849XmH8dZtqazWk+kmsdIojUoQBxouBDcKqsZNMgOR1uiD2ktaXO1zM5hCLvO7VA7MASLlZstnYOQ2O6xBQIk4vMgMgpd2B5fQYngSTNSWcDn31nQnS+qUbTKDL0x8LhlB5+MP+Uf8o/wOUOjmXsYoY46IwUDzXkVzWGhA6zJE1A0Wq/T7OS9pz/F3Hk1eBm//uSBAuAAsoyTusQPEhbyRqtPOPXy0TJOay08WFbmOa9lpZgMyf83ov3Ba1/nGsI3WfWmP4EMZM0Tzon1vQENbywO3zzAAejwKF9CFF/G2e3Jt+EJHWTPVJmnbtqRVDGgYGwC4HqrqNp15LYpHAT8nRXo5UphC9otCWI5iAT0VZdkvzG37TZPUauP/gFMXiPr+gmTlrGdQQmHX/pBVVesCv6/y/2A038k354u+pmzIySh31blxy7LYO1K/0FAKZB4+XQDNwNlVwtQQyrxXzr+wkzpGPO+mrGW9UVW/rrdbeisrnWxZBZIproA3CEvnQTZs2oYwTs28iBc/aJU/wAm1LUf9WlfIfxwt2VgwhC0AJQ94qOfemdebGFmuQiCDECBAiZGN4PpYY++MVaKdzUng9ybLXU2sMcn1o8BZDXaKmm3ZBdSrnQP5qrQWF97mQYgIOaPk5YcxL46/k/Uf9yj2Xw7/C+t9frkr1iqEnC0kKmiY+WCSUttVNIsDYEod4l14vo79nG8aDKLqbepSVM0Jd/KiSU+gE6GQf6Ili/JoEkS//7kgQXgAKiS9Lp7Sv+UUVJaWsNOApkyTusNK2hVJjp9MaqlrIzAvgRSPyj+LHrec/iP92/Cl/dtaMahP2Z6GpL3/arxz3DG/rYFEgbFcawwVw1vShshv7OToxeUv8QOW5ezjVbI8ntfVGMHlB6kwlBFnnoEmIpLopgsjdubGrvqOhzG7X951L8q8O8xyPeW74dHvtQpAsG0iyJmGpBITU41BASvIS8V5rww6pJZq7Dqf7n8iWnjoEg27j4NuqwPJmrpC6rzgPjV1FZKN6Af8BH1DaP9CvGeVvzD+E9g4YdIFTyZi0YKuYDRgcYp3ywaqrVy1VJhQDB8CRqAsOJTA2bHkTChPj6ihAE6av3E4MK/mpAEkXF7l0ShFqMxAxF15iMvziAJfvN96t9Q8HDjPLL+RfpyCK0ORCyocYk4GS59RihbYiTCk+IQXEW41DmHXBE5ejxPeEhxgtOroc+wTvf+OmCG0vmDYI4Y1d9CEAUviMBTMq00PrcqEj2v77/m09P4P+4P7hVzxZMieNKYDYHExskLEFEZAiAgSqmYhKF52n/+5IEL4ACmzJQYeoVrFRlSb9h518KlHtNp7V0cVCVpbWHqhDldqROgSrnaOTy9sBGCI+Uerm4Pu30bjIxIDWfCgg+0Db4iviX4v72MwgsTdP5U5/UVfp01b7Bcil09yPvpojHMpQCTkDEXKh2are1TpSppMHyL90S8E2SYPx8YQRgvoLU3wn63PpWwR2Z+ccziZmMY0CDECb1BYt6YGn/UqFvfqoAKvvdQt+q2l2Vd3wE88y5SybD4CfJNLCwiPrAogFQQ6CJFRQd9TdpMWguHwr6LNGYZHX9KpiKm+tpZ2DcWeq1qUzCWkKu8XDNS//QPQBRZNygd9UJfWPfz+jbfPDMvI3TGtvVlQAONx2tN6Nws8yy9RSLZQshoUiwZ59iLrpOnYYaoN1SHIhRnir9DTVUIJLr/5Pgdb2NpugjDTWNfBnfyRAxD2kxICZ/WJV+b2q//X2b8E3329EnWzSmSTt766uwg6uFc6bWpp0TsLBQP9Lm/CgkgGYjA0hdTgbF42u3ELjKB0trIojAZDjVpAoCl3OhVTV60S+C0L0jFQWb//uSBEYAAqFJTentFapSRco9PaV7ihCJP4g9pXFTFSUxlpYgJRDAb/7bfkH1fjfb/7xiBSIRcYRCc+dRtWKOsyKAufkEBPFbBMGdDyglDxbUQvmMjWUr9MYti5yP6/5EDMs3usG6PNl8AajeZDhbqMxFIdJAVm+Ptbg328Of6aHWNPg8UIH5gkwg4SgNd1QYFIAojiSEy2ZShXLrsyN1NnqhzHI62zYiuDeb+XdGzJL/ICDkENRsutACSDwk2Twp1+TA3W8ulSm0YFb6dXoO+YZKPs/2bTQupZSWCqLE0AqRm7SKODBGEwNEZG0WB8FIFyizAE6C6lOOO3m4yIL0XcXATNL6/NgPbHb5UDA9PzIG70m5wen8slRvODj/KHW9Z7866nSXM9tK6wzcWYRD5l+6ABxZZtBp5mxUVt2tEoHQVgsBWJBuHZxjKW5qyBYeIPWqYwLT2IIKCWomgQ5XXk0EgRe6hzAqyk2tAFxTaRgMH+H8eCXsVt7P9QRiYV2B40VRYRLidLxgRVYjTDcfQIlI4IsRKuGGZM1uPxYdGAcnn//7kgRfAAKeKk3564UIUgTKPT2ifYo9KT+MNE/5UhbmdYkd7Pr1aUKfVGoCfLqdagqRYrrCofJMdnuwyba1iSN2lJufzX6qPO2oL/f+/XT62zei6ls7bMU47p926Ai0dhgmDUoBhfD6y1pdhp4jbtnEqlL9RMrJ3bwYOBNn1SMFUg2dDmiHlR9MXO/kBFefc6UhPa+pogbtbpoT/tPblPfzm8VEDKkElKPtQAbDQINU9snVAgAjAQgA5axnz7rniUYT3A55uLpQI+7uX2p/p6e+HLJ35BOTbOgjmL6xrPN1AKtS+QAq2k4b+qBD+O7kcivD3b6NcSBscmsTnxcTlZgY9bzgponI2ltQNGctw5qBG5mF0de2TTMCpvlbOsP+CNJasyxEgzJS6QiBWXrWH6fNxkUNJRKiPkLzFRBfentj/naDyfb6WmQ08TqgxJPcKMTWFBYUPNc9GQEMkCio8kbwgmFSRtGDNdGzYwWx50ukgXTcOrQGW8nyGC+HaJkYocZEnz1c6Ju+UhZaus6Qz7jif5g/b/nGQ+7s/xQ+5TMHHGT/+5IEd4AChSJLc008oFQlaXpiYm4KVKk17LImwUghp/z2ib2iEyIELBOfbS0QD0DAqdfvOUVF8ykgH0nA1NmBKH6ayZNrrFlg/vqUNQiVPlYSw5H6hB38xJf3OiI+4t3/9qj/UG9n0b//r25HOj3JIinNY7ECE9ZP5coe7l9qvgtLGbGcsmCHqKE6o6nqXzOsOBjUfPTmMB37HLNBAHkX1ztFjbvr9AwOboABbzwPF21Qev8PvyJtXo/7lpTDnf8PpYl9oUaqEyQSNgjA6RwOC17ZYLTQ41Y2SgJGXxbmJGf4/vCJIc46D5Nr0EVWYXz4zA+Hj+iFatDlYGV8kwnR7nRmE3T6jocz9G1JwqS+rF4mqDPP90KUAJYwi8/LWEGisRitLWaNiPVRvRmIzBeTlYiueZfE9CtwJD9JBb4WP66184Fn9JlD+C8SqGYCyyWdtMQCfzonBfWYkK3yJv9fff8J5m4i345v6Us7HTVpOllInTVMlmMUSi1oy2jwYSw3ONQO+zmAXLeOMi0exmDtwtjbVvqtao6yC+XpNFgHk4lu//uSBJGAApwrTWsvUeBUBWotPad9iqErOaxAr6FRpSc1hoosFsKR7wivzpcbrkJu6A1v3r5oMb8mCb/7N9U0dnN0b1JRTrZeQivMs6CUEBvM140NVRKhrLXg2CC3dgmLuwe20DUH3pXmblCf6zWlOglF7rH8VaNlLG6bq6xJW8oDHqvlEmG61iyPyP9R/qFeDb/4J//u1EBGfV5Nbu+rbUXcGZNByyl1iwUOselksQU/rit3bPXG7cM5jSKRB3kT+TmLkB8V/3k9hmwvrOBdjwv/QAE/jAFtL1HoFnmngLN/7VLfnZVvqf0XPTIGxwEUtrAZaljipVQjY5hh4YKloKb7/vswVYxixjhIIsApJg2D4gC9M41N1L3GwGz/jVBpjzRjy7U4fINpu4c9/NhpP6A8/QBf5T2q/448q/K8v7gOVjXLi0OOFBQ/DdQAYDBNlMHkFBGYzMSYlzOnLa61iKi6KJYQaFp4KNA+CcX4Enj/7MwVlo97VD/VOP8BFvIwieuYVf4hf/tlvz2lX5X+//utbHHTtn1PMV0oXPBQVsYFwv/7kgSoAAKoSc1rERPgVMV5rWHqPwqAt0PnwPShU6Gm/Yeo/C6zSkcAQzIChCwyOBRVYIuIqSXs4NHOs/E7Svc5anHY4GMQDYd4+RQxcWSZdUIRIeiHSfFUBA3xGFf0IwlP2r7V/kTSj//Iftt6KjWID0LmW4MDC5k2XPty6ZWJQw6zUUQgS0mQ6FMeRdA08HA5pMtRVPVjA1hsd4hAFES43NEDYASRbs+sJb4wocgs5geDef4f/6rQt+VkZR+V6mZ4LlZlKFzXY0qDAIJBFALCr2rKBCowNUXzzUDcYo0dsEdZmKMn2vOrYRFEY6gDfAyfWIcKRIuaIbZR84CvpeRA5Jp0HFt6SgvLd7frb8zaTqiXZ7nRQG0GJIVeQCblirnAVAVTsuZjB4BAOGvrUWCWwR3zKUzwB40k+XCUKQHbXUdzwv2h4ugXBYJ9E8ZBkhWR6w7KPj4BU3oRhSWzlAg/Z9S8XD39nkTpv+x1IuVOqIOEpNiSjCj8TGXoVVZQdFUFuLSRFh7GSrxa5L2sEENIn1F7zQk33M1XYhyAaPdSQuz/+5IEvYACuDvMezNTUFSlOg09p1+KfK077C2ooViVpvz4qaxGhASQNzpmGXR7VWpYcgn5fDnO2o6TH1Duf5uo9Rvwuduv9/6Xsj6VWmtbn3ueRslo7dOESu/kkEYYUikTIIN0I4UJ4IFIDf5C3OhrmzH7jauI7qi4EKYH1LKwC2BlIaCpwDHS8wEWbeYE1+s4JO/eG6GUEP+Emog3K5QiwwIxDcsm0RJSWKIFTkgKqS73qIaNiZnSIBBu1h/npZo18y4nXZC/kFscUfk17Tl7QAytqkYvRR3nGUGsJLzgeX4xob4aq1MO301kI326CsT+zwf/6/7UboZXQxmsqzTo2rmczldncZ10SZb/UcYsEBqUhQBD6xsI8dIt49pyVvDvcDZafCKeqhLW8fgRkoCxJusP7S1JhdQn4/Bg/qTAXX1PAO9q9NC/7tK+/9P/ajbG0MkNwXZ5HkBjpm2oIVvHtsv0uo2tV+mtqTDOS9LC2GUNA6eZBxrIoh7uOsnJvi5b+4/gvz5OG5uXQ+IYjntYW6f4fK78yR9lkT/S2U04e/I5//uSBNGAAt1JTXswE+pXhTn9PaJvi1UnL6zIT6lYnqd0+KnnOg/X+u/+X/37dYhqbn3j58ldVbqeqBTYOQ47xSlHYoGz8maYn3DaU8SPTMUwZakk7cpbOQDUZ+23m8xUlv+I4LyVDrTJwBUG81fMAWtLzUEyedVbC0/Hr+z9qD/UOyH2/04IKJGAm8kEamjQdNjHjgQWkFJBbgBGLfLAQazbM5tcbaG3ep9lgBl31lp0kgNIH4OvtiPCOZntEHtFvAFk8/UL6Xq+qFo/G+Oo2nGEcK6v+//f1RlECuw566UIJGoZx5pAwRh1qwKbeh3//9q5HkiauhS4uAxSE7q/liNYd9aIXNJkT2qISdQnIqtPiFwNCu6//TARbOtayvBDkBvXwHG8iBDTmmDH0j78i6tV/yGr9umMQhTgofNPA80ME5VhGVFF0tS3///dSmoQYQoM6wCMYlLmuxhgJ/kKrarryRp6irf4XW6ZRIBbpdz+6bGs6bnO413Bb+i7qdAoz+M4EwM/QErR6kBP/yVW1CI1sO1262+n7dc0p2aorJKdKP/7kgTegCLZS1Lp8Rx+VmVJbWGiigvlEx7ttLFBYpUmfYepNCljROGCahMD58e3Dn///ftoLgrEATPtoCT6S6UMFZ1AJ4KvVOZR3JWtbJRa9TtcrUBlJlzWGgEGXz9R0BrkFCqcD/8MYRZP0RKltqUJT+H6ng0XbIe7a7f//6v73spHmLRmK5itfcDS8Y+lW//+Q0J4vIxsaD69rACG6tDfSOPJAIme98EPNK3LbnCvxZ7ZxJiefyKDObkHYDAG5uTQM0s3oBOWWvKyd7rE2/Ddnm/g3r/93f/XRJTLYp2lQ6EIg7ViJhWLj3OmU44xaYU9LJUoIT8bhei+FCR85gLBnMTWWvwd8FQgi3j8HbTfGXBGiAY8LWozDCSvWJKiiuo1LnvJf9verfpg/LnVZv//V6t2qvTvT9WGRChHMNKPv/IICAIHZ/6gIwTagKCryBZ0GzaQ24uUJWy1f6rPp6ABZnl94jwfjIbUFEQE+HAZoZmBPJtxJgGE22kiFIpmk1IC9POtRtCarJRK3fI+/M/RK/rVtJn1LlvrQnOPJrkqPRz/+5IE6IADIEPIU00VoGCpGS1hoooK+QktrLRRaVGlpzT4CfNY2RRM///UgthIUIJWSgENhZwsMz5mAjFPoaMNMtT05SlDWMrZhGqYISl3HTiTAgzqWscxLI9gJqWeVjDpc4aCY+YrE461Tn60F/R1ZX7sfrEn/+XvPp5MpejUMdq7IGoOwaiYHBlxF3////QGAgEFcfbCEZuVP1GJ5shs8to2kspnu2x7W3hunAGY1qYRUunyWecHWPD1TowPkNGWW2mcGVSfWmLE9GzjPxFP6PR9F36/6I8tCZnb3RZmR8p2VVu2RDjq0RFC6v//7/brMYKFOPXupCMpnF1povm6QBPMMollZxmwJRf1usZros4/jhSPGCDMeYhcHNasLV8nhevMiWEik/SGH33VtxONfVSq4J+ven/RWre+3erEtdnOejJZ0eLzDOUXfd///7ddMATNB+mmoBOFOtZ9aRmYxM7rdKZuLCuy1y2kyT2AFeP/nnyGTGPGe0QqdPN/MMJXG1/1BK/iaSHNfxI4r/0onk65+locq/+8qpd58+Gw0BDh//uSBO8AAzxJSOtNLFBkqGkNZaOMDB0rI6zIT4F+paS1hopgJYSItFTs673f/+m8mAAIECK7WgALHK0fgRiYU5FXqkLoNXbkjF3KIYGAECfTizBBHWyUFuxg9Z0BEt50OFOpajcnNqMDMWFtB/VaN/0///9PR3u7Mx5BjgllKcMQDBwKkAGD6RSsl///9dtTBRlRSNkETDuNyXfElFDejwfeeuttXfPLYuLPgCBr59hTTVxXfVYPhm3r+CQjP/86Pn+85XbdrVqPoQx7e/xkJtIv60XibNsb5vdZtC9jo9m23POWj0Ulu0eir0hASKgmO7UhC7ejzryhVQ5P1SRFmir2tJ58mHRl+lmXtcaw1nW0zyT9EJE/oJpXrlHa6hLUK1Z3rHMjZ/eH1nrz1jGigqVvJF0B8LEjQBBCIGiUFA6DgqNXqb///4ipuPsuyyRFLFpjrrujKVx3dKGkOC/bTH/U/26zqmOAk6WuI8Ixkt5BAgwtE2VQANsveeHtVnSVHiy6NY7KtbhPehOhdYU3undPVGPRbu8p3Y7bUpVTznYzK//7kgTngALtJMlrL1pwXwh4/WGifAuBJSdMvK3ReZXkdYaKKCkewRAqQCh993//XtqoUSBI2AqbrAEZl3nudClYUbsjVoceNuzdmyJ5Z6jVyYTHw/jOKSz2YmR9vE5+kXvWpOumtMYJNS3yZkNT/1fpvQj/07dUodHJcjOLddGmIiTAyLKhQSBHeqQ//9W2xXpDIdMCVN0YBFS+67JWdLpOYpbSglbWoegNs/12SyiuMEM8a2EeGU5sXRLS6/js+5nq2KfdGP6Cq0Uzff/5PTulP+lt6VUchJ5ATM9wSDTsdDqQziACKNLVu///6CyIlidl9qQzg87J5A47iHKbUI9L5U+d98/ttdfy6vC/joGICRKLLFiUQH0Cm+MC81hEAn2dwTtQxNBRr+vk9NWf/9/qe9moVlYzXkdWohrpFDDBQgwKC54FCS///X/sUYlcFfv+hCMEOu/r1rTXOA8nna5Gphdz/qFVsHmyYART1VY0hGOKycLxLMnqDbb0B6epEuNQoOPmpGmF3dn77enrsqsn+iF6noiGodc17CojQhMGQwX/+5IE6wADNUlLUw0T5F6peR1loooLeSMhrTRRQXwlJLWFFhhE9jz////6rSkG1ILrrGABUpLMPrramdIVVwuSp2l5rewoIepWupJwJvjOCwHcauxwaSZaouhwN5kcfVMShlogfqjg/L9v0/2on7dHRJnO1yUNKWp3RilkKOQVc0AHmTLm///9t+1sVUAaUFf/tpCFRUSgstmG4hJyw/TzSiPnuInXKoZJQEquvDoiBUyb+G4RaLeuvKDK1T7w3K2Pn+1Eb/cJp8j66v63acvvrRv+6UuxnZzmXF3iRrmwIYFGB4SiITZgd///6BDyDUjbABwnnIpY8w0/iYacanchraja/+6zlltlNL9bD6DIki7uz9Sw9o+gWezGvmhv0fvb/1bXtsv9VTqVM7UDsqwmV2RFEuEaYGQgYFxYHAwaelrG//60JqVVe0AqKIbEEm20YBGL7QW+TirKDW+UrhuAmYV2L867ecyW1x/me1GkmdX8d1V3yDL/3pQ3HL+fBU/c4btuYaIynLav9/+v/r/Xoe1kRkuffqGooOC3ebWVPUQw//uSBOoAAvBByWstE+BfyRkNZaKIDAj5I608q8F5pCOploogYYWC9wt///7te4osno7GwELFSVRuNQsTJS/Ny4sxBo6tWX3aa4vzHeW8461Hff2VGTN1DlOMHPzzCg/f7J6p0fb/r/nvb+aZ0lJExrGAyQXiQYod7SodFdhaP5M3BDKBE2J1tn//+4X9YAakIhsQJyauAAY0kokEUXmcwoy2X3Y5CK6jN6qzil6XGz9bAiDWX4XJfyMAs5vg0LQ5yMTlrZBAz6Pb//5nX1mf/+G3T41n10p8II6AzTDaqlhyihZKjvG///7kVCyCiiKclTAA5HoaceeaKT6Oc12kgiMNlURvdqUtdGPPtjRIAtV9BsY/PATON5hTpod1UuodD1d1//+j0/Rn/2uZmuRiDPUodiMFQ6hQYNhYYmZERRQgcYFx///6dC8nsZVMQU1FVVVwBtMu2W2JNK7WongIhz7cFzuISsxIJam4U0SGxpy5CcUgx+mAr1Cca6SivUyuiP4pcgBeEnYaMo+EG1Oy8Aqd36o4OCZrDQVZV4sS9+eQV//7kgTqgAMKSchrSh5AYYlo6mlDrAuZIR+tKHHBe6RjqZUKGCWRDkmIxCJDx0NhkOPr////YEA2IDNd7SEM6khi9tPQSkpwpe7JbCosDJxQK3yuEKOmbygG6cSTAJC0z+aCBbQXp50PcYfVnIH1FH9OFHsF2EHnFARZBMMixV9uxZVcaxAGMAIk9CyxE9Sw0ky0N7////1ANgaNqOKZSURgGSkEhg5oVIrYiMsKFDbDyUaNQSIZQEps9YPmn1rXhoiFQWAvY70t60eM//0t7R5UiEqyIS6yJ3///1o6wWgAhEqKT54kGKE4DKUzShqKZ1SRGgqMoD6FaYSAxI84fUBSJ0JDxgFQRzowqlBJjnjSyP/tfQKVkQkWKkXagKRtHkxBTUUzLjk5LjOqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr/+5AE5wADDSJMaw9B9GHEOR1hhkYIvEEITCWKQQqGIYiXpCiqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqo=";
const c5 = "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";
const d5 = "";
const e5 = "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xXvjffh2QGAzkxK5yUo3S8AA4ggRpVLk0VTkATRHR88ytdasGgaHgqIToNAUNFToNLDYlcHVnhKMBpR4SjAaLHhKo8WPCX+o8CqzoNFemRz2ViKREs9/25XVbpVMQU1FMy45OS4zVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+5AE6QADEilO6ew2Hl/kyUo9hl6MCDMrgLzBaVSG4tQXsChVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVU=";
const f5 = "";
const g5 = "";

const pianoNotes  = [a3,b3,c3,d3,e3,f3,g3, a4,b4,c4,d4,e4,f4,g4, a5,b5,c5,d5,e5,f5,g5]
const pianoNotes6 = [[b3,d3,f3],[a4,c4,e4,g4],[b5,d5,f5],[b3,d3,f3],[a4,c4,e4,g4],[b5,d5,f5],]

const hshft = [
        [1,1/2,1/3,1/4,1/5,1/6],
        [1,1,1,1,1,1],
        // [1,1/1.618,1/(1.618*2),1/(1.618*3),1/(1.618*4),1/(1.618*5),1/(1.618*6)],
        // [1,1/1.414,1/(1.414*2),1/(1.414*3),1/(1.414*4),1/(1.414*5),1/(1.414*6)],
];



//@ ARGS
const DEF_loop_delay      = 1000;
const DEF_iangle          = 0;
const DEF_deg_adj         = 1;//180/Math.PI;
const DEF_circle_radius   = 1;
const DEF_cycle_circles   = 0; 
const DEF_cycle_colors    = 0;
const DEF_show_0          = 1;
const DEF_show_1          = 1;
const DEF_show_2          = 1;
const DEF_show_3          = 1;
const DEF_show_4          = 1;
const DEF_show_5          = 1;
const DEF_show_all_lines  = 1;
const DEF_poly_opacity    = 1; 
const DEF_circle_opacity  = 1.0;  
const DEF_cycle_audio     = 1;
const DEF_cycle_poly      = 0;
const DEF_cycle_path      = 0; 
const DEF_cycle_dataset   = 0;
const DEF_cycle_preset    = 0;
const DEF_cycle_vars      = 0;
const DEF_merge_count     = 0;
const DEF_fullscreen      = 0;
const DEF_rolling_presets = 0;
const DEF_zoomin          = 0;
const DEF_screensave      = 0;
const DEF_pensize         = [13,11, 7,5, 3, 2, 1]
const DEF_pre_maxlengths  = [130,70,50,30,20,10]
const DEF_path_mode       = 0;
const DEF_mouse_angle     = 0;
const DEF_cycle_ratios    = 1;
const DEF_jump_delta      = 6.0;
const DEF_cycle_flowers   = 0;
const DEF_cycle_fruit     = 0;
const DEF_cycle_genang	  = 0;
const DEF_clock_mode	  = 0;
const DEF_rotation	      = -90//? for non-cm
const DEF_cmRotation	      = +0;//? for cm
const DEF_showtext	      = 1;
const DEF_merge_colors	  = 0;


const iching_stages = [
		["Inner Negotiation","Inner Definition","Inner Contribution","Outer Negotiation","Outer Definition","Outer Contribution"],
		["Inception","Specification","Deployment","Emergence","Integration","Difuson"],
		["Insemination","Pregnancy","Birth","Growing Up","Adult Life","Death"],
		["Germination","Growth","Blooming","Fruiting","Seeding","Recycling"],
		["Precontemplation","Contemplation","Preparation","Action","Maintenance","Termination"],
];

const iching_line_names = ["Line 1","Line 2","Line 3","Line 4","Line 5","Line 6"];
const iching_line_vals = [1,0,1,0,1,0]; //? 1 = yang, 0 = yin

const degs_per_level = [
	360/(6**1), //? 60
	360/(6**2), //? 10
	360/(6**3), //? 1.66666666666667
	360/(6**4), //? 0.277777777777778
	360/(6**5), //? 0.0462962962962963
	360/(6**6), //? 0.00771604938271605
];

//? 240 because secs-per-day/360 = 240 secs per degree
const secs_per_level = [
	240*(360/(6**1)), //? 14400
	240*(360/(6**2)), //? 2400
	240*(360/(6**3)), //? 400
	240*(360/(6**4)), //? 66.6666666666667
	240*(360/(6**5)), //? 11.1111111111111 
	240*(360/(6**6)), //? 1.85185185185185
];
const PlatRat = 1
const GoldRat = 0.618033989
const SilvRat = 0.414213562
const sq2d2 = Math.sqrt(2)/2

const genang = [];

const names_of_circles        =["OFF","palette","white","random"]
const names_of_datasets       =["Standard","Bez Parallel","Bez Serial"]
const names_of_paths          =["OFF","True-open","True-closed","complex #1","complex #2","complex #4"]
const names_of_polys          =["OFF","cos/sin-10","CiN(cos*sin)-10","DeltasCos(rot)","Petal"]
const names_of_audios         =["OFF","MultiShort","Piano","Long+Short"]
const names_of_vars           =["OFF","no-paths","paths & lines","path_mode","no-lines","smooth"]
const names_of_show_all_lines =["Hide","Show"]
const names_of_flowers        =['OFF','thorns','arrows','bigthorn','datura','xxx']
const names_of_fruit          =['OFF','Colored 6px']
const names_of_genang         =[]  //? pushed on init
const names_of_showtext       =['Blank','Full Menu','Degrees','Clock']  //? pushed on init
const names_of_merges 		  = [
	"difference","darken","lighten","color-dodge","color-burn","hard-light","soft-light",
	"exclusion","hue","saturation","color","luminosity","screen","overlay","isolate"
];

//? presets as query strings
const preqs = []
    // preqs.push("up=1000&de=7.5&aN=5&aR=0&ca0=0&ca1=0&ca2=0&ca3=0&ca4=0&ca5=0&aV=1&aO=0.18&aG=1&aX=1&aK=4&aU=1&aA=2?up=10&de=0.0146484375&aN=15&aR=1&a0=0&aV=1&aO=0.18&aG=1&aX=0.29&aK=4&aU=1&aA=2");
    // preqs.push("?up=1000&de=7.5&aN=11&aR=0&ca0=1&ca1=1&ca2=1&ca3=1&ca4=1&ca5=1&ca6=1&aV=0&aO=1&aG=1&aX=1&aK=0&aU=1&aA=2 ");
    // preqs.push("?up=1000&de=7.5&aN=11&aR=0&ca0=1&ca1=1&ca2=1&ca3=1&ca4=1&ca5=1&ca6=1&aV=1&aO=1&aG=1&aX=1&aK=0&aU=1&aA=3 ");
    // preqs.push("?up=1000&de=7.5&aN=5&aR=0&ca0=1&ca1=1&ca2=1&ca3=1&ca4=1&ca5=1&ca6=1&aV=1&aO=0.18&aG=1&aX=1&aK=4&aU=1&aA=1 ");
    // preqs.push("?up=1000&de=7.5&aN=5&aR=2&ca0=1&ca1=1&ca2=1&ca3=1&ca4=1&ca5=1&ca6=1&aV=1&aO=0.18&aG=1&aX=1&aK=4&aU=0&aA=3 ");
preqs.push("?up=200&ma=0&is=0&de=1&aC=5")

//? this is the actual order of generations which the lines are created
var lOrder=[
	5,5,5,5,4,4,5,5,5,5,   4,4,3,3,5,5,5,5,4,4,   5,5,5,5,4,4,3,3,2,2,   5,5,5,5,4,4,5,5,5,5,   4,4,3,3,5,5,5,5,4,4,
	5,5,5,5,4,4,3,3,2,2,   1,1,5,5,5,5,4,4,5,5,   5,5,4,4,3,3,5,5,5,5,   4,4,5,5,5,5,4,4,3,3,   2,2,5,5,5,5,4,4,5,5,
	5,5,4,4,3,3,5,5,5,5,   4,4,5,5,5,5,4,4,3,3,   2,2,1,1,0,0,0
];


const names_of_ratios = [];
const DEF_mratios = [];

DEF_mratios.push([	0.5,			0.5,		0.5,		0.5,			0.5,			0.5]);			names_of_ratios.push("Platinum");
DEF_mratios.push([	1,				GoldRat,	GoldRat**2,	GoldRat**3,		GoldRat**4,		GoldRat**5]);	names_of_ratios.push("Golden");
DEF_mratios.push([	0,				GoldRat,	GoldRat**2,	GoldRat**3,		GoldRat**4,		GoldRat**5]);	names_of_ratios.push("No-L2");
DEF_mratios.push([	(23/23)*.8,		(17/23)*.8,	(13/23)*.8,	(11/23)*.8,		(7/23)*.8,		(5/23)*.8]);	names_of_ratios.push("Primes");
DEF_mratios.push([	1/6,			2/6,		3/6,		4/6,			5/6,			6/6]);			names_of_ratios.push("123456");
DEF_mratios.push([	6/6,			5/6,		4/6,		3/6,			2/6,			1/6]);			names_of_ratios.push("654321");
DEF_mratios.push([	1, 				1/2, 		1/3, 		1/4, 			1/5, 			1/6]);			names_of_ratios.push("harmonic");
DEF_mratios.push([	1/6, 			1/5, 		1/4, 		1/3, 			1/2, 			1/1]);			names_of_ratios.push("rev-harmonic");
DEF_mratios.push([	1, 				1/2, 		1/4, 		1/8, 			1/16, 			1/32]);			names_of_ratios.push("halfs");

// mratios.push([	1/2.818,		2/2.818, 	1/2.818,	0.414/2.818,	0.707/2.818,	0.5/2.818]);
// names_of_ratios.push("etetra1");
// mratios.push([	2.828/2.818, 	2/2.818, 	1/2.818,	0.414/2.818,	0.707/2.818,	0.5/2.818]);
// names_of_ratios.push("etetra2");
// mratios.push([1,				sq2d2,sq2d2**2,sq2d2**3,sq2d2**4,sq2d2**5,sq2d2**6]);
// names_of_ratios.push("sq2d2");
// mratios.push([1,GoldRat,GoldRat * SilvRat,GoldRat * SilvRat * GoldRat,GoldRat * SilvRat * GoldRat * SilvRat,GoldRat * SilvRat * GoldRat * SilvRat * GoldRat,]);
// names_of_ratios.push("GoldSilver");

var names_of_colors = [];
var colors2         = [];


colors2.push(['#0000FF','#00FFFF','#00FF00','#FFFF00','#FF0000','#FF00FF']);    names_of_colors.push("6-color spectrum");  //? default colors B,C,G,Y,R,M          ✅✅
colors2.push([false,false,false,false,false,false]);                            names_of_colors.push("Shifted 6 spectrum"); //? place holder for shifted colors

colors2.push(['#0000FF','#00FF00','#FF0000','#FFFF00','#00FFFF','#FF00FF']);    names_of_colors.push("2X3 color spectrum"); //? 2x3 (tholonic2 B,G,R,C,M,Y)

colors2.push(['#40686A','#317CA6','#A28671','#52A4B6','#88C8E4','#DABDB3']);    names_of_colors.push("David Hockney");
colors2.push(['#14272D','#1E3D33','#7D844D','#306EBB','#EAA159','#ECCD52']);    names_of_colors.push("Van Gogh");
colors2.push(['#1F2825','#2D4B38','#BE6314','#F7EBAF','#706E51','#F7EBAF']);    names_of_colors.push("Rembrandt");
colors2.push(['#465295','#B7563F','#DACA6A','#ED973E','#ED973E','#CDC1CE']);    names_of_colors.push("Picasso");
colors2.push(['#4D5847','#4D5847','#CA4E29','#2D75A9','#869881','#C46F29']);    names_of_colors.push("Hopper");
colors2.push(['#264C13','#CCA46A','#A1612D','#876F24','#79A32C','#DCD293']);    names_of_colors.push("Monet");
colors2.push(['#301C16','#583219','#CD844A','#AE9068','#8A3521','#635020']);    names_of_colors.push("Carravaggio");

colors2.push(['#FBEC5D','#F2C649','#E37154','#C2423D','#974735','#682E1F']);    names_of_colors.push("Corn");
colors2.push(['#360258','#F66216','#DF2945','#AF1D61','#02117E','#FFDB48']);    names_of_colors.push("Sunset");
colors2.push(['#D9F2E8','#AECAE7','#9592AD','#FFBABA','#FFE7C3','#BBE0C2']);    names_of_colors.push("Pastel");
colors2.push(['#697398','#6CAFB0','#FFDCA8','#FAA578','#C56692','#79518B']);    names_of_colors.push("Vintage");
colors2.push(['#0C1F77','#AA1011','#D50101','#E48200','#FAB301','#020C42']);    names_of_colors.push("Explosion");
colors2.push(['#F3DE00','#EE0019','#01F24B','#F201CC','#5201C3','#01E1E8']);    names_of_colors.push("psychedelic");
//? B&W spectrum generator
//% ┌───────────────────────────────────────────────
//% │ BW COLOR GENERATOR
//% └───────────────────────────────────────────────
var _clr = []
var S=.8 //? saturation
var V=.8 //? vibrance
for (let H=0;H<6;H++) {
    v = HSVtoRGBArray((H*60)/360,S,V)
    v.r = Math.floor(0.2989 * v.r)
    v.g = Math.floor(0.587 * v.g)
    v.b = Math.floor(0.114 * v.b)
    bw = Math.floor(v.r+v.g+v.b)
    _clr.push("#"
        + bw.toString(16).padStart(2,0)
        + bw.toString(16).padStart(2,0)
        + bw.toString(16).padStart(2,0)
    )
}
colors2.push(_clr)
names_of_colors.push("BW spectrum")
//% ┌───────────────────────────────────────────────
//% │ SPECTRUM COLOR GENERATOR
//% └───────────────────────────────────────────────
_clr = []
//? Full color spectrum generator
for (let H=0;H<6;H++) {
    _clr.push(generateColor(H*60))
}
colors2.push(_clr)
names_of_colors.push("6x spectrum")

colors2.push([false,false,false,false,false,false]); names_of_colors.push("random 7-color"); //? place holder for random colors

//? 360 shades of HSV spectrum at S=0.8, V=0.8
// var colors360 = ["#cc2929","#cc2c29","#cc2e29","#cc3129","#cc3429","#cc3629","#cc3929","#cc3c29","#cc3f29","#cc4129","#cc4429","#cc4729","#cc4929","#cc4c29","#cc4f29","#cc5229","#cc5429","#cc5729","#cc5a29","#cc5c29","#cc5f29","#cc6229","#cc6529","#cc6729","#cc6a29","#cc6d29","#cc7029","#cc7229","#cc7529","#cc7829","#cc7a29","#cc7d29","#cc8029","#cc8329","#cc8529","#cc8829","#cc8b29","#cc8d29","#cc9029","#cc9329","#cc9629","#cc9829","#cc9b29","#cc9e29","#cca029","#cca329","#cca629","#cca929","#ccab29","#ccae29","#ccb129","#ccb429","#ccb629","#ccb929","#ccbc29","#ccbe29","#ccc129","#ccc429","#ccc729","#ccc929","#cccc29","#c9cc29","#c7cc29","#c4cc29","#c1cc29","#becc29","#bccc29","#b9cc29","#b6cc29","#b4cc29","#b1cc29","#aecc29","#abcc29","#a9cc29","#a6cc29","#a3cc29","#a0cc29","#9ecc29","#9bcc29","#98cc29","#96cc29","#93cc29","#90cc29","#8dcc29","#8bcc29","#88cc29","#85cc29","#83cc29","#80cc29","#7dcc29","#7acc29","#78cc29","#75cc29","#72cc29","#70cc29","#6dcc29","#6acc29","#67cc29","#65cc29","#62cc29","#5fcc29","#5ccc29","#5acc29","#57cc29","#54cc29","#52cc29","#4fcc29","#4ccc29","#49cc29","#47cc29","#44cc29","#41cc29","#3fcc29","#3ccc29","#39cc29","#36cc29","#34cc29","#31cc29","#2ecc29","#2ccc29","#29cc29","#29cc2c","#29cc2e","#29cc31","#29cc34","#29cc36","#29cc39","#29cc3c","#29cc3f","#29cc41","#29cc44","#29cc47","#29cc49","#29cc4c","#29cc4f","#29cc52","#29cc54","#29cc57","#29cc5a","#29cc5c","#29cc5f","#29cc62","#29cc65","#29cc67","#29cc6a","#29cc6d","#29cc70","#29cc72","#29cc75","#29cc78","#29cc7a","#29cc7d","#29cc80","#29cc83","#29cc85","#29cc88","#29cc8b","#29cc8d","#29cc90","#29cc93","#29cc96","#29cc98","#29cc9b","#29cc9e","#29cca0","#29cca3","#29cca6","#29cca9","#29ccab","#29ccae","#29ccb1","#29ccb4","#29ccb6","#29ccb9","#29ccbc","#29ccbe","#29ccc1","#29ccc4","#29ccc7","#29ccc9","#29cccc","#29c9cc","#29c7cc","#29c4cc","#29c1cc","#29becc","#29bccc","#29b9cc","#29b6cc","#29b4cc","#29b1cc","#29aecc","#29abcc","#29a9cc","#29a6cc","#29a3cc","#29a0cc","#299ecc","#299bcc","#2998cc","#2996cc","#2993cc","#2990cc","#298dcc","#298bcc","#2988cc","#2985cc","#2983cc","#2980cc","#297dcc","#297acc","#2978cc","#2975cc","#2972cc","#2970cc","#296dcc","#296acc","#2967cc","#2965cc","#2962cc","#295fcc","#295ccc","#295acc","#2957cc","#2954cc","#2952cc","#294fcc","#294ccc","#2949cc","#2947cc","#2944cc","#2941cc","#293fcc","#293ccc","#2939cc","#2936cc","#2934cc","#2931cc","#292ecc","#292ccc","#2929cc","#2c29cc","#2e29cc","#3129cc","#3429cc","#3629cc","#3929cc","#3c29cc","#3f29cc","#4129cc","#4429cc","#4729cc","#4929cc","#4c29cc","#4f29cc","#5229cc","#5429cc","#5729cc","#5a29cc","#5c29cc","#5f29cc","#6229cc","#6529cc","#6729cc","#6a29cc","#6d29cc","#7029cc","#7229cc","#7529cc","#7829cc","#7a29cc","#7d29cc","#8029cc","#8329cc","#8529cc","#8829cc","#8b29cc","#8d29cc","#9029cc","#9329cc","#9629cc","#9829cc","#9b29cc","#9e29cc","#a029cc","#a329cc","#a629cc","#a929cc","#ab29cc","#ae29cc","#b129cc","#b429cc","#b629cc","#b929cc","#bc29cc","#be29cc","#c129cc","#c429cc","#c729cc","#c929cc","#cc29cc","#cc29c9","#cc29c7","#cc29c4","#cc29c1","#cc29be","#cc29bc","#cc29b9","#cc29b6","#cc29b4","#cc29b1","#cc29ae","#cc29ab","#cc29a9","#cc29a6","#cc29a3","#cc29a0","#cc299e","#cc299b","#cc2998","#cc2996","#cc2993","#cc2990","#cc298d","#cc298b","#cc2988","#cc2985","#cc2983","#cc2980","#cc297d","#cc297a","#cc2978","#cc2975","#cc2972","#cc2970","#cc296d","#cc296a","#cc2967","#cc2965","#cc2962","#cc295f","#cc295c","#cc295a","#cc2957","#cc2954","#cc2952","#cc294f","#cc294c","#cc2949","#cc2947","#cc2944","#cc2941","#cc293f","#cc293c","#cc2939","#cc2936","#cc2934","#cc2931","#cc292e","#cc292c","#cc2929"]
var colors360 = [];
//? better to build it
for (let H=0;H<360;H++) {
    colors360.push(HSVtoRGB(H/360,1,1));
}


fc1 = [];
fc15 = [];
fc30 = [];
fc60 = [];

for (let H=0;H<360;H++) {
    fc1.push(HSVtoRGB(H/360,1,1));
}
for (let i=0;i<360*(360/15);i = i + 15) {
    fc15.push(HSVtoRGB((i%360)/360,1,1));
}
for (let i=0;i<360*(360/60);i = i + 60) {
    fc60.push(HSVtoRGB((i%360)/360,1,1));
}


//? saved for pasting into HTML block

// <p align="center">
// 	<iframe 
// 		src="https://tholonia.com/Images/SVG/notclock.svg?aR=10&aK=5&mF=1&mT=1" 
// 		style="border:0px #000000 none;" 
// 		name="myiFrame" 
// 		scrolling="no" 
// 		frameborder="1" 
// 		marginheight="0px" 
// 		marginwidth="0px" 
// 		height="512px" 
// 		width="960px" 
// 		allowfullscreen>
// 	</iframe>
// </p>
            //@ %PRAGMA:insert:clock_1_data.js:
            //@ vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
            //@ INSERT FUNCTIONS HERE (and comment out script above)
            //@ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//! ┌───────────────────────────────────────────────
//! │ recursive collection of nodes and edges that form a tree
//! └───────────────────────────────────────────────
//% ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
//%
//% ██████  ██████   █████  ██     ██ ████████ ██████  ███████ ███████ 
//% ██   ██ ██   ██ ██   ██ ██     ██    ██    ██   ██ ██      ██      
//% ██   ██ ██████  ███████ ██  █  ██    ██    ██████  █████   █████   
//% ██   ██ ██   ██ ██   ██ ██ ███ ██    ██    ██   ██ ██      ██      
//% ██████  ██   ██ ██   ██  ███ ███     ██    ██   ██ ███████ ███████ //%
//%
//% ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
                                                                                                                    
function drawTree(branch_angle, rotation) {

    if (merge_count == 0) {
        clearCanvas()        
    } else {
        if (tree_counter%merge_count == 0) {
            clearCanvas()
        }
    }

    if (clock_mode > 0) {
        rotation = DEF_cmRotation;
    } else {
        rotation = DEF_rotation;  //? somewhere 'rotation' is getting changed (but I can't find it!).. so reset it here
    }
    var svg = document.getElementById("svg");
    //FIXME for some reason, these angles do not appear when the angles are integers, only floats!?
    branch_angle = branch_angle%360;
    branch_angle = branch_angle + 0.00001; //? more that 4 0s and lines begin to disappear

    genangLEFT  = genang[cycle_genang][0];
    genangRIGHT = genang[cycle_genang][1];

    //% ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    //% ██████  ██    ██  ██████ ██      ███████     ██    ██  █████  ██████  ███████ 
    //% ██       ██  ██  ██      ██      ██          ██    ██ ██   ██ ██   ██ ██      
    //% ██        ████   ██      ██      █████       ██    ██ ███████ ██████  ███████ 
    //% ██         ██    ██      ██      ██           ██  ██  ██   ██ ██   ██      ██ 
    //% ██████     ██     ██████ ███████ ███████       ████   ██   ██ ██   ██ ███████ 
    //% ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

    if (cycle_vars > 0) {
// *    ██████╗██╗   ██╗ ██████╗██╗     ███████╗       ██╗   ██╗ █████╗ ██████╗ ███████╗     ██╗
// *   ██╔════╝╚██╗ ██╔╝██╔════╝██║     ██╔════╝       ██║   ██║██╔══██╗██╔══██╗██╔════╝    ███║
// *   ██║      ╚████╔╝ ██║     ██║     █████╗         ██║   ██║███████║██████╔╝███████╗    ╚██║
// *   ██║       ╚██╔╝  ██║     ██║     ██╔══╝         ╚██╗ ██╔╝██╔══██║██╔══██╗╚════██║     ██║
// *   ╚██████╗   ██║   ╚██████╗███████╗███████╗███████╗╚████╔╝ ██║  ██║██║  ██║███████║     ██║
// *    ╚═════╝   ╚═╝    ╚═════╝╚══════╝╚══════╝╚══════╝ ╚═══╝  ╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝     ╚═╝
            if (cycle_vars == 1) {
                //? no PATH lines

                // % ──────── FRUITS/FLOWERS setting ────────────────────────────────────────
                cycle_fruit = randint(-3,num_of_fruit-1);  //@ neg vals are a very bad way to increase the 0 distributions
                cycle_flowers = randint(-3,num_of_flowers-1);
                // % ────────────────────────────────────────────────────────────────────────

                for (let i=0;i<6;i++) {
                    pensize[i] = CiR(Math.round(tree_counter),0,DEF_pensize[i],0); //? use initialial values of pensize[]
                    pre_maxlengths[i] = CiR(Math.round(tree_counter),0,DEF_pre_maxlengths[i],0);  //? use initialial values of pre_maxlengths[]
                }
                cycle_circles   = randint(0, num_of_circles-1);
                circle_radius   = randint(5,20);
                cycle_colors    = randint(0,num_of_colors-1);
                circle_opacity  = randint(1,10)/10;  //@ does nothing to lines, only circles
                cycle_poly      = randint(0,num_of_polys-1);
                cycle_dataset   = randint(0,1);
                cycle_ratios    = randint(0,num_of_ratios-1);
            }

// *  ██████╗██╗   ██╗ ██████╗██╗     ███████╗       ██╗   ██╗ █████╗ ██████╗ ███████╗    ██████╗
// * ██╔════╝╚██╗ ██╔╝██╔════╝██║     ██╔════╝       ██║   ██║██╔══██╗██╔══██╗██╔════╝    ╚════██╗
// * ██║      ╚████╔╝ ██║     ██║     █████╗         ██║   ██║███████║██████╔╝███████╗     █████╔╝
// * ██║       ╚██╔╝  ██║     ██║     ██╔══╝         ╚██╗ ██╔╝██╔══██║██╔══██╗╚════██║    ██╔═══╝
// * ╚██████╗   ██║   ╚██████╗███████╗███████╗███████╗╚████╔╝ ██║  ██║██║  ██║███████║    ███████╗
 // * ╚═════╝   ╚═╝    ╚═════╝╚══════╝╚══════╝╚══════╝ ╚═══╝  ╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝    ╚══════╝

            //? paths, colors, lines
            if (cycle_vars == 2) {
                // % ──────── FRUITS/FLOWERS setting ────────────────────────────────────────
//                cycle_fruit = randint(-3,num_of_fruit-1);  //@ neg vals are a very bad way to increase the 0 distributions
//                cycle_flowers = randint(-3,num_of_flowers-1);
                // % ────────────────────────────────────────────────────────────────────────
                for (let i=0;i<6;i++) {
                    pensize[i] = CiR(Math.round(tree_counter),0,DEF_pensize[i],0); //? use initialial values of pensize[]
                    pre_maxlengths[i] = CiR(Math.round(tree_counter),0,DEF_pre_maxlengths[i],0);  //? use initialial values of pre_maxlengths[]
                }
                cycle_path      = randint(0,num_of_paths-1);
                cycle_colors    = randint(0,num_of_colors-1);
                cycle_ratios    = randint(0,num_of_ratios-1);
            }
 // * ██████╗██╗   ██╗ ██████╗██╗     ███████╗       ██╗   ██╗ █████╗ ██████╗ ███████╗    ██████╗
// * ██╔════╝╚██╗ ██╔╝██╔════╝██║     ██╔════╝       ██║   ██║██╔══██╗██╔══██╗██╔════╝    ╚════██╗
// * ██║      ╚████╔╝ ██║     ██║     █████╗         ██║   ██║███████║██████╔╝███████╗     █████╔╝
// * ██║       ╚██╔╝  ██║     ██║     ██╔══╝         ╚██╗ ██╔╝██╔══██║██╔══██╗╚════██║     ╚═══██╗
// * ╚██████╗   ██║   ╚██████╗███████╗███████╗███████╗╚████╔╝ ██║  ██║██║  ██║███████║    ██████╔╝

            //? PATHs and path_mode only
            if (cycle_vars == 3) {
                show_all_lines = 0;
                path_mode=2;

                for (let i=0;i<6;i++) {
                    pensize[i] = CiR(
                        Math.round(tree_counter),
                        1,
                        DEF_pensize[i],
                        0
                    ) //? use initial values of pensize[]
                    pre_maxlengths[i] = CiR(
                        Math.round(tree_counter),
                        1,
                        DEF_pre_maxlengths[i],
                        0
                    ) //? use initial values of pre_maxlengths[]
                }
                cycle_path      = randint(1,num_of_paths-1);
                cycle_colors    = randint(0,num_of_colors-1);

            }
// *  ██████╗██╗   ██╗ ██████╗██╗     ███████╗       ██╗   ██╗ █████╗ ██████╗ ███████╗    ██╗  ██╗
// * ██╔════╝╚██╗ ██╔╝██╔════╝██║     ██╔════╝       ██║   ██║██╔══██╗██╔══██╗██╔════╝    ██║  ██║
// * ██║      ╚████╔╝ ██║     ██║     █████╗         ██║   ██║███████║██████╔╝███████╗    ███████║
// * ██║       ╚██╔╝  ██║     ██║     ██╔══╝         ╚██╗ ██╔╝██╔══██║██╔══██╗╚════██║    ╚════██║
// * ╚██████╗   ██║   ╚██████╗███████╗███████╗███████╗╚████╔╝ ██║  ██║██║  ██║███████║         ██║
 // * ╚═════╝   ╚═╝    ╚═════╝╚══════╝╚══════╝╚══════╝ ╚═══╝  ╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝         ╚═╝

            //? no lines or paths
            if (cycle_vars == 4) {
                // % ──────── FRUITS/FLOWERS setting ────────────────────────────────────────
                cycle_fruit = randint(-3,num_of_fruit-1);  //@ neg vals are a very bad way to increase the 0 distributions
                cycle_flowers = randint(-3,num_of_flowers-1);
                // % ────────────────────────────────────────────────────────────────────────
                show_all_lines = 0;
                path_mode=2;

                for (let i=0;i<6;i++) {
                    pensize[i] = CiR(Math.round(tree_counter),0,DEF_pensize[i],0); //? use initialial values of pensize[]
                    pre_maxlengths[i] = CiR(Math.round(tree_counter),0,DEF_pre_maxlengths[i],0);  //? use initialial values of pre_maxlengths[]
                }
                cycle_circles   = randint(0, num_of_circles-1);
                circle_radius   = randint(5,20);
                cycle_colors    = randint(0,num_of_colors-1);
                circle_opacity  = randint(1,10)/10;  //@ does nothing to lines, only circles
                cycle_poly      = randint(0,num_of_polys-1);
                cycle_dataset   = randint(0,1);
                cycle_ratios    = randint(0,num_of_ratios-1);

            }
// *  ██████╗██╗   ██╗ ██████╗██╗     ███████╗       ██╗   ██╗ █████╗ ██████╗ ███████╗    ███████╗
// * ██╔════╝╚██╗ ██╔╝██╔════╝██║     ██╔════╝       ██║   ██║██╔══██╗██╔══██╗██╔════╝    ██╔════╝
// * ██║      ╚████╔╝ ██║     ██║     █████╗         ██║   ██║███████║██████╔╝███████╗    ███████╗
// * ██║       ╚██╔╝  ██║     ██║     ██╔══╝         ╚██╗ ██╔╝██╔══██║██╔══██╗╚════██║    ╚════██║
// * ╚██████╗   ██║   ╚██████╗███████╗███████╗███████╗╚████╔╝ ██║  ██║██║  ██║███████║    ███████║
 // * ╚═════╝   ╚═╝    ╚═════╝╚══════╝╚══════╝╚══════╝ ╚═══╝  ╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝    ╚══════╝

            if (cycle_vars == 5) {
                //? opwave is meant to be a wandering curve
                let ang1 = Math.sin(deg2rad(randang1))
                let mod2 = randang2 + CiR(tc[4],0,3599,0)/10
                let ang2 = Math.cos(deg2rad(mod2))
                // opwave = Math.abs(ang1+ang2) * 100
                // % ──────── FRUITS/FLOWERS setting ────────────────────────────────────────
//                cycle_fruit = randint(-3,num_of_fruit-1);  //@ neg vals are a very bad way to increase the 0 distributions
//                cycle_flowers = randint(-3,num_of_flowers-1);
                // % ────────────────────────────────────────────────────────────────────────

                // % ──────── RATIO setting ────────────────────────────────────────
                //? when form is smallest, set RATIO by time
                trt = 5

                if (nowsecs(0)%15 == 0) {
                    next_ratio_change = nowsecs(0)+15
                    next_ratio =  randintEx(0,num_of_ratios-1,next_ratio)
                    cycle_ratios = next_ratio;
                }

                //? set LINE opacity by counter and xdlAry[]
                for (let i=0;i<6;i++) {
                    let c = xdlAry[i][CiR(tc[4],0,99,0)]
                    let x= CiR(c,0,1000,0)/1000
                    opacities[i] = 1
                }
                // % ──────── LINE setting ────────────────────────────────────────
                show_all_lines = 1
                var g = 0
                let tcx = []
                let tcx_bez = []
                let tcx_flat = []
                for (let i=0;i<6;i++) {
                    let v =   CiR(tc[i+1],40,100,0)
                            - CiR(tc[i+2],0,20,0)
                            + CiR(tc[i+3],0,20,0) ;
                    tcx.push(v);
                }

                for (let i=0;i<6;i++) {
                    let v = CiR(tcx[i],0,DEF_pre_maxlengths[i],0);
                    pre_maxlengths[i] = v;
                    pensize[i] = CiR(tcx[i],-(1+4),i+4,0);
                }

                // % ──────── FRUITS/FLOWERS setting ────────────────────────────────────────
                if (nowsecs(0)%17 == 0) {
                    cycle_fruit = randint(0,num_of_fruit-1);
                }
                if (nowsecs(0)%23 == 0) {
                    cycle_flowers = randint(0,num_of_flowers-1);
                }

                // % ──────── PATH setting ────────────────────────────────────────
                //? turn on PATHS
                // if (cycle_path==0) {cycle_path=1}
                path_mode = 0
                path_color = colors360[tc[10]%360];
                // path_color = "white";
                //? set PATH style by time
                if (nowsecs(0)%60 == 0) {
                    cycle_path = randintEx(1,num_of_paths-1,cycle_path);
                }

                if (bg_color == "black") {
                    path_opacity = 1//CiR(tc[5],0,100,0)/100 //? op at > 1.0 is op = 1.0
                    if (path_opacity < 0.2) {path_opacity = 0.2} //? limit opacitry to 0.2
                    path_width = CiR(tc[10]%500,1,5,0)/1; //? width incremennet by 100ths (even though fractions are prob not supported)
                }
                // if (bg_color == "white") {
                //     path_opacity = CiR(opwave,000,800,0)/999 //? op at > 1.0 is op = 1.0
                //     // path_opacity = 1
                //     path_width = CiR(tree_counter%500,1,4,0)/1;
                // }

                // % ──────── CIRCLE setting ────────────────────────────────────────
                //? set circles to SPHERES
                if (cycle_circles==0) {cycle_circles=1}  //? 1=palette color, 2=white, 3=random colors
                //? the '-2' is to eliminate the random colors which are always the last in the array
                //? set CIRCLE color by random when circles are invisible
                if (circle_opacity == 0) {
                    cycle_colors  = randintEx(0,num_of_colors-2,cycle_colors);
                }
                //? set CIRCLE radius by counter
                circle_radius   = CiR(tcx[0],0,17,0)
                //? set CIRCIE  OPACITY by counter
                circle_opacity  = CiR(tc[4],0,10,0)/10  //@ does nothing to lines, only circles

                // % ════════════════════════════════════════════════

                wait_flag = true
                last_cycle_ratios = cycle_ratios

                //? not used here
                // cycle_poly      = randint(0,num_of_polys)
                // cycle_dataset   = randint(0,1)
                // cycle_ratios    = randint(0,num_of_ratios-1)
                //? filter by seconds example
                // if (nowsecs(0)%(divs+15) == 0 && wait_flag == false) {
                //? makes fadeouts smoother
                // preop = path_opacity
                // if (path_width == 1) {path_opacity = .6} else {path_opacity = preop}
                // if (path_width == 2) {path_opacity = .86} else {path_opacity = preop}
            }
        }
    //% █████████████████████████ LOAD PRESETS ███████████████████████
    if (preset_changed == true) {
        //? read a preset query string and set all params
        //? linear cycles of presets
        // cycle_preset = (cycle_preset + 1)% num_of_presets
        // if (rolling_presets) {
        //     cycle_preset = tree_counter% num_of_presets
        // }
        //? random selection of presents
        // randint(0,num_of_presets)
        // var qsary = parseQuery(preqs[randint(0,cycle_preset)])
        var qsary = parseQuery(preqs[cycle_preset])
        //@ ARGS
        for (const key in qsary) {
            switch(key) {
                case 'up': loop_delay      = parseFloat(qsary[key]); break;  //? loop_delay can't be set here??
                case 'ia': iangle          = parseFloat(qsary[key]); break;  
                case 'de': deg_adj         = parseFloat(qsary[key]); break;  //? keep control manual
                case 'aN': circle_radius   = parseFloat(qsary[key]); break;
                case 'aO': poly_opacity    = parseFloat(qsary[key]); break;
                case 'aX': circle_opacity  = parseFloat(qsary[key]); break;
                case 'aR': cycle_colors    = qsary[key]; break;
                case 'a1': show_0          = qsary[key]; break;
                case 'a2': show_1          = qsary[key]; break;
                case 'a3': show_2          = qsary[key]; break;
                case 'a4': show_3          = qsary[key]; break;
                case 'a5': show_4          = qsary[key]; break;
                case 'a6': show_5          = qsary[key]; break;
                case 'ca0': show_all_lines  = qsary[key]; break;
                case 'aV': cycle_poly      = qsary[key]; break;
                case 'aG': cycle_audio     = qsary[key]; break;
                case 'aK': cycle_path      = qsary[key]; break;
                case 'aU': cycle_dataset   = qsary[key]; break;
                case 'aC': cycle_vars      = qsary[key]; break;
                case 'aM': cycle_circles   = qsary[key]; break;
                case 'aS': merge_counts    = qsary[key]; break;
                case 'FS': fullscreen      = qsary[key]; break;
                case 'aA':  cycle_preset   = qsary[key]; break;
                case 'aT':  zoomin         = qsary[key]; break;
                case 'aP':  screensave     = qsary[key]; break;
                case 'aY':  cycle_ratios   = qsary[key]; break;
                case 'aJ':  jump_delta     = qsary[key]; break;
                case 'li':  path_mode      = qsary[key]; break;
                case 'mF':  cycle_flowers  = qsary[key]; break;
                case 'mT':  cycle_fruit    = qsary[key]; break;
                case 'aD':  cycle_genang   = qsary[key]; break;
                case 'cm':  clock_mode    = qsary[key]; break;
                case 'aQ':  showtext       = qsary[key]; break;
                case 'mc':  merge_colors   = qsary[key]; break;
            }
        }
        preset_changed = false
        console.log("Preset changed: "+preset_changed)
    }
    //% ≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡

    //? ────────────────────────────────────────────────
    //? rebuild timing data based on changes in specs
    tt = cycletimes(loop_delay, deg_adj, genangLEFT, genangRIGHT)
    cycletime = tt['cycletime']
    tot_cycletime = tt['tot_cycletime']
    tot_images = tt['tot_images']

    //? ──────────────────────────────────────────────── CYCLE COLORS
    if (cycle_colors == 1) {  //? shift spectrum of 7 color
        for (let i = 0; i < 7; i++) {
            colors2[1][i] = generateColor(CiR(tree_counter + (i * 45), 0, 360, 0))
        }
    }
    if (cycle_colors == 2) {  //? random colors
        for (let i = 0; i < 7; i++) {
            colors2[num_of_colors-1][i] = generateRandomColor() //? last in array
        }
    }
    //? ────────────────────────────────────────────────
    //% █████████████ ADJUSTMENTS █████████████
    //% let noteseed = (54+tree_counter+ rotation)%108+108
    //? ────────────────────────────────────────────────

    //@ this part is very confusing...  we need to swap 'rotation' and 'branch_angle' otherwise we get lines all 
    //@ rotating in the same directions around their centers, i.e., there is no symetrical balance, only rotational uniformity.  
    //@ This swapping could also be accomplished but reversing the declared names in the function, i.e., 
    //@ 'function drawTree(rotation, branch_angle)', as this also keeps 'branch_angle' values assigned to 'branch_angle' variable. 

    //? this call has the arguments in the order they are called in 'Tree'
    // var draw_tree = new Tree(gens, this_length, start_x, start_y, branch_angle, rotation);
    //? but we need to use THIS swapped args to get symetrical results

    var draw_tree = new Tree(gens, this_length, start_x, start_y, rotation, branch_angle);
    var draw_edges = getTreeEdges(draw_tree);
    gen = 0

    //* ██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
    //*
    //* ██████   █████  ████████  █████  ███████ ███████ ████████ ███████ 
    //* ██   ██ ██   ██    ██    ██   ██ ██      ██         ██    ██      
    //* ██   ██ ███████    ██    ███████ ███████ █████      ██    ███████ 
    //* ██   ██ ██   ██    ██    ██   ██      ██ ██         ██         ██ 
    //* ██████  ██   ██    ██    ██   ██ ███████ ███████    ██    ███████ 
    //*
    //* ██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
                                                                                              

    //? create data sets from original data

    // var bezierary_right = BezierCurve(fullary_right);
    // var bezierary_left = BezierCurve(fullary_left);

    adata_right = [] //? these hold the final data used to creates lines
    adata_left = []

    //? any cycle_path > 0 runs concurrently with "lines"
    if (cycle_path == 0) {dataform ="line"}  //? nomal lines are the default
    if (cycle_path >0 ) {dataform ="buildpath"} //? 'dataform is a flag for later processing

    //? this is the default using standrd x/y data
    if (cycle_dataset == 0) {
        draw_edges.forEach(element => {
            adata_right.push({'x':element.node_1.x, 'y':element.node_1.y})
            adata_left.push({'x':element.node_2.x, 'y':element.node_2.y})
        })
    }
    //? these are ugly and broken
    if (cycle_dataset == 1) {
        //? "bez"
        adata_right = BezierCurve(fullary_right);
        adata_left = BezierCurve(fullary_left);
    }
    if (cycle_dataset == 2) {
        //? "bezSrtx"
        adata_right = BezierCurve(fullary_right);
        adata_left = BezierCurve(fullary_left);
        adata_right = sortByKey(adata_right,'x');
        adata_left = sortByKey(adata_left,'y');
    }


    //* ██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
    //*
    //* ██████   █████  ████████ ██   ██ ███████ 
    //* ██   ██ ██   ██    ██    ██   ██ ██      
    //* ██████  ███████    ██    ███████ ███████ 
    //* ██      ██   ██    ██    ██   ██      ██ 
    //* ██      ██   ██    ██    ██   ██ ███████ 
    //*
    //* ██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████

    if (dataform=="buildpath") {
        //? build the paths
        paths = buildpath(xfullary_right)
        //? paths is just an array of 2 lists or 6 elements each...
        //? [["M0,0","M0,0","M0,0","M0,0","M0,0","M0,0"],["M0,0","M0,0","M0,0","M0,0","M0,0","M0,0",]]
        //? path_r and path_l contains 6 subarrays each

        path_r = paths[0]
        path_l = paths[1]

        //? reset arrays to initial item only
        xfullary_right = [{'g':7,'x':0,'y':0}]
        xfullary_left = [{'g':7,'x':0,'y':0}]

//        let xgen = gen

        //? each gen is a single path... "M 0,0 C 0,0..."
        //@ DEBUG Doesn't exactly do what I want
        let limiter = Math.round(1 / (Math.abs((loop_delay / 1000))))

        var newPath_r = document.createElementNS(svgns, 'path');
        var newPath_l = document.createElementNS(svgns, 'path');

        //? normal gradient settings for path_mode
        var lcx = 0.5
        var lcy = 0.3
        var lr = 0.8

        if (path_color == 0) {
            path_color = colors2[cycle_colors][gen]
        }
        //? override for path_mode when viewiun just lines


        if (path_mode > 0) {
           path_width = path_mode //? override previous setting in buildpath()
           lcx = 0.5
           lcy = 0.5
           lr = 1
        }

        //? debug/viewing overrides
        path_color = "white";
        path_opacity="1";
        path_width='3'


        //? prepare the gradiant stroke for the PATHS
        var DATdefs = document.createElementNS(svgns, 'defs');
        var gradient = document.createElementNS(svgns, 'radialGradient');
        var stops = [
            {"color": path_color,      "offset": "0%"},
            {"color": "#000000",    "offset": "100%"}
        ];

        for (var i = 0, length = stops.length; i < length; i++) {
            var stop = document.createElementNS(svgns, 'stop');
            stop.setAttribute('offset', stops[i].offset);
            stop.setAttribute('stop-color', stops[i].color);
            gradient.appendChild(stop);
        }
        gradient.id = 'datasetGradient';
        gradient.setAttribute('cx', lcx);
        gradient.setAttribute('cy', lcy);  //? light is slightly above horizon
        gradient.setAttribute('r', lr);
        DATdefs.appendChild(gradient);

        newPath_r.setAttribute('d', ""+path_r[gen]);
        newPath_r.setAttribute("fill-opacity", "0");
        newPath_r.setAttribute("stroke-width", path_width);
        newPath_r.setAttribute("stroke-opacity", path_opacity);
        newPath_r.setAttribute('stroke', 'url(#datasetGradient)');
        svg.appendChild(DATdefs);
        svg.appendChild(newPath_r);

        //% ████████████████ ADJUSTMENT ████████████████
        // newpensize = pensize[gen] * line_thickness

        newPath_l.setAttribute('d', ""+path_l[gen]);
        newPath_l.setAttribute("fill-opacity", "0");
        newPath_l.setAttribute("stroke-width", path_width);//path_width);//@ SD
        newPath_l.setAttribute("stroke-opacity", path_opacity);
        newPath_l.setAttribute('stroke', 'url(#datasetGradient)');
        svg.appendChild(DATdefs);
        svg.appendChild(newPath_l);
    }

    //@ ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    //@
    //@                                             ██████          ██       ██████   ██████  ██████  
    //@                                            ██               ██      ██    ██ ██    ██ ██   ██ 
    //@                                            ███████          ██      ██    ██ ██    ██ ██████  
    //@                                            ██    ██         ██      ██    ██ ██    ██ ██      
    //@                                             ██████          ███████  ██████   ██████  ██                                                   
    //@
    //@ ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

    //? loop through the generated data
    //? length of adata_right is 126
    for (let idx = 0; idx<adata_right.length; idx++) {
        //? set the base data vars
        nx1 = adata_right[idx].x
        ny1 = adata_right[idx].y
        nx2 = adata_left[idx].x
        ny2 = adata_left[idx].y

        xytrack(nx2,ny2);

        order = lOrder[gen] //? get the actual gen value from the gens, which goes up to 126

        //* ██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
        //* 
        //*   ██████ ██ ██████   ██████ ██      ███████ ███████ 
        //*  ██      ██ ██   ██ ██      ██      ██      ██      
        //*  ██      ██ ██████  ██      ██      █████   ███████ 
        //*  ██      ██ ██   ██ ██      ██      ██           ██ 
        //*   ██████ ██ ██   ██  ██████ ███████ ███████ ███████ 
        //* 
        //*  ██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
                                                                        
        //? add circle
        var totcirc = 3
   
        //% █████████████ ADJUSTMENTS █████████████
        var cr_rad = Math.round(circle_radius*((7-order)/3)) //? this is small so we can cycle through the circle-types

        if (clock_mode > 0) {
            cr_rad = maxlengths[order]*circle_radius;
        }


        if (cycle_circles > 0) { 
            //? prepare the gradient for the circle
            mCIRdefs[order] = document.createElementNS(svgns, 'defs');
            mCIRgradient[order] = document.createElementNS(svgns, 'radialGradient');
            mCIRcircle[order] = document.createElementNS(svgns, 'circle');

            if (cycle_circles == 1) {mCIRcolor[order] = colors2[cycle_colors][order].toString()}
            if (cycle_circles == 2) {mCIRcolor[order] = "white"}
            if (cycle_circles == 3) {mCIRcolor[order] = generateRandomColor()} 

            mCIRstops[order] = [
                {"color":  mCIRcolor[order],"offset": "0%"},
                {"color": "#000000",        "offset": "100%"}
            ];

            for (var i = 0, length = mCIRstops[order].length; i < length; i++) {
                var stop = document.createElementNS(svgns, 'stop');
                stop.setAttribute('offset', mCIRstops[order][i].offset);
                stop.setAttribute('stop-color', mCIRstops[order][i].color);
                mCIRgradient[order].appendChild(stop);
            }

            //? rotate the light source


            //? This part calcs the angle from the viewport x,y.  Not used here, but good to save
            //@ let cxr =  Math.sin(deg2rad(point.vx))/3+.5
            //@ let cyr =  Math.cos(deg2rad(point.vy))/3+.5

            //? This part converts branch_angle to angle of 'light source'
            //? +90° to adjust the coords to top=0°, then +180° to place teh light src at top when top=0°
            let cxr =  Math.cos(deg2rad(branch_angle+90+180))/3+.5
            let cyr =  Math.sin(deg2rad(branch_angle+90+180))/3+.5

            mCIRgradient[order].id = 'Gradient'+order;
            mCIRgradient[order].setAttribute('cx', cxr.toString());//'0.3');
            mCIRgradient[order].setAttribute('cy', cyr.toString());//'0.3');
            mCIRgradient[order].setAttribute('r', '1');
            mCIRdefs[order].appendChild(mCIRgradient[order]);
            //? end of prep  ----------------------------------

            mCIRcircle[order].setAttribute("id", "circles"+order);
            mCIRcircle[order].setAttribute("cx", nx2.toString());
            mCIRcircle[order].setAttribute("cy", ny2.toString());
            mCIRcircle[order].setAttribute("r", cr_rad);            
            mCIRcircle[order].setAttribute('fill', 'url(#Gradient'+order+')');
            mCIRcircle[order].setAttribute("opacity", circle_opacity);
            mCIRcircle[order].setAttribute("style","z-index:"+(current_level*10)); //? not working :/
            // mCIRcircle[order].setAttribute("style","mix-blend-mode: color;");

            svg.appendChild(mCIRdefs[order]);
            svg.appendChild(mCIRcircle[order]);
        }
        //@ ██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████



        //* ██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
        //*
        //* ██████   ██████  ██      ██    ██  ██████   ██████  ███    ██ ███████ 
        //* ██   ██ ██    ██ ██       ██  ██  ██       ██    ██ ████   ██ ██      
        //* ██████  ██    ██ ██        ████   ██   ███ ██    ██ ██ ██  ██ ███████ 
        //* ██      ██    ██ ██         ██    ██    ██ ██    ██ ██  ██ ██      ██ 
        //* ██       ██████  ███████    ██     ██████   ██████  ██   ████ ███████ 
        //*
        //* ██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
                                                                                          
        function makePolyAry(n) {
            var poly_arr = false
            if (n==1) {
                poly_arr = [
                    [nx2, ny2],
                    [
                        (nx2 - 10) * Math.cos(rotation) - (nx2 - 10) * Math.sin(rotation),
                        (ny2 + 10) * Math.cos(rotation) + (ny2 + 10) * Math.sin(rotation),
                    ],
                    [
                        (nx2 + 10) * Math.cos(rotation) - (nx2 - 10) * Math.sin(rotation),
                        (ny2 + 10) * Math.cos(rotation) + (ny2 - 10) * Math.sin(rotation),
                    ],
                ];
                xytrack(poly_arr[1][0],poly_arr[1][1],)
                xytrack(poly_arr[2][0],poly_arr[2][1],)
            }
            if (n == 2) {
                poly_arr = [
                    [nx2, ny2],
                    [
                        nx1 ,
                        CiR(Math.round(Math.abs((ny1 + 10) * Math.cos(rotation) + (ny2 + 10) * Math.sin(rotation))),-50,50,0)+ny2-ny1,
                    ],
                    [
                        nx1,
                        CiR(Math.round(Math.abs((ny1 + 10) * Math.cos(rotation) + (ny2 - 10) * Math.sin(rotation))),-50,50,0)+ny2-ny1,
                    ],
                ];
                xytrack(poly_arr[1][0],poly_arr[1][1],)
                xytrack(poly_arr[2][0],poly_arr[2][1],)
            }
            if (n == 3) {
                poly_arr = [
                    [nx2, ny2],
                    [
                        nx2 - nx2 * Math.cos(rotation),
                        ny2 + ny2 * Math.sin(rotation),
                    ],
                    [
                        nx2 + nx2 * Math.cos(rotation),
                        ny2 + ny2 * Math.sin(rotation),
                    ],
                ];
                xytrack(poly_arr[1][0],poly_arr[1][1],)
                xytrack(poly_arr[2][0],poly_arr[2][1],)

            }
            if (n == 4) { //? currently not workng
                var petal = [
                    [0, 0]
                    , [nx1 % 10, -ny1 % 10]
                    , [-nx1 % 10, ny1 % 10]
                    , [ny1 % 10, -nx1 % 10]
                    , [-ny1 % 10, nx1 % 10]
                ]
                poly_arr = []
                for (let i = 0; i < petal.length; i++) {
                    xp = petal[i][0] * 10
                    yp = petal[i][1] * 10
                    poly_arr.push({
                        'x': xp + nx2,
                        'y': yp + ny2
                    })
                }
               poly_arr = BezierCurve(poly_arr);

                var parr = []
                for (let i = 0; i < poly_arr.length; i++) {
                    parr.push([poly_arr[i].x, poly_arr[i].y])
                }
                poly_arr = parr
            }
            return poly_arr
        }

        var poly_arr = makePolyAry(cycle_poly)

        if (cycle_poly > 0) {
            updateListMinMax(poly_arr);

            //? ┌───────────────────────────────────────────────
            //? │ we have a poly, now prepare the gradients for poly and stroke for the PATHS
            //? └───────────────────────────────────────────────
            //@ !!!!!When 'defs' is defined globally, the refresh rate drops by about 80%!!!!!!
            //? ------------------------------------
            //? create the gradiant for FILL
            //? ------------------------------------
            var LGdefs = document.createElementNS(svgns, 'defs');
            var fillGradient = document.createElementNS(svgns, 'linearGradient');
            //? stops for fillGradient
            //? pick 3 colors...

            tidx = 0//tree_counter%6 //@ is actually branch_angle

            clrIdx_1 = tidx
            clrIdx_2 = (tidx+2)%6
            clrIdx_3 = (tidx+4)%6

            //? select 3 colors from the colors2 array
            let polyColor_1 = colors2[cycle_colors][clrIdx_1]
            let polyColor_2 = colors2[cycle_colors][clrIdx_2]
            let polyColor_3 = colors2[cycle_colors][clrIdx_3]


            //? for testing
            // let polyColor_1 = "#FF0000"
            // let polyColor_2 = "#00FF00"
            // let polyColor_3 = "#0000FF" 

            //? polyColor_<n>_offset is defined globally

            //? reference http://thenewcode.com/1155/Understanding-Linear-SVG-Gradients
            //@ This part was intended to show drift in the gradiant, but not working as imagined
//            offsets = normalize(
//                [
//                    (polyColor_1_offset + 1)%33,
//                    (polyColor_1_offset + polyColor_2_offset+1)%66,
//                    (polyColor_1_offset + polyColor_2_offset + polyColor_3_offset+1)%99
//                ],[1,100]
//            )
//            offsets.sort(sortNumbers);  //? make sure the offsets are sorted incrementally

            offsets = [
                CiR(tree_counter,0,60,0),//polyColor_1_offset,
                CiR(tree_counter,20,80,0),//polyColor_2_offset,
                CiR(tree_counter,40,100,0),//polyColor_3_offset
            ]

//            polyColor_1_offset = parseInt(offsets[0])
//            polyColor_2_offset = parseInt(offsets[1])
//            polyColor_3_offset = parseInt(offsets[2])

            var fillGradient_stops = [
                {"color":  polyColor_1,"offset":  offsets[0]+"%"},
                {"color":  polyColor_2,"offset":  offsets[1]+"%"},
                {"color":  polyColor_3,"offset":  offsets[2]+"%"},
            ];

            for (var i = 0, length = fillGradient_stops.length; i < length; i++) {
                var stop = document.createElementNS(svgns, 'stop');
                stop.setAttribute('offset', fillGradient_stops[i].offset);
                stop.setAttribute('stop-color', fillGradient_stops[i].color);
                fillGradient.appendChild(stop);
            }

            //? ------------------------------------
            //? create the gradiant for STROKE
            //? ------------------------------------
            var STdefs = document.createElementNS(svgns, 'defs');
            var strokeGradient = document.createElementNS(svgns, 'linearGradient');

            // let altPolyColor_1 = colors2[cycle_colors][(clrIdx_1+1)%6]
            // let altPolyColor_2 = colors2[cycle_colors][(clrIdx_2+1)%6]
            // let altPolyColor_3 = colors2[cycle_colors][(clrIdx_3+1)%6]

            let tc1 = colors2[cycle_colors][(clrIdx_1+1)%6];
            let tc2 = colors2[cycle_colors][(clrIdx_2+1)%6];
            let tc3 = colors2[cycle_colors][(clrIdx_3+1)%6];

            let altPolyColor_1 = pSBC(-0.6,tc1)
            let altPolyColor_2 = pSBC(-0.6,tc2)
            let altPolyColor_3 = pSBC(-0.6,tc3)



            //? use the same offsets
            var strokeGradient_stops = [
                {"color":  altPolyColor_1,"offset":  offsets[0]+"%"},
                {"color":  altPolyColor_2,"offset":  offsets[1]+"%"},
                {"color":  altPolyColor_3,"offset":  offsets[2]+"%"},
            ];


            for (var i = 0, length = strokeGradient_stops.length; i < length; i++) {
                var stop = document.createElementNS(svgns, 'stop');
                stop.setAttribute('offset', strokeGradient_stops[i].offset);
                stop.setAttribute('stop-color', strokeGradient_stops[i].color);
                strokeGradient.appendChild(stop);

            }

            fillGradient.id = 'fillGradient'+gen;
            fillGradient.setAttribute('x1', '0%');
            fillGradient.setAttribute('x2', '100%');
            fillGradient.setAttribute('y1', '0%');
            fillGradient.setAttribute('y2', '100%');

            strokeGradient.id = 'strokeGradient'+gen;
            strokeGradient.setAttribute('x1', '0%');
            strokeGradient.setAttribute('x2', '0%');
            strokeGradient.setAttribute('y1', '0%');
            strokeGradient.setAttribute('y2', '100%');

            LGdefs.appendChild(fillGradient);
            STdefs.appendChild(strokeGradient);

            let poly = document.createElementNS(svgns, 'polygon');
            poly.setAttribute("points", poly_arr);
            // poly.setAttribute("fill", colors2[cycle_colors][order + gens].toString());
            poly.setAttribute('fill', 'url(#fillGradient'+gen+')');
            poly.setAttribute('stroke', 'url(#strokeGradient'+gen+')');
            poly.setAttribute("opacity", poly_opacity);
            //poly.setAttribute("fill", generateRandomColor());
            //poly.setAttribute("stroke", generateRandomColor());
            poly.setAttribute("stroke-width", '1');
            poly.setAttribute("stroke-linecap", "round");

            svg.appendChild(LGdefs);
            svg.appendChild(STdefs);
            svg.appendChild(poly);
        }

        //% █████████████ ADJUSTMENTS █████████████
        newpensize = pensize[order] * line_thickness
        //% newpensize = CiR((tree_counter-order)/10*(order+1),1,10,0)

        //% ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        //%
        //% ██████  ██████   █████  ██     ██     ██      ██ ███    ██ ███████ 
        //% ██   ██ ██   ██ ██   ██ ██     ██     ██      ██ ████   ██ ██      
        //% ██   ██ ██████  ███████ ██  █  ██     ██      ██ ██ ██  ██ █████   
        //% ██   ██ ██   ██ ██   ██ ██ ███ ██     ██      ██ ██  ██ ██ ██      
        //% ██████  ██   ██ ██   ██  ███ ███      ███████ ██ ██   ████ ███████ 
        //%
        //% ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
                                                                           
        //? DRAW THE LINE
        //? prepare the gradient for the line
        //! The generation indexing starts at 1, not 0 !!

        linecolors = colors2[cycle_colors]
        mLINEcolor[order] = linecolors[order]


        mLINEdefs[order]    = document.createElementNS(svgns, 'defs');
        mLINEgradient[order]= document.createElementNS(svgns, 'radialGradient');
        mLINEline[order]    = document.createElementNS(svgns, 'line');

        let c1 = mLINEcolor[(Math.abs(order+1))%6]
        let c2 = mLINEcolor[order]

        mLINEstops[order] = [
            {"color": c1,   "offset": "10%"},
            {"color": c2,   "offset": "90%"},
        ];

        for (var i = 0; i < mLINEstops[order].length; i++) {
            var stop = document.createElementNS(svgns, 'stop');
            stop.setAttribute('offset', mLINEstops[order][i].offset);
            stop.setAttribute('stop-color', mLINEstops[order][i].color);
            mLINEgradient[order].appendChild(stop);
        }
        //? ug!  This gradiant spec is one of the worst, and it's broken as well.  radialGradient are only radial
        //? at 45 degrees, and they disappear at 0 and 90 deg.
        mLINEgradient[order].id = 'lineGradient'+gen;
        mLINEgradient[order].setAttribute('cx', "50%");
        mLINEgradient[order].setAttribute('cy', "50%");
        mLINEgradient[order].setAttribute('r', "100%");//this_length);
        mLINEdefs[order].appendChild(mLINEgradient[order]);
        //! ---------------------------------------------

        //? doesn't work here either :( 
        // if (clock_mode == 3) {
        //     let angle = ((rad2deg(Math.atan2(ny2-ny1,nx2-nx1)))+360+90)%360;
        //     let rad = maxlengths[lOrder[gen]-1]*2 *.90;
        //     if (lOrder[gen] == 0) {
        //         //? recalc base line for 4AM adj
        //         //? DOESN'T WORK HERE
        //         nx2 = Math.cos(deg2rad(angle) * rad + nx1);
        //         ny2 = Math.sin(deg2rad(angle) * rad + ny1);

        //     }
        // }

        mLINEline[order].setAttribute('x1', nx1.toString())
        mLINEline[order].setAttribute('y1', ny1.toString())
        mLINEline[order].setAttribute('x2', nx2.toString())
        mLINEline[order].setAttribute('y2', ny2.toString())

        mLINEline[order].setAttribute("id", "lines"+gen);

        if (clock_mode > 0) {
            mLINEline[order].setAttribute('stroke', mLINEcolor[order]);
        } else {
            mLINEline[order].setAttribute('stroke', 'url(#lineGradient'+gen+')');
        }
        // mLINEline[order].setAttribute("opacity", "1");
        if (clock_mode > 0) {
            mLINEline[order].setAttribute("stroke-width",(7-order));
        } else {
            mLINEline[order].setAttribute("stroke-width",newpensize);            
        }
        mLINEline[order].setAttribute("opacity", opacities[order]);

        svg.appendChild(mLINEdefs[order]);

        //? what lines to show/hide

        if (clock_mode > 0) {
            if (order == current_level) {
                if (show_all_lines == 1) {
                    if (show_0 == 1 && order == 0) {svg.appendChild(mLINEline[order]);}
                    if (show_1 == 1 && order == 1) {svg.appendChild(mLINEline[order]);}
                    if (show_2 == 1 && order == 2) {svg.appendChild(mLINEline[order]);}
                    if (show_3 == 1 && order == 3) {svg.appendChild(mLINEline[order]);}
                    if (show_4 == 1 && order == 4) {svg.appendChild(mLINEline[order]);}
                    if (show_5 == 1 && order == 5) {svg.appendChild(mLINEline[order]);}
                }
                //? placing this here ensure the polys and circles appear ON TOP of the lines they eminate from.
                //? z-index (zIndex) settings appear to do nothing :/
                let offset = 0;
                if (lOrder[gen] == 5) { //? only apply to last line
                    if (cycle_flowers > 0)  {
                        putPoly(nx2,ny2,idx);
                    }
                    if (cycle_fruit > 0)    {
                        putCircle(nx2,ny2,idx,offset);
                    }
                }
                for (let i = 0; i<6; i++) {
                    if (lOrder[gen] == i) { 
                        if (show_lines[i] == 1) {
                            putClock(nx1,ny1,nx2,ny2,i,0); 
                        }
                    }
                }
                current_level = (current_level + 1)%6;
            }
        } else {
            if (show_all_lines == 1) {
                if (show_0 == 1 && order == 0) {svg.appendChild(mLINEline[order]);}
                if (show_1 == 1 && order == 1) {svg.appendChild(mLINEline[order]);}
                if (show_2 == 1 && order == 2) {svg.appendChild(mLINEline[order]);}
                if (show_3 == 1 && order == 3) {svg.appendChild(mLINEline[order]);}
                if (show_4 == 1 && order == 4) {svg.appendChild(mLINEline[order]);}
                if (show_5 == 1 && order == 5) {svg.appendChild(mLINEline[order]);}
            }

            //? placing this here ensure the pols abd circles appear ON TOP of the lines they eminate from
            let offset = 0;
            if (lOrder[gen] == 5) { //? only apply to last line
                if (cycle_flowers > 0)  {
                    putPoly(nx2,ny2,idx);
                }
                if (cycle_fruit > 0)    {
                    putCircle(nx2,ny2,idx,offset);
                }
            }
        }
        gen++;
    };
    writeMenu()

    //! ██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
    //!
    //! ███████  ██████  ██    ██ ███    ██ ██████  
    //! ██      ██    ██ ██    ██ ████   ██ ██   ██ 
    //! ███████ ██    ██ ██    ██ ██ ██  ██ ██   ██ 
    //!      ██ ██    ██ ██    ██ ██  ██ ██ ██   ██ 
    //! ███████  ██████   ██████  ██   ████ ██████  
    //!
    //! ██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
    if (sound_initialized == 1) {

        //? make some new sounds based on vars
        alternotes = [54, 67.5, 43.2, 34.56, 84.375]
        let noteseed = (tree_counter + rotation) % 4
        let rx = randint(0, alternotes.length - 1)
        let xx = alternotes[rx] * 2

        //@ g=0: playSound_oscLong()  Long sound
        //@ g=1: playSound_oscShort()  Short sound
        //@ g=2: playSoundData()  snd.play(MP3) - currenly not used
        //@ g=3: playSound_fft()  long and short together
        //@ g=4: playSound_3()  varible length


        //@ &g=
        let limiter = Math.round(1 / (Math.abs((loop_delay / 1000))))
        //? Play sound #1 (playSound_oscLong = LONG SOUND) (g=0)

        if (cycle_audio == 0 && (tree_counter % limiter == 0)) {
            // long sound
            pp = 1000 / (tree_counter % 7)
            for (let i = 1; i < 7; i++) {
                setTimeout(function () {
                    playSound_oscLong(crosssum(rotation), i)
                }, pp * i)
            }
        }
        //? Play sound #2 (playSound_oscShort = SHORT SOUND)
        if (cycle_audio == 1 && (tree_counter % limiter == 0)) {
            // short sound
            pp = 1000 / (tree_counter % 7)
            for (let i = 1; i < 7; i++) {
                setTimeout(function () {
                    playSound_oscShort(crosssum(rotation), i)
                }, pp * i)
            }
        }
        //? Play sound #3 (playSoundData = MP3-piano)
        if (cycle_audio == 2 && (tree_counter % limiter == 0)) {
            //piano notes
            pp = 1000 / (crosssum(branch_angle + branch_counter) % 4)
            for (let i = 1; i < 6; i++) {
                setTimeout(function () {
                    note = randint(0, 20)
                    playSoundData("data:audio/wav;base64," + pianoNotes[note])
                }, pp * i)
            }
        }
        //? Play sound #3 - playSound_oscLong + playSound_osc, long and short
        if (cycle_audio == 3 & (tree_counter % limiter == 0)) {
            // long and short 
            pp = 1000 / (tree_counter % 7)
            for (let i = 1; i < 7; i++) {
                setTimeout(function () {
                    playSound_oscLong(crosssum(rotation), i)
                }, pp * i)
                setTimeout(function () {
                    playSound_oscShort(crosssum(rotation), i)
                }, pp * i)
            }
        }
        // //? Play sound #4 - playSound_oscLong + playSound_osc, long and short
        // if (cycle_audio == 4 & (tree_counter % limiter == 0)) {
        //     pp = 1000 / (tree_counter % 7)
        //     for (let i = 1; i < 7; i++) {
        //         setTimeout(function () {
        //             //? rotation is actually angle :/  so angle%36= rangoe of 1-10 seconds
        //             playSound_3(crosssum(rotation)%36, i)
        //         }, pp * i)
        //     }
        // }
    }
        //! ██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████

//    console.log("drawBox("+gMin_x+","+gMax_x+","+gMin_y+","+gMax_y+"  w/h:"+(gMax_y-gMin_y)+"/"+(gMax_x-gMin_x)+")")
    boxWidth = Math.round(gMax_y-gMin_y)
    boxHeight = Math.round(gMax_x-gMin_x)
    boxSize = boxWidth * boxHeight
//    drawBox(gMin_x, gMax_x, gMin_y, gMax_y)
    //? this only works here (not in listeners)
    if (zoomin == 1) {
        was_zoomed = 1
        last_showtext = showtext;
        zoomvb(gMin_x, gMax_x, gMin_y, gMax_y)  
        showtext=0; //? turn off the menu, as it is unreadable
    } else {
        if (gMin_x+gMax_x+gMin_y+gMax_y != 0) {
            eleSvg.setAttribute("viewBox", "-960 -512 1920 1024");
            if (was_zoomed == 1) {
                showtext = last_showtext; //? turn menu back on
                was_zoomed = 0
            }
        }
    }}
//? END OF FUNCTION 'drawTree'
//! ┌───────────────────────────────────────────────
//! │ holds the x,y data
//! └───────────────────────────────────────────────
class Node {
    constructor(a, b) {
        this.x = a;
        this.y = b;
    }
    toString() {
        return "(" + this.x + ", " + this.y + ")";
//        return "(" + this.x.toFixed(2) + ", " + this.y.toFixed(2) + ")";
    }}
//! ┌───────────────────────────────────────────────
//! │ connections between nodes in a graph 
//! └───────────────────────────────────────────────
class Edge {
    constructor(node_a, node_b) {
        this.node_1 = node_a;
        this.node_2 = node_b;
    }
    toString() {
        return "[" + this.node_1.toString() + ", " + this.node_2.toString() + "]";
    }}
//! ┌───────────────────────────────────────────────
//! │ The main class that creates the x/y coords then calls drawTree
//! └───────────────────────────────────────────────
//% ████████████████████████████████████████████████████████████████████████████████████████████████
//%
//% ████████ ██████  ███████ ███████ 
//%    ██    ██   ██ ██      ██      
//%    ██    ██████  █████   █████   
//%    ██    ██   ██ ██      ██      
//%    ██    ██   ██ ███████ ███████  
//%                                         
//% ████████████████████████████████████████████████████████████████████████████████████████████████

class Tree {
    constructor(gens, lineLength, x, y, angle, rotation) {
        branch_counter++

        //? all trees have a base node

        this.base_node = new Node(x, y);
        var rel_len = false
        var realgen = (7 - gens) - 1  //? the 'gens' are indexed as 1-6

        var adjr = 0;
        if (clock_mode > 0) {adjr=90;} //? start 0h at bottom.


        var newangleLEFT  = (((angle * genangLEFT[realgen]) ) + rotation+adjr)%360;
        var newangleRIGHT = (((angle * genangRIGHT[realgen]) ) - rotation+adjr)%360;

        maxlengths = [0, 0, 0, 0, 0, 0]  //reset
        for (let i = 0; i < pre_maxlengths.length; i++) {
            maxlengths[i] = pre_maxlengths[i] + mladj[i]
        }

        //% █████████████ ADJUSTMENTS █████████████
        let newlinelength = maxlengths[realgen] * linelength_adj
        //% newlinelength = newlinelength + (CiR(parseInt(tree_counter/gens), -500,500, 0)/10) 

        if (gens > 0) {

            //% █████████████ ADJUSTMENTS █████████████
            //% cumxy[gens][0] = Math.round(cumxy[gens][0] + x)%100/100;
            //% cumxy[gens][1] = Math.round(cumxy[gens][1] + y)%100/100;
            //% if (gens == 6) {
            //%   console.log(cumxy[5][0],cumxy[5][1])
            //% }

            //? determine next node to the RIGHT in the tree with trig -->

            //? determine next node to the LEFT in the tree with trig 
            this.left_node = new Node(
                    x + (newlinelength) * Math.cos(toRadians(newangleLEFT)),
                    y + (newlinelength) * Math.sin(toRadians(newangleLEFT))
            );


            this.right_node = new Node(
                    x + (newlinelength) * Math.cos(toRadians(newangleRIGHT)),
                    y + (newlinelength) * Math.sin(toRadians(newangleRIGHT))
            );

            if (clock_mode > 0) {
                this.right_node = this.left_node;
            }



            //? push all the x.y values to a simple array
            fullary_right.push({'x':x,'y':y})

            //? push all the ADJUTSED x/y values WITH their generations number to a simple array
            xfullary_right.push({
                'g':gens,
                'x':(x + (newlinelength) * Math.cos(toRadians(newangleRIGHT))).toFixed(2),//Math.round(x*100)/100,
                'y':(y + (newlinelength) * Math.sin(toRadians(newangleRIGHT))).toFixed(2)//Math.round(y*100)/100
            })



            //? push all the x.y values to a simple array
            fullary_left.push({'x':x,'y':y})
            //? push all the ADJUTSED x/y values WITH their generations number to a simple array
            xfullary_left.push({
                'g':gens,
                'x':x + (newlinelength) * Math.cos(toRadians(newangleLEFT)),// Math.round(x*100)/100,
                'y':(y + (newlinelength) * Math.sin(toRadians(newangleRIGHT))).toFixed(2)//Math.round(y*100)/100
            })

            //<!--  create edges in the graph that connect the base node to the following nodes -->
            this.right_branch = new Edge(this.base_node, this.right_node);
            this.left_branch = new Edge(this.base_node, this.left_node);


            //<!--  generate a tree beginning at the right/left node, with a lower depth and new start angle -->               

            //? save line angle for later (clock)
            line_angles[realgen] = newangleLEFT;

            this.left_tree = new Tree(
                    gens - 1,
                    maxlengths[realgen],
                    this.left_node.x,
                    this.left_node.y,
                    newangleLEFT,
                    rotation
            );


            this.right_tree = new Tree(
                    gens - 1,
                    maxlengths[realgen],
                    this.right_node.x,
                    this.right_node.y,
                    newangleRIGHT,
                    rotation
            );

            if (clock_mode > 0) {
                 this.right_tree = this.left_tree;
            }            
        }
    }}

//% ████████████████████████████████████████████████████████████████████████████████████████████████
//% ████████████████                ████████████████                ████████████████                 
//% ████    ████    ████    ████    ████    ████    ████    ████    ████    ████    ████    ████    
//% ██  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██  
//% █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ 
//% ██  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██  
//% ████    ████    ████    ████    ████    ████    ████    ████    ████    ████    ████    ████    
//% ████████████████                ████████████████                ████████████████                 
//% ████████████████████████████████████████████████████████████████████████████████████████████████


//! ┌───────────────────────────────────────────────
//! │ TIME: convert t-time to HMS
//! └───────────────────────────────────────────────
function ttime2hms(val) {
    return(toTimeString(ticks2secs(parseInt(val,6))));
}
//! ┌───────────────────────────────────────────────
//! │ TIME: returns epoch in seconds
//! └───────────────────────────────────────────────
function nowsecs(d) {
    var datestamp = 0;
    if (d==0) {
        datestamp = new Date();
    } else {
        datestamp = new Date(d);
    }
    var secs = new Date(datestamp).getTime()/1000;
    return secs}
//! ┌───────────────────────────────────────────────
//! │ TIME: returns epoch in seconds for NOW or ARG
//! └───────────────────────────────────────────────
function getSecsInDay(d, adj=0) {
  var e = new Date(d);
  let t = (d - e.setHours(0,0,0,0))/1000;
  t = t-adj;
  if (t<0) {t = t+86400;}
  return t;
}
//! ┌───────────────────────────────────────────────
//! │ TIME: returns epoch in HH:MM:SS format
//! └───────────────────────────────────────────────
function toTimeString(totalSeconds) {

    hours = Math.floor(totalSeconds / 3600);
    totalSeconds %= 3600;
    minutes = Math.floor(totalSeconds / 60);
    seconds = totalSeconds % 60;

    hms = hours.toString()+":"+minutes.toString()+":"+Math.round(seconds).toString();
    return hms;}
//! ┌───────────────────────────────────────────────
//! │ TIME: returns current seconds in the circle
//! └───────────────────────────────────────────────
function ticks2secs(t=false) {
    if (t==false) {
        t = tick_counter;
    }
    return (t * secs_per_level[5])%86400;
    // return (tick_counter * secs_per_level[5]);
}
//! ┌───────────────────────────────────────────────
//! │ TIME: returns current degrees in the circle
//! └───────────────────────────────────────────────
function ticks2degs(t=false) {
    if (t==false) {
        t = tick_counter;
    }
    return (t * degs_per_level[5])%360; 
    // return (tick_counter * degs_per_level[5]);
}
//! ┌───────────────────────────────────────────────
//! │ standalone poly routine
//! └───────────────────────────────────────────────
function putPoly(x,y,idx,offset=0) {//@ loop

    let gen = lOrder[idx]
    var svg = document.getElementById("svg");
    var poly_arr=[]
    var poly_varr_L = []
    var poly_varr_R = []

    let leaf_type = cycle_flowers;
    let poly_opacity = .5

    // % █████████ TRIS
    if (leaf_type == 1) {
//        poly_varr_R = [
//             [0,0],
//             [-10,+20],
//             [+10,+20],
//             [0,0],
//             [+20,-10],
//             [+10,-20],
//             [+0,0],
//             [-10,-20],
//             [-20,10],
//             [-0,0],
//        ]
        let v10 =CiR(tc[10]*2,1,10)
        let v20 =CiR(tc[10] *2,1,10)
//        poly_varr_R = [
//             [0,0],
//             [-(CiR(tc[1],-v10,+v10,1)),+(CiR(tc[1],+v20,-v20,1))],
//             [+(CiR(tc[1],+v10,-v10,1)),+(CiR(tc[1],+v20,-v20,1))],
//             [0,0],
//             [+(CiR(tc[1],+v20,-v20,0)),(CiR(tc[1],-v10,+v10,0))],
//             [+(CiR(tc[1],+v10,-v10,0)),-(CiR(tc[1],-v20,+v20,0))],
//             [+0,0],
//             [-(CiR(tc[1],-v10,+v10,0)),(CiR(tc[1],-v20,+v20,0))],
//             [-(CiR(tc[1],-v20,+v20,0)),+(CiR(tc[1],+v10,-v10,0))],
//             [-0,0],
//        ]
        poly_varr_R = [
             [0,0],
             [-v10,+v20],
             [+v10,+v20],
             [0,0],
             [+v20,-v10],
             [+v10,-v20],
             [+0,0],
             [-v10,-v20],
             [-v20,+v10],
             [-0,0],
        ]
    }
    // % █████████ THORNS
    if (leaf_type == 2) {
        for (let j=2; j>=0; j--) {
            for (let i=2; i>=0; i--) {
                poly_varr_R.push([randint(-20,20),randint(-20,20)]);
            }
        }
        poly_varr_R.push([0,0])
    }
    // % █████████ ARROWS
    if (leaf_type == 3) {
        poly_varr_R = [
             [0,0],
             [-10,+10],
             [+10,+10],
             [0,0],
             [+10,-10],
             [+10,-10],
             [+0,0],
             [-10,-10],
             [-10,10],
             [-0,0],
        ]
    }
    // % █████████ BIGTHORN
    if (leaf_type == 4) {
        ploy_opacity = 0.1
        let v = CiR(branch_angle,10,60,0)
        poly_varr_R = [
             [0,0],
             [-(CiR(nowsecs(0),-v,v,0))*-1,CiR(tree_counter,-v,v,0)],
             [CiR(tc[10],-v,v,0),CiR(tc[4],-v,v,0)],
             [0,0],
             [CiR(tree_counter,-v,v,0),CiR(branch_angle,-v,v,0)*-1],
             [CiR(nowsecs(0),-v,v,0),(CiR(nowsecs(0),-v,v,0))*-1],
             [+0,0],
             [(CiR(nowsecs(0),-v,v,0))*-1,(CiR(nowsecs(0),-v,v,0))*-1],
             [CiR(branch_angle,-v,v,0)*-1,CiR(branch_counter,-v,v,0)],
             [-0,0],
        ]
    }
    // % █████████ DATURA
    if (leaf_type == 5) {
        poly_varr_R = [
            [0,0],
            [0.2,0.73],
            [0.64,1.59],
            [1.12,2.21],
            [1.74,2.75],
            [2.34,2.81],
            [2.8,2.69],
            [2.76,3.31],
            [2.44,3.77],
            [2,4],
            [1.24,3.97],
            [2,4],
            [0.7,3.83],
            [0.42,3.47],
            [0,3],
            [-0.42,3.47],
            [-0.7,3.83],
            [-2,4],
            [-1.24,3.97],
            [-2,4],
            [-2.44,3.77],
            [-2.76,3.31],
            [-2.8,2.69],
            [-2.34,2.81],
            [-1.74,2.75],
            [-1.12,2.21],
            [-0.64,1.59],
            [-0.2,0.73],
            [-0,0],
        ]
        let v1= CiR(tc[12],1,12)
        let v2= CiR(tc[8],1,12)

        for (let i = 0; i<poly_varr_R.length;i++) {
            poly_varr_R[i][0] = poly_varr_R[i][0] * v1
            poly_varr_R[i][1] = poly_varr_R[i][1] * v2
        }
    }
    // % █████████ THORNS
    if (leaf_type == 6) {
        for (let j=2; j>=0; j--) {
            for (let i=2; i>=0; i--) {
                poly_varr_R.push([randint(-20,20),randint(-20,20)]);
            }
        }
        poly_varr_R.push([0,0])
    }

    //?------------------------------------------------------------------------------------

    poly_varr_L = poly_varr_R.reverse();

    if (x<0) {
        poly_varr = poly_varr_L
    } else {
        poly_varr = poly_varr_R
    }

    leaf_morph = 0

    for (let i=0;i<poly_varr.length;i++) {
        let nx = poly_varr[i][0]
        let ny = poly_varr[i][1]


       //? STANDARD leaf
        if (leaf_morph == 0) {
            //? rotate
            rby = (tree_counter%360)/10
            srby = Math.sin(rby)
            crby = Math.cos(rby)

            xny = (ny*crby) + (nx*srby)


//            if (y < 0) {
//                xny = (((ny*crby) - (nx*srby))+offset) * -1
//            } else {
//                xny = ((ny*crby) - (nx*srby)) + offset
//            }



            if (x < 0) {
                xnx = (((nx*crby) - (ny*srby))+offset) * -1
            } else {
                xnx = ((nx*crby) - (ny*srby)) + offset
            }
            px = x + xnx
            py = y + xny
        }

        poly_arr.push([px,py])
    }
    xytrack(poly_arr[2][0],poly_arr[2][1],)
    updateListMinMax(poly_arr);

    var polyfill_defs = document.createElementNS(svgns, 'defs');
    var polyfill_Gradient = document.createElementNS(svgns, 'radialGradient');

    tidx = 0//tree_counter%6 //@ is actually branch_angle

    clrIdx_1 = tidx
    clrIdx_2 = (tidx+2)%5
    clrIdx_3 = (tidx+4)%5

    // //? select 3 colors from the colors2 array
    this_color_1 = (randintEx(0,5,this_color_1))
    this_color_2 = (randintEx(0,5,this_color_2))
    this_color_3 = (randintEx(0,5,this_color_3))

     let polyColor_1 = colors2[this_color_1][clrIdx_1]
     let polyColor_2 = colors2[this_color_2][clrIdx_2]
     let polyColor_3 = colors2[this_color_3][clrIdx_3]


    //? for testing
//    let polyColor_1 = "#FF0000"
//    let polyColor_2 = "#00FF00"
//    let polyColor_3 = "#0000FF"


    offsets = [
        CiR(tree_counter,0,60,0),//polyColor_1_offset,
        CiR(tree_counter,20,80,0),//polyColor_2_offset,
        CiR(tree_counter,40,100,0),//polyColor_3_offset
    ]

    var polyfill_Gradient_stops = [
        {"color":  polyColor_1,"offset":  offsets[0]+"%"},
        {"color":  polyColor_2,"offset":  offsets[1]+"%"},
        {"color":  polyColor_3,"offset":  offsets[2]+"%"},
    ];

    for (var i = 0, length = polyfill_Gradient_stops.length; i < length; i++) {
        var stop = document.createElementNS(svgns, 'stop');
        stop.setAttribute('offset', polyfill_Gradient_stops[i].offset);
        stop.setAttribute('stop-color', polyfill_Gradient_stops[i].color);
        polyfill_Gradient.appendChild(stop);
    }

    //? ------------------------------------
    //? create the gradiant for STROKE
    //? ------------------------------------
    var polystroke_defs = document.createElementNS(svgns, 'defs');
    var polystroke_Gradient = document.createElementNS(svgns, 'linearGradient');

    let altPolyColor_1 = pSBC(-0.6,colors2[this_color_1][(clrIdx_1+1)%6])
    let altPolyColor_2 = pSBC(-0.6,colors2[this_color_2][(clrIdx_2+1)%6])
    let altPolyColor_3 = pSBC(-0.6,colors2[this_color_3][(clrIdx_3+1)%6])


    //? use the same offsets
    var polystroke_Gradient_stops = [
        {"color":  altPolyColor_1,"offset":  offsets[0]+"%"},
        {"color":  altPolyColor_2,"offset":  offsets[1]+"%"},
        {"color":  altPolyColor_3,"offset":  offsets[2]+"%"},
    ];


    for (var i = 0, length = polystroke_Gradient_stops.length; i < length; i++) {
        var stop = document.createElementNS(svgns, 'stop');
        stop.setAttribute('offset', polystroke_Gradient_stops[i].offset);
        stop.setAttribute('stop-color', polystroke_Gradient_stops[i].color);
        polystroke_Gradient.appendChild(stop);
    }

    polyfill_Gradient.id = 'fillGradient'+idx;
    polyfill_Gradient.setAttribute('cx', "50%");
    polyfill_Gradient.setAttribute('cy', "50%");
    polyfill_Gradient.setAttribute('r', '1');

    polystroke_Gradient.id = 'strokeGradient'+idx;
    polyfill_Gradient.setAttribute('cx', "50%");
    polyfill_Gradient.setAttribute('cy', "50%");
    polyfill_Gradient.setAttribute('r', '1');

    polyfill_defs.appendChild(polyfill_Gradient);
    polystroke_defs.appendChild(polystroke_Gradient);

    let poly = document.createElementNS(svgns, 'polygon');
    poly.setAttribute("points", poly_arr);
    poly.setAttribute('fill', 'url(#fillGradient'+idx+')');
    poly.setAttribute('stroke', 'url(#strokeGradient'+idx+')');
    poly.setAttribute("opacity", poly_opacity);//poly_opacity);
    poly.setAttribute("stroke-width", '1');
    poly.setAttribute("stroke-linecap", "round");

    svg.appendChild(polyfill_defs);
    svg.appendChild(polystroke_defs);
    svg.appendChild(poly);}
//! ┌───────────────────────────────────────────────
//! │ standalone circle routine
//! └───────────────────────────────────────────────
function putCircle(x,y,idx,offset) { //@ loop

    var svg = document.getElementById("svg");



    if (x < 0) {
        x = (x-offset)
    } else {
        x = (x+offset)
    }
    if (y < 0) {
        y = (y-offset)
    } else {
        y = (y+offset)
    }


    porder=idx
    pcir_circle[porder] = document.createElementNS(svgns, 'circle');

    //? prepare the gradient for the circle
    pcir_defs[porder] = document.createElementNS(svgns, 'defs');
    pcir_gradient[porder] = document.createElementNS(svgns, 'radialGradient');
    pcir_circle[porder] = document.createElementNS(svgns, 'circle');

    pcir_color[porder] = generateRandomColor()//"violet"

    pcir_stops[porder] = [
        {"color":  pcir_color[porder],"offset": "0%"},
        {"color": "#000000",        "offset": "100%"}
    ];

    for (var i = 0, length = pcir_stops[porder].length; i < length; i++) {
        var stop = document.createElementNS(svgns, 'stop');
        stop.setAttribute('offset', pcir_stops[porder][i].offset);
        stop.setAttribute('stop-color', pcir_stops[porder][i].color);
        pcir_gradient[porder].appendChild(stop);
    }

    //? rotate the light source
    //? This part calcs the angle from the viewport x,y.  Not used here, but good to save
    //@ let cxr =  Math.sin(deg2rad(point.vx))/3+.5
    //@ let cyr =  Math.cos(deg2rad(point.vy))/3+.5

    //? This part converts branch_angle to angle of 'light source'
    //? +90° to adjust the coords to top=0°, then +180° to place teh light src at top when top=0°
    let cxr =  Math.cos(deg2rad(branch_angle+90+180))/3+.5
    let cyr =  Math.sin(deg2rad(branch_angle+90+180))/3+.5

    pcir_gradient[porder].id = 'pcir_Gradient'+porder;
    pcir_gradient[porder].setAttribute('cx', cxr.toString());//'0.3');
    pcir_gradient[porder].setAttribute('cy', cyr.toString());//'0.3');
    pcir_gradient[porder].setAttribute('r', '1');
    pcir_defs[porder].appendChild(pcir_gradient[porder]);
    //? end of prep  ----------------------------------

    pcir_circle[porder].setAttribute("class", "put_circles"+porder);
    pcir_circle[porder].setAttribute("id", "put_circles"+porder);
    pcir_circle[porder].setAttribute("cx", x.toString());
    pcir_circle[porder].setAttribute("cy", y.toString());
    pcir_circle[porder].setAttribute("r", "6");
    pcir_circle[porder].setAttribute('fill', 'url(#pcir_Gradient'+porder+')');
    // pcir_circle[porder].setAttribute('fill', 'magenta');
    pcir_circle[porder].setAttribute("opacity", 1);

    svg.appendChild(pcir_defs[porder]);

    svg.appendChild(pcir_circle[porder]);}

function putDot(x,y) { //@ loop
    var svg = document.getElementById("svg");
    dot_circle = document.createElementNS(svgns, 'circle');

    dot_circle.setAttribute("class", "put_dot");
    dot_circle.setAttribute("id", "put_dot");
    dot_circle.setAttribute("cx", x.toString());
    dot_circle.setAttribute("cy", y.toString());
    dot_circle.setAttribute("r", "1");
    dot_circle.setAttribute('fill', 'white');
    dot_circle.setAttribute("opacity", 1);

    svg.appendChild(dot_circle);}

function connectDots(pts) { //@ loop
    var svg = document.getElementById("svg");
    dot_circle = document.createElementNS(svgns, 'polyline');

    dot_circle.setAttribute("points", pts);
    dot_circle.setAttribute('fill', 'white');
    dot_circle.setAttribute('stroke', 'white');
    dot_circle.setAttribute("fill-opacity", "0.0");
    dot_circle.setAttribute("stroke-width", '1');
    dot_circle.setAttribute("stroke-opacity", '1');
    // dot_circle.setAttributeNS("stroke-linecap", "round");


    svg.appendChild(dot_circle);
}


//! ┌───────────────────────────────────────────────
//! │ standalone clock marker routine
//! └───────────────────────────────────────────────
function putMarker(x,y,style) {
    var svg = document.getElementById("svg");
    let marker = document.createElementNS(svgns, 'circle');

    //? prepare the gradient for the circle
    let marker_defs = document.createElementNS(svgns, 'defs');
    let marker_gradient = document.createElementNS(svgns, 'radialGradient');
    let marker_circle = document.createElementNS(svgns, 'circle');

    let marker_color = false;
    let radius = 6;

    let cidx1 = parseInt((line_angles[0] - 90 + 360 )%360);
    let cidx2 = parseInt((line_angles[1] - 90 + 360 )%360);
    let cidx3 = parseInt((line_angles[2] - 90 + 360 )%360);
    let cidx4 = parseInt((line_angles[3] - 90 + 360 )%360);


    if (style == 4) { //? every 15 degrees
        marker_color = colors360[cidx4];//"white";
        radius = 3;
    }
    if (style == 3) { //? every 30 && !60 degrees
        marker_color = colors360[cidx3];//"cyan";
        radius = 6;
    }
    if (style == 2) { //? every 60 degrees
        marker_color = colors360[cidx2];//"red";
        radius = 7; 
    }
    if (style == 1) { //? every 0 
        marker_color = colors360[cidx1];//"white";
        radius = 12;
    }

    // marker_stops = [
    //     {"color":  marker_color,"offset": "0%"},
    //     {"color": "#000000",        "offset": "100%"}
    // ];

    // for (var i = 0, length = marker_stops.length; i < length; i++) {
    //     var stop = document.createElementNS(svgns, 'stop');
    //     stop.setAttribute('offset', marker_stops[i].offset);
    //     stop.setAttribute('stop-color', marker_stops[i].color);
    //     marker_gradient.appendChild(stop);
    // }

    // //? rotate the light source
    // //? This part calcs the angle from the viewport x,y.  Not used here, but good to save
    // //@ let cxr =  Math.sin(deg2rad(point.vx))/3+.5
    // //@ let cyr =  Math.cos(deg2rad(point.vy))/3+.5

    // //? This part converts branch_angle to angle of 'light source'
    // //? +90° to adjust the coords to top=0°, then +180° to place teh light src at top when top=0°
    // let cxr =  Math.cos(deg2rad(branch_angle+90+180))/3+.5
    // let cyr =  Math.sin(deg2rad(branch_angle+90+180))/3+.5

    // marker_gradient.id = 'marker_Gradient';
    // marker_gradient.setAttribute('cx', cxr.toString());//'0.3');
    // marker_gradient.setAttribute('cy', cyr.toString());//'0.3');
    // marker_gradient.setAttribute('r', '1');
    // marker_defs.appendChild(marker_gradient);
    //? end of prep  ----------------------------------

    marker_circle.setAttribute("class", "put_circles");
    marker_circle.setAttribute("id", "put_circles");
    marker_circle.setAttribute("cx", x.toString());
    marker_circle.setAttribute("cy", y.toString());
    marker_circle.setAttribute("r", radius.toString());
    // marker_circle.setAttribute('fill', 'url(#marker_Gradient');
    marker_circle.setAttribute('fill', marker_color);
    marker_circle.setAttribute("opacity", 1);

    svg.appendChild(marker_defs);

    svg.appendChild(marker_circle);}


//! ┌───────────────────────────────────────────────
//! │ standalone clock routine, with much of the clock logic
//! └───────────────────────────────────────────────
function putClock(x1,y1,x2,y2,idx,offset) { //@ loop
    var svg = document.getElementById("svg");
    idx=current_level;

    //? make path data
    hand_coords[idx]= {'x':x1,'y':y1};
    if (idx == 5) {
        hand_coords[6]= {'x':x2,'y':y2};
    } 
    let b_hand_coords = BezierCurve(hand_coords);
    let hand_path=[];

    let x = "M 0 0,";
    for (let i=1;i< b_hand_coords.length-1;i++) {  //? b_hand_coords has 100 elements
        j=0;
        //? Bezier curve
        // x = x + "S " +b_hand_coords[i+j].x+" "+b_hand_coords[i+j].y+",";j++;
        // x = x + "  " +b_hand_coords[i+j].x+" "+b_hand_coords[i+j].y+",";j++;
        //? Quadratic curve curve .. smoother
        x = x + "C " +b_hand_coords[i+j].x+" "+b_hand_coords[i+j].y+",";j++;
        x = x + "  " +b_hand_coords[i+j].x+" "+b_hand_coords[i+j].y+",";j++;
        x = x + "  " +b_hand_coords[i+j].x+" "+b_hand_coords[i+j].y+",";j++;

        i= i+j;
    }
    // hand_path = x + "z 0,0";  //? ugly, not smooth
    hand_path = x;
    
    //? now make path
   if (idx ==3) {
        // tot_end_pts.push([x2,y2]);  //? array
        // for (let i = 0; i<tot_end_pts.length-1; i++) {
        //     putDot(tot_end_pts[i][0],tot_end_pts[i][1],5,0);
        // }   

        // tot_end_pts_str = tot_end_pts_str + " "+x2+" "+y2;  //? string og pts
        // connectDots(tot_end_pts_str);
    }
    if (idx == 1000000) {  //? disabled for now
    // if (idx ==5) {
    
        var handpath_element = document.createElementNS(svgns, 'path');

        //? debug/viewing overrides
        path_color = "white";
        path_opacity="1";
        path_width='1'

        // path_color = colors360[tc[10]%360];

        var lcx = 0.0
        var lcy = 0.0
        var lr = 1

        //? prepare the gradiant stroke for the PATHS
        var hand_defs = document.createElementNS(svgns, 'defs');
        var gradient = document.createElementNS(svgns, 'radialGradient');
        var stops = [
            {"color": path_color,      "offset": "0%"},
            {"color": "#000000",    "offset": "100%"}
        ];

        for (var i = 0, length = stops.length; i < length; i++) {
            var stop = document.createElementNS(svgns, 'stop');
            stop.setAttribute('offset', stops[i].offset);
            stop.setAttribute('stop-color', stops[i].color);
            gradient.appendChild(stop);
        }
        gradient.id = 'datasetGradient';
        gradient.setAttribute('cx', lcx);
        gradient.setAttribute('cy', lcy);  //? light is slightly above horizon
        gradient.setAttribute('r', lr);
        hand_defs.appendChild(gradient);

        handpath_element.setAttribute('d', ""+hand_path);
        handpath_element.setAttribute("fill-opacity", "0");
        handpath_element.setAttribute("stroke-width", path_width);
        // handpath_element.setAttribute("stroke-opacity", path_opacity);
        // handpath_element.setAttribute('stroke', 'url(#datasetGradient)');
        handpath_element.setAttribute('stroke', 'white');
        svg.appendChild(hand_defs);
        svg.appendChild(handpath_element);
    }


    //? end path






    //? get angle
    clock_angle[idx] = ((rad2deg(Math.atan2(y2-y1,x2-x1)))+360+0)%360;
    let rad =   maxlengths[idx]*2 *.90;//@ why does it need to be adjusted?


    //? DOESN'T WORK HERE
    // if (idx == 0) {
    //     //? recalc base line for 4AM adj
    //     x2 = Math.cos(deg2rad(clock_angle[idx]+90) * rad + x1);
    //     y2 = Math.sin(deg2rad(clock_angle[idx]+90) * rad + y1);
    // }

    pcir_circle[idx] = document.createElementNS(svgns, 'circle');

    let pcir_color=colors2[cycle_colors][idx]; 

    clock_time[idx] = parseFloat(x1).toFixed(2)+"  :  "+parseFloat(y1).toFixed(2);

    if (idx == 0) { //? common hours
        cHour = Math.floor((((clock_angle[idx]+90)%360)/360)*24);
    }
    for (let i = 0;i<6;i++) {
        if (idx == i) { 

            //? this mess is to make 000000 start at 4AM at te bottom
            if (idx == 0) {clock_angle[idx] = (clock_angle[idx] + 270 % 360);}
            if (idx == 1) {clock_angle[idx] = clock_angle[idx] +120 ;}
            if (idx == 2) {clock_angle[idx] = clock_angle[idx] + 120;}
            if (idx == 3) {clock_angle[idx] = clock_angle[idx] + 120;}
            if (idx == 4) {clock_angle[idx] = clock_angle[idx] + 120;}
            if (idx == 5) {clock_angle[idx] = clock_angle[idx] + 120;}

            // let tmpt = clock_angle[idx]-90; 
            // if (clock_angle[idx] < 0) {clock_angle[idx] = clock_angle[idx]+360;}
            t_time[i] = Math.floor((clock_angle[idx]/360)*6)%6; 
        }
    }

    pcir_circle[idx].setAttribute("id", "put_clock_circles"+idx);
    pcir_circle[idx].setAttribute("cx", x1.toString());
    pcir_circle[idx].setAttribute("cy", y1.toString());
    pcir_circle[idx].setAttribute("r",rad);
    pcir_circle[idx].setAttribute("fill", pcir_color);
    pcir_circle[idx].setAttribute("fill-opacity", "0.2");
    pcir_circle[idx].setAttribute("stroke", "gray");
    pcir_circle[idx].setAttribute("stroke-width", "1");
    pcir_circle[idx].setAttribute("style","z-index:"+(current_level*10));
    pcir_circle[idx].setAttribute("style","mix-blend-mode: "+names_of_merges[merge_colors]);

    pcir_circle[idx].style.zIndex = (current_level*10).toString();

    //? https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode

    xytrack(x1+rad,y1+rad);
    xytrack(x1-rad,y1-rad);

    if (cycle_circles == 0) {  //? only put circles if spheres is turned off
        svg.appendChild(pcir_circle[idx]);
    }

    //? --------------------------------------------
    //? ----- MARKERS ------------------------------
    //? --------------------------------------------

    let mx = false;
    let my = false;
    //? put a marker at 0h
    let adj = 1.62;
    if (idx == 1) {
        let ang = 30;
        for (let i = 0; i<12; i++) {
            let tang = ang*(i+3);  //? (i+3) for 4Am bottom)
            mx = rad * adj * Math.cos(toRadians(tang))
            my = rad * adj * Math.sin(toRadians(tang))
            if (i == 0) {
                putMarker(mx,my,1);
            } else if (i%2==0) {
                putMarker(mx,my,2);
            } else  putMarker(mx,my,3);
        }
        //? marker for each hour
        ang = 15;
        for (let i = 0; i<24; i++) {
            if (i%2==0) {
                let tang = ang*(i+3);  //? (i+3) for 4Am bottom) 
                mx = rad * adj * Math.cos(toRadians(tang))
                my = rad * adj * Math.sin(toRadians(tang))
                putMarker(mx,my,4);
            }
        }
    }

    }
//! ┌───────────────────────────────────────────────
//! │ sort associative array by key
//! └───────────────────────────────────────────────
function sortByKey(array, key) {
    return array.sort(function(a, b) {
        var x = a[key]; var y = b[key];
        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
    });}
//! ┌───────────────────────────────────────────────
//! │ parse query string into associatve array
//! └───────────────────────────────────────────────
function parseQuery(queryString) {
    var query = {};
    var pairs = (queryString[0] === '?' ? queryString.substr(1) : queryString).split('&');
    for (var i = 0; i < pairs.length; i++) {
        var pair = pairs[i].split('=');
        query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '');
    }
    return query;}
//! ┌───────────────────────────────────────────────
//! │ interface to wTL
//! └───────────────────────────────────────────────
function writGrid(args) {

    let mCols = menuCols
    var fclrs = false
    if (bg_color == "black") {
        fclrs = ['#dddddd','yellow','white','#00ff00','white']
    } else {
        fclrs = ['grey','blue','black','green','black']
    }
    let fwght = ['300','600','500','400','300'] 


    for (let i=0;i<args.length; i++) {
        if (args[0] != '✅' && args[0] != '>') {       //? if first arg is '✅', use overrides
            menu_fontclr = fclrs[i]
            menu_fontweight=fwght[i]
        } else {
            mCols = menuAltCols
        }
        wTL({'str': args[i], 'row': rnum, 'col': mCols[i],});
    }}
//! ┌───────────────────────────────────────────────
//! │ wtite text from left->right in grod format
//! └───────────────────────────────────────────────
function wTL(args) {
    let fs = menu_fontsize
    let spacing = menu_spacing

    xpos = (args['col'] * 1) - 960  //? viewbox is x=1920 y=1024 w. 0,0 as dead center, leftmost col is -960
    ypos = (args['row'] * 20) - 450 //? topmost col is -960
    var svg = document.getElementById("svg");
    let text = document.createElementNS(svgns, 'text');
    text.id = "id-wtP1";
    text.setAttribute("style", "white-space: pre;")
    text.setAttribute("classname", "wt", );
    text.setAttribute("x", xpos);
    text.setAttribute("y", ypos);
    if (bg_color == "black") {
        text.setAttribute("fill", menu_fontclr);
    } else {
        text.setAttribute("fill", menu_fontclr);    
    }
    text.setAttribute("font-size", fs);
    text.setAttribute("font-family", "monospace, monospace");
    text.setAttribute("font-weight", menu_fontweight);
    //text.setAttribute("stroke", args['stroke']);
    //text.setAttribute("style", args['style']);
    //text.setAttribute("font-family", "Arial, Helvetica, sans-serif");

    let textNode = document.createTextNode(args['str']);
    text.appendChild(textNode);
    svg.appendChild(text);

    return (document.getElementById('id-wtP1'));}
//! ┌───────────────────────────────────────────────
//! │ wtite text from left->right in grod format
//! └───────────────────────────────────────────────
function clockWrite(xpos,ypos,str) {
    // row,col
    let fs = 40;//menu_fontsize
    let spacing = menu_spacing

    var svg = document.getElementById("svg");
    let text = document.createElementNS(svgns, 'text');
    text.id = "id-wtP2";
    text.setAttribute("style", "white-space: pre;")
    text.setAttribute("classname", "wt", );
    text.setAttribute("x", xpos);
    text.setAttribute("y", ypos);
    if (bg_color == "black") {
        text.setAttribute("fill", "gray");
    } else {
        text.setAttribute("fill", "gray");    
    }
    text.setAttribute("font-size", fs);
    text.setAttribute("font-family", "monospace, monospace");
    text.setAttribute("font-weight", menu_fontweight);
    //text.setAttribute("stroke", args['stroke']);
    //text.setAttribute("style", args['style']);
    //text.setAttribute("font-family", "Arial, Helvetica, sans-serif");

    let textNode = document.createTextNode(str);
    text.appendChild(textNode);
    svg.appendChild(text);

    return (document.getElementById('id-wtP1'));}
//! ┌───────────────────────────────────────────────
//! │ all the menu and screen text is written here
//! └───────────────────────────────────────────────
//% ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
//%
//% ███    ███ ███████ ███    ██ ██    ██ 
//% ████  ████ ██      ████   ██ ██    ██ 
//% ██ ████ ██ █████   ██ ██  ██ ██    ██ 
//% ██  ██  ██ ██      ██  ██ ██ ██    ██ 
//% ██      ██ ███████ ██   ████  ██████  
//% 
//% ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
function writeMenu() {
    //? no menu
    if (showtext == 0) {return}

    //? main menu        
    if (showtext == 1) { 
        if (fullscreen == 0) {
            //@ ARGS
            menu_fontweight="600";menu_fontclr="#00ffff"; writGrid(['✅',_,_,_,'⌥ = Alt']);
            menu_fontweight="600";menu_fontclr="#00ff00"; writGrid(['✅',_,_,'⇧ = Shift']);
            menu_fontweight="600";menu_fontclr="#ff00ff"; writGrid(['✅',_,'^ = Ctrl']);
            menu_fontweight="600";menu_fontclr="#ffFF00"; writGrid(['✅','⌘ = Meta']);
            rnum++;
    //        menu_fontweight="600";menu_fontclr="red"; writGrid(['✅','NOTE:']);rnum++;
            //? the above are all written on the same line, as they have no "rnum++' at the end.
            writGrid(['°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°']);rnum++;
            menu_fontweight="300"
            writGrid([_,'HOME','Toggle BG (B/W)']);rnum++;
            writGrid(['up','▲ ▼','+fast|-slow','(' + loop_delay / 1000 + 's)']);rnum++;
            writGrid([_,'◀▶','-thinner|+wider','('+pensize+')']);rnum++;
            writGrid([_,'PGUP/PGDN','+zoom in|-zoom out','(x '+linelength_adj + ')']);rnum++;
            writGrid(['de','INS/DEL','+Finer°|Courser°','(' + deg_adj + '°)']);rnum++;

            let shortdegs = [0,0,0,0,0,0];
            for (i=0;i<6;i++) {
                shortdegs[i] = Math.round(pre_maxlengths[i]);
            }

            writGrid([_,'^⇧(F1-F6)','lines(1-6) +longer','('+ shortdegs+')']);rnum++;
            writGrid([_,'^⇧(1-6)','lines(1-6) -shorter']);rnum++;
            writGrid([_]);rnum++;

            writGrid(['aM','⌥ M','Cycle circles','(' + cycle_circles + '/'+num_of_circles+') ' +names_of_circles[cycle_circles]]);rnum++;
            writGrid(['aR','⌥ R','Cycle colors','(' + cycle_colors + '/'+num_of_colors+') ' +names_of_colors[cycle_colors]]);rnum++;
            writGrid(['aG','⌥ G','Cycle audio','(' + cycle_audio  + '/'+num_of_audios+') '+names_of_audios[cycle_audio]]);rnum++;
            writGrid(['aU','⌥ U','Cycle dataset','(' + cycle_dataset+ '/'+num_of_datasets+') '+names_of_datasets[cycle_dataset]]);rnum++;
            writGrid(['aK','⌥ K','Cycle paths','(' + cycle_path   + '/'+num_of_paths+') ['+path_opacity+':'+path_width+'] '+names_of_paths[cycle_path]]);rnum++;
            writGrid(['aV','⌥ V','Cycle Polygons','(' + cycle_poly   + '/'+num_of_polys+') '+names_of_polys[cycle_poly]]);rnum++;
            writGrid(['aA','⌥ A','Cycle Presets','(' + cycle_preset + '/'+num_of_presets+')']);rnum++;
            writGrid(['aC','⌥ C','Cycle Vars'   ,'(' + cycle_vars+   ') '+    names_of_vars[cycle_vars]]);      rnum++;
            writGrid(['aY','⌥ Y','Cycle Ratios' ,'(' + cycle_ratios+ ') '+  names_of_ratios[cycle_ratios]]);    rnum++;
            writGrid(['mF','⌘ F','Cycle Flowers','(' + cycle_flowers+') '+ names_of_flowers[cycle_flowers]]);   rnum++;
            writGrid(['mT','⌘ T','Cycle Fruit'  ,'(' + cycle_fruit+  ') '+   names_of_fruit[cycle_fruit]]);     rnum++;
            writGrid(['mc','⌘ C','Cycle Merge (clock)'  ,'(' + merge_colors+  ') '+   names_of_merges[merge_colors]]);     rnum++;
            writGrid([_]);rnum++;
            writGrid(['aN','⌥ (N|B)','Circle radius  +/-',   '(' +circle_radius.toFixed(2)+')']);rnum++;
            writGrid(['aX','⌥ (X|Z)','Circle opacity +/-',   '(' +circle_opacity+')']);rnum++;
            writGrid(['aO','⌥ (O|I)','Poly opacity   +/-',   '(' + poly_opacity + ')']);rnum++;
            writGrid(['aS','⌥ (S|W)','Merge Count   +/-',   '(' + merge_count + ')']);rnum++;
            writGrid(['aD','⌥ .','GenAng',   names_of_genang[cycle_genang]]);rnum++;
            writGrid(['aJ','(⌥|⌘) J','Jump fwd/back '+jump_delta+'°']);rnum++;
            writGrid([_]);rnum++;
            writGrid(['ca1-ca6','^⌥ (1-6)','Toggle Hide lvl 1-6',   '(' + show_0 + show_1 + show_2 + show_3 + show_4 + show_5 + ')']);rnum++;
            writGrid(['ca0','^⌥ 0','Show/Hide All Lines','(' + show_all_lines + ') '+names_of_show_all_lines[show_all_lines]]);rnum++;
            writGrid([_]);rnum++;
            writGrid([_,'⌥ Q','Show/Hide this menu','('+names_of_showtext[showtext]+')']);rnum++;
            writGrid([_,'^Y','Toggle audio','(' + sound_initialized + ')']);rnum++;
            writGrid(['aP','⌥ P','Screen Save','(' + screensave + ')']);rnum++;
            writGrid([_,'SPACE','Pause/Run']);rnum++;
            writGrid([_]);rnum++;
            writGrid([_]);rnum++;
            if (loop_delay < 4) {
                menu_fontweight="600";menu_fontclr="RED";
                writGrid(['✅','WARNING',"Too fast: Expect unpredictable results and/or browser crash (eventually)."]);rnum++;
            } else {
                writGrid([_]);rnum++;
            }
            writGrid([_]);rnum++;
            writGrid([_]);rnum++;
            writGrid(['Query String']);rnum++;
            let qs = makeQs(href).match(/.{1,140}/g);  //? limit chars to line to 140, return array of lines
            let ba = (branch_angle % 360).toFixed(2)
            for (let i=0;i<qs.length;i++) {
                menu_fontweight="600";menu_fontclr="RED";
                writGrid([qs[i]]);rnum++;
            }
            rnum++;
            menu_fontweight="600";menu_fontclr="RED";
            writGrid(['>',"x="+point.vx+" y="+point.vy+"  a="+(point.va).toFixed(12)+"°"]);rnum++;
            writGrid(['TIME PER CYCLE: ['+cycletime+']/ sec: '+seconds+' / Bifurcation: '+ba+"° / Count: "+tree_counter+' / opwave:'+opwave.toFixed(2)]);rnum++;
            writGrid(['v.'+_VERSION+ " https://github.com/tholonia/notclock"]);rnum++;
            rnum = 0;
        }
    }

    //? degrees only (clock mode)
    if (showtext == 2) { 
        if (loop_delay < 4) {
            menu_fontweight="800";menu_fontclr="RED";
            writGrid(["  !  ",_]);
        }
        writGrid([_,branch_angle.toFixed(6)]);rnum++;
        rnum = 0;
    }

    //? stats (clock mode)
    if (showtext == 3) {  
        if (loop_delay < 4) {  //? show "too fast" warning
            menu_fontweight="800";menu_fontclr="RED";
            writGrid(["  !  ",_]);
        }
        menu_fontweight="300";menu_fontclr="RED";
        writGrid([_,"CLOCK"]);rnum++;
        rnum++;

        if (zoomin == 0) {
            writGrid([_,"t_time",_,t_time]);rnum++;
            writGrid([_,"tick_counter",_,tick_counter]);rnum++;
            writGrid([_,"tc Deg",_,ticks2degs()]);rnum++;
            writGrid([_,"tc Sec",_,ticks2secs()]);rnum++;
            let current_secs = ticks2secs();

            // if (clock_mode == 3) { 
            if (clock_mode > 0) { //@ X
                current_secs = current_secs +14400;
                if (current_secs > 86400) {
                    current_secs = current_secs - 86400;
                }
            }
            writGrid([_,"tc HMS",_,toTimeString(current_secs)]);rnum++;

            // //for (let i = 5;i>-1;i--) {
            // // writGrid([_,iching_line_names[i],t_time[i],iching_stages[4][t_time[i]]]);rnum++;
            // //}
            // let ichinghex = 0
            // let tris = [false,false,false];
            // for (let i = 5;i>-1;i--) {
            //     let line_yinyang = t_time[i]%2;//? even number
            //     if (line_yinyang == iching_line_vals[i]) { //? matches line type
            //         writGrid([_,iching_line_names[i],t_time[i],iching_stages[0][i]]);rnum++;
            //         ichinghex = ichinghex + 2**i;
            //     } else {
            //         writGrid([_]);rnum++;
            //         //writGrid([_,iching_line_names[i],t_time[i],"-"+iching_stages[4][i]]);rnum++;
            //     }
            //     //writGrid([_,"xx",ichinghex]);rnum++;
            // }
            // writGrid([_,"Hex",ichinghex]);rnum++;            

        }
        rnum = 0;
    }}


//% ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    
//! ┌───────────────────────────────────────────────
//! │ build tfe query string
//! └───────────────────────────────────────────────
function makeQs(qs) {
    qs = qs + "?"
    if (loop_delay      != DEF_loop_delay)      {qs = qs + "up="  + loop_delay;}
    if (iangle          != DEF_iangle)          {qs = qs + "&ia=" + iangle;}
    if (deg_adj         != DEF_deg_adj)         {qs = qs + "&de=" + deg_adj;}
    if (circle_radius   != DEF_circle_radius)   {qs = qs + "&aN=" + circle_radius;}
    if (cycle_colors    != DEF_cycle_colors)    {qs = qs + "&aR=" + cycle_colors;}

    if (show_all_lines  != DEF_show_all_lines)  {qs = qs + "&ca0=" + show_all_lines;}

    if (show_0 != DEF_show_0) {qs = qs + "&ca1=" + show_0;}
    if (show_1 != DEF_show_1) {qs = qs + "&ca2=" + show_1;}
    if (show_2 != DEF_show_2) {qs = qs + "&ca3=" + show_2;}
    if (show_3 != DEF_show_3) {qs = qs + "&ca4=" + show_3;}
    if (show_4 != DEF_show_4) {qs = qs + "&ca5=" + show_4;}
    if (show_5 != DEF_show_5) {qs = qs + "&ca6=" + show_5;}

    if (cycle_poly      != DEF_cycle_poly)      {qs = qs + "&aV=" + cycle_poly;}
    if (poly_opacity    != DEF_poly_opacity)    {qs = qs + "&aO=" + poly_opacity;}
    if (cycle_audio     != DEF_cycle_audio)     {qs = qs + "&aG=" + cycle_audio;}
    if (circle_opacity  != DEF_circle_opacity)  {qs = qs + "&aX=" + circle_opacity;}
    if (cycle_path      != DEF_cycle_path)      {qs = qs + "&aK=" + cycle_path;}
    if (cycle_dataset   != DEF_cycle_dataset)   {qs = qs + "&aU=" + cycle_dataset;}
    if (cycle_preset    != DEF_cycle_preset)    {qs = qs + "&aA=" + cycle_preset;}
    if (cycle_vars      != DEF_cycle_vars)      {qs = qs + "&aC=" + cycle_vars;}
    if (cycle_circles   != DEF_cycle_circles)   {qs = qs + "&aM=" + cycle_circles;}
    if (merge_count     != DEF_merge_count)     {qs = qs + "&aS=" + merge_count;}
    if (zoomin          != DEF_zoomin)          {qs = qs + "&aT=" + zoomin;}
    if (screensave      != DEF_screensave)      {qs = qs + "&aP=" + screensave;}
    if (cycle_ratios    != DEF_cycle_ratios)    {qs = qs + "&aY=" + cycle_ratios;}
    if (jump_delta      != DEF_jump_delta)      {qs = qs + "&aJ=" + jump_delta;}
    if (path_mode       != DEF_path_mode)       {qs = qs + "&li=" + path_mode;}
    if (cycle_flowers   != DEF_cycle_flowers)   {qs = qs + "&mF=" + cycle_flowers;}
    if (cycle_fruit     != DEF_cycle_fruit)     {qs = qs + "&mT=" + cycle_fruit;}
    if (cycle_genang    != DEF_cycle_genang)    {qs = qs + "&aD=" + cycle_genang;}
    if (clock_mode      != DEF_clock_mode)      {qs = qs + "&cm=" + clock_mode;}
    if (showtext        != DEF_showtext)        {qs = qs + "&aQ=" + showtext;}
    if (merge_colors     != DEF_merge_colors)   {qs = qs + "&mc=" + merge_colors;}
    qs = qs + "&ia=" + branch_angle;
    //@ ARGS
    return(qs)}
//! ┌───────────────────────────────────────────────
//! │ funcs to track tey min/max xy
//! └───────────────────────────────────────────────
function xytrack(x,y) {
    if (zoomin == 1) { //? only track if zoom is on
        if ((x+circle_radius) > gMax_x) {gMax_x = (x+circle_radius);}
        if ((x-circle_radius) < gMin_x) {gMin_x = (x-circle_radius);}
        if ((y+circle_radius) > gMax_y) {gMax_y = (y+circle_radius);}
        if ((y-circle_radius) < gMin_y) {gMin_y = (y-circle_radius);}}
    }
//! ┌───────────────────────────────────────────────
//! │ test x/y min/max vals againt a list of x/y data
//! └───────────────────────────────────────────────
function updateListMinMax(data) {
    //? no need to track if zoom is not on
    for (let i=0;i<data.length;i++) {
        xytrack(data[i][0],data[i][1]);
    }
}
//! ┌───────────────────────────────────────────────
//! │ test x/y min/max vals againt anobject of x/y data
//! └───────────────────────────────────────────────
function updateObjMinMax(data) {
    for (let i=0;i<data.length;i++) {
        for (let j=0;j<data[i].length;j++){
            xytrack(data[i][j].x,data[i][j].y);
        }
    }
}
//! ┌───────────────────────────────────────────────
//! │ zoom in the viewbox 
//! └───────────────────────────────────────────────
function zoomvb(xmin, xmax, ymin, ymax) {
    let len = Math.round(xmax-xmin);
    let hei = Math.round(ymax-ymin);

    vbMaxX = xmax+100;
    vbMaxY = ymax+100;
    vbMinX = xmin-100;
    vbMinY = ymin-100;
    vbLen = vbMaxX-vbMinX;
    vbHei = vbMaxY-vbMinY;

    let vbstr =  vbMinX.toString()+" "+vbMinY.toString()+" "+vbLen.toString()+" "+vbHei.toString();
    eleSvg.setAttribute("viewBox", vbstr);

    if (clock_mode > 0) {
        // wTLp(vbMinX,vbMinY+20,ttimeStr(t_time) + "   ("+new Date()+")");
        // clockWrite(vbMinX+100,vbMaxY-20,t_time.join(''));
        clockWrite(vbMinX,vbMaxY-20,t_time.join(':'));
        clockWrite(vbMinX+400,vbMaxY-20,new Date().toTimeString().split(' ')[0]);
    }
}
//! ┌───────────────────────────────────────────────
//! │ draw a box around the min/max xy... mainly for debugging
//! └───────────────────────────────────────────────
function drawBox(xmin, xmax, ymin, ymax) {
    let len = Math.round(xmax-xmin);
    let hei = Math.round(ymax-ymin);
    box = document.createElementNS(svgns, 'rect');
    box.setAttribute('x', xmin);
    box.setAttribute('y', ymin);
    box.setAttribute('width', len);
    box.setAttribute('height', hei);
    box.setAttribute("fill", "white");
    box.setAttribute("opacity", "0.1");
    box.setAttribute("stroke", "white");
    box.setAttribute("stroke-width", '1');
    eleSvg.appendChild(box);

    vbMaxX = xmax+100;
    vbMaxY = ymax+100;
    vbMinX = xmin-100;
    vbMinY = ymin-100;
    vbLen = vbMaxX-vbMinX;
    vbHei = vbMaxY-vbMinY;

    // let vbstr =  vbMinX.toString()+" "+vbMinY.toString()+" "+vbLen.toString()+" "+vbHei.toString();
    // eleSvg.setAttribute("viewBox", vbstr);

    zoomvb(xmin, xmax, ymin, ymax);}
//! ┌───────────────────────────────────────────────
//! │ func to alter the colors
//! └───────────────────────────────────────────────
//? https://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors#:~:text=Just%20pass%20in%20a%20string,number%20(i.e.%20%2D20%20).
// /*** Log Blending ***/
// // Shade (Lighten or Darken)
// pSBC ( 0.42, color1 ); // rgb(20,60,200) + [42% Lighter] => rgb(166,171,225)
// pSBC ( -0.4, color5 ); // #F3A + [40% Darker] => #c62884
// pSBC ( 0.42, color8 ); // rgba(200,60,20,0.98631) + [42% Lighter] => rgba(225,171,166,0.98631)

// // Shade with Conversion (use "c" as your "to" color)
// pSBC ( 0.42, color2, "c" ); // rgba(20,60,200,0.67423) + [42% Lighter] + [Convert] => #a6abe1ac

// // RGB2Hex & Hex2RGB Conversion Only (set percentage to zero)
// pSBC ( 0, color6, "c" ); // #F3A9 + [Convert] => rgba(255,51,170,0.6)

// // Blending
// pSBC ( -0.5, color2, color8 ); // rgba(20,60,200,0.67423) + rgba(200,60,20,0.98631) + [50% Blend] => rgba(142,60,142,0.83)
// pSBC ( 0.7, color2, color7 ); // rgba(20,60,200,0.67423) + rgb(200,60,20) + [70% Blend] => rgba(168,60,111,0.67423)
// pSBC ( 0.25, color3, color7 ); // #67DAF0 + rgb(200,60,20) + [25% Blend] => rgb(134,191,208)
// pSBC ( 0.75, color7, color3 ); // rgb(200,60,20) + #67DAF0 + [75% Blend] => #86bfd0

// /*** Linear Blending ***/
// // Shade (Lighten or Darken)
// pSBC ( 0.42, color1, false, true ); // rgb(20,60,200) + [42% Lighter] => rgb(119,142,223)
// pSBC ( -0.4, color5, false, true ); // #F3A + [40% Darker] => #991f66
// pSBC ( 0.42, color8, false, true ); // rgba(200,60,20,0.98631) + [42% Lighter] => rgba(223,142,119,0.98631)

// // Shade with Conversion (use "c" as your "to" color)
// pSBC ( 0.42, color2, "c", true ); // rgba(20,60,200,0.67423) + [42% Lighter] + [Convert] => #778edfac

// // RGB2Hex & Hex2RGB Conversion Only (set percentage to zero)
// pSBC ( 0, color6, "c", true ); // #F3A9 + [Convert] => rgba(255,51,170,0.6)

// // Blending
// pSBC ( -0.5, color2, color8, true ); // rgba(20,60,200,0.67423) + rgba(200,60,20,0.98631) + [50% Blend] => rgba(110,60,110,0.83)
// pSBC ( 0.7, color2, color7, true ); // rgba(20,60,200,0.67423) + rgb(200,60,20) + [70% Blend] => rgba(146,60,74,0.67423)
// pSBC ( 0.25, color3, color7, true ); // #67DAF0 + rgb(200,60,20) + [25% Blend] => rgb(127,179,185)
// pSBC ( 0.75, color7, color3, true ); // rgb(200,60,20) + #67DAF0 + [75% Blend] => #7fb3b9

// /*** Other Stuff ***/
// // Error Checking
// pSBC ( 0.42, "#FFBAA" ); // #FFBAA + [42% Lighter] => null??(Invalid Input Color)
// pSBC ( 42, color1, color5 ); // rgb(20,60,200) + #F3A + [4200% Blend] => null??(Invalid Percentage Range)
// pSBC ( 0.42, {} ); // [object Object] + [42% Lighter] => null??(Strings Only for Color)
// pSBC ( "42", color1 ); // rgb(20,60,200) + ["42"] => null??(Numbers Only for Percentage)
// pSBC ( 0.42, "salt" ); // salt + [42% Lighter] => null??(A Little Salt is No Good...)

// // Error Check Fails?(Some Errors are not Caught)
// pSBC ( 0.42, "#salt" ); // #salt + [42% Lighter] => #a5a5a500??(...and a Pound of Salt is Jibberish)

// // Ripping
// pSBCr ( color4 ); // #5567DAF0 + [Rip] => [object Object] => {'r':85,'g':103,'b':218,'a':0.941}    let r,g,b,P,f,t,h,i=parseInt,m=Math.round,a=typeof(c1)=="string";

const pSBC=(p,c0,c1,l)=>{
    let r,g,b,P,f,t,h,i=parseInt,m=Math.round,a=typeof(c1)=="string";
    if(typeof(p)!="number"||p<-1||p>1||typeof(c0)!="string"||(c0[0]!='r'&&c0[0]!='#')||(c1&&!a))return null;
    if(!this.pSBCr)this.pSBCr=(d)=>{
        let n=d.length,x={};
        if(n>9){
            [r,g,b,a]=d=d.split(","),n=d.length;
            if(n<3||n>4)return null;
            x.r=i(r[3]=="a"?r.slice(5):r.slice(4)),x.g=i(g),x.b=i(b),x.a=a?parseFloat(a):-1
        }else{
            if(n==8||n==6||n<4)return null;
            if(n<6)d="#"+d[1]+d[1]+d[2]+d[2]+d[3]+d[3]+(n>4?d[4]+d[4]:"");
            d=i(d.slice(1),16);
            if(n==9||n==5)x.r=d>>24&255,x.g=d>>16&255,x.b=d>>8&255,x.a=m((d&255)/0.255)/1000;
            else x.r=d>>16,x.g=d>>8&255,x.b=d&255,x.a=-1
        }return x};
    h=c0.length>9,h=a?c1.length>9?true:c1=="c"?!h:false:h,f=this.pSBCr(c0),P=p<0,t=c1&&c1!="c"?this.pSBCr(c1):P?{r:0,g:0,b:0,a:-1}:{r:255,g:255,b:255,a:-1},p=P?p*-1:p,P=1-p;
    if(!f||!t)return null;
    if(l)r=m(P*f.r+p*t.r),g=m(P*f.g+p*t.g),b=m(P*f.b+p*t.b);
    else r=m((P*f.r**2+p*t.r**2)**0.5),g=m((P*f.g**2+p*t.g**2)**0.5),b=m((P*f.b**2+p*t.b**2)**0.5);
    a=f.a,t=t.a,f=a>=0||t>=0,a=f?a<0?t:t<0?a:a*P+t*p:0;
    if(h)return"rgb"+(f?"a(":"(")+r+","+g+","+b+(f?","+m(a*1000)/1000:"")+")";
    else return"#"+(4294967296+r*16777216+g*65536+b*256+(f?m(a*255):0)).toString(16).slice(1,f?undefined:-2)
}

//! ┌───────────────────────────────────────────────
//! │ user to alter array of gradiant stops
//! └───────────────────────────────────────────────
function sortNumbers(a, b) {
  if (a > b) {
    return 1;
  } else if (b > a) {
    return -1;
  } else {
    return 0;
  }}
//! ┌───────────────────────────────────────────────
//! │ copy a list
//! └───────────────────────────────────────────────  
function cpList(list) {
    let nList = [];
    for (let i=0; i<list.length;i++) {
        nList.push(list[i])
    }
    return nList}
//! ┌───────────────────────────────────────────────
//! │ Convert HSV to RGB
//! └───────────────────────────────────────────────
function HSVtoRGB(h, s, v) { //? excpects h,s,v to be in range from 0...1
    var r, g, b, i, f, p, q, t;
    if (arguments.length === 1) { //? in case the arg is an object
        s = h.s, v = h.v, h = h.h;
    }
    i = Math.floor(h * 6); //? identify the 6 color ranges
    f = h * 6 - i;
    p = v * (1 - s);
    q = v * (1 - f * s);
    t = v * (1 - (1 - f) * s);
    switch (i % 6) {
        case 0:
            r = v, g = t, b = p;
            break;
        case 1:
            r = q, g = v, b = p;
            break;
        case 2:
            r = p, g = v, b = t;
            break;
        case 3:
            r = p, g = q, b = v;
            break;
        case 4:
            r = t, g = p, b = v;
            break;
        case 5:
            r = v, g = p, b = q;
            break;
    }
    return "#" 
        + Math.round(r * 255).toString(16).padStart(2,'0') 
        + Math.round(g * 255).toString(16).padStart(2,'0') 
        + Math.round(b * 255).toString(16).padStart(2,'0');
    }
//! ┌───────────────────────────────────────────────
//! │ Convert HSV to RGB
//! └───────────────────────────────────────────────
function HSVtoRGBArray(h, s, v) {
    var r, g, b, i, f, p, q, t;
    if (arguments.length === 1) {  
        s = h.s, v = h.v, h = h.h;
    }
    i = Math.floor(h * 6);
    f = h * 6 - i;
    p = v * (1 - s);
    q = v * (1 - f * s);
    t = v * (1 - (1 - f) * s);
    switch (i % 6) {
        case 0:
            r = v, g = t, b = p;
            break;
        case 1:
            r = q, g = v, b = p;
            break;
        case 2:
            r = p, g = v, b = t;
            break;
        case 3:
            r = p, g = q, b = v;
            break;
        case 4:
            r = t, g = p, b = v;
            break;
        case 5:
            r = v, g = p, b = q;
            break;
    }
    // return {Math.round(r * 255),Math.round(g * 255),Math.round(b * 255)}
    return  { 
                r: Math.round(r * 255),
                g: Math.round(g * 255),
                b: Math.round(b * 255)
            };}
//! ┌───────────────────────────────────────────────
//! │ Creates RGB string from a number
//! └───────────────────────────────────────────────
function generateColor(num) {
    var H = (num%360) / 360 //? H range is 0-360, 0 and 360 are both RED
    //@ probably better to MOD the H, not divide
    var S = .8
    var V = .8
    return HSVtoRGB(H, S, V)}
//! ┌───────────────────────────────────────────────
//! │ Creates RGB string from a number and SV vals
//! └───────────────────────────────────────────────
function generateColorHSV(num,S,V) {
    var H = num / 360 //? H range is 0-360, 0 and 360 are both RED
    //@ probably better to MOD the H, not divide
    return HSVtoRGB(H, S, V)}
//! ┌───────────────────────────────────────────────
//! │Randmo color between #000000 and #FFFFFF
//! └───────────────────────────────────────────────
function generateRandomColor() {
    let maxVal = 0xFFFFFF; // 16777215
    let randomNumber = Math.random() * maxVal;
    randomNumber = Math.floor(randomNumber);
    randomNumber = randomNumber.toString(16);
    let randColor = randomNumber.padStart(6, 0);
    return `#${randColor.toUpperCase()}`}
//@ DEBUG this can be made better with a 2-phase flipping MOD
//! ┌───────────────────────────────────────────────
//! │ take any number and find the equivalent value on a cycle of n.  For example,
//! │ for a cycle of 3-7, the number 11 would return 5
//! │
//! │ In this version, the input number is divided into the length of the cycle, 
//! │ resulting in rounding (duplication and jumps)
//! │
//! │ n=3-7 -> 3, 4, 5, 6, 7, 6, 5, 4, 3, 4, 5, 6, 7, 6, 5, 4, 3, 4... <- cycle values
//! │          0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17... <- for input number
//! │          3, 4, 4, 5, 5, 6, 6, 7, 6, 6, 5, 5, 4, 4, 3, 4, 4, 5... <- return value 
//! └───────────────────────────────────────────────
function CiR(number, amin, amax, invert = 0) {
    //@ e.g, CiR(45, 3, 20, invert = 0)
    try {
        mod_num = number % amax  //? get number within range... 45 % 20 = 5
    } catch {
        mod_num = 0
    }

    try {
        mod_num2 = number % (amax * 2) //? get next val - 45 % 40 = 5
    } catch {
        mod_num2 = 0
    }

    new_val1 = Math.abs(mod_num2 - (mod_num * 2)) //? 5 - 10 = -5 = 5

    old_min = 0
    old_min = 0
    old_max = amax //? 20
    new_max = amax //? 20
    new_min = amin //? 3

//    //? create array for curve
//    curveAry = []
//    for (let i = amin; i<amax;i++) { curveAry.push(amin) }
//    for (let i = amin; i<amax;i++) { curveAry.push(i) }
//    for (let i = amin; i<amax;i++) { curveAry.push(amax) }
//
//    cary = []
//    for (let i = 0; i<curveAry.length-4;i++) {
//        avg = (curveAry[i]+ curveAry[i+1]+ curveAry[i+2]+ curveAry[i+3]+ curveAry[i+4]+ curveAry[i+5])/6;
//        if (i%3==0) {
//            cary.push(avg)
//         }
//    }
//    cary2 = []
//    for (let i = 0 ; i<cary.length/2 ; i++) {
//        cary2.push(cary[i])
//    }
//    for (let i=cary.length/2 ; i<cary.length ; i++) {
//        cary2.push(parseInt(cary[i]))
//    }

//@ e.g, CiR(45, 3, 20, invert = 0)
//@                    ((5-0) / (20-0 )) * (20-3) + 3
//@                    (5 / 20 ) * 17 + 3
//@                    0.25 * 17 + 3
//@                    4.25 + 3
//@                    7.25
//@                    7

try {
       new_value = ((new_val1 - old_min) / (old_max - old_min)) * (new_max - new_min) + new_min
    } catch {
        new_value = 0
    }
    if (invert == 1) {
        new_value = amax - new_value
    }
    return (Math.round(new_value))

    return cary[Math.round(new_value)]}
//! ┌───────────────────────────────────────────────
//! │ a failed attempt to create a CiR that returns a bezier curve
//! └───────────────────────────────────────────────    
function CiR2(number, nmin,nmax,amin, amax, invert = 0) {
    //? create array of amax elements
    rary = []

    for (let i=nmin;i<nmax;i++) {
        rary.push(i)
    }
    newnums = normalize(rary,[amin,amax])

    newval = newnums[number]+amin
    return newval}
//! ┌───────────────────────────────────────────────
//! │ Used in Bezier Curve
//! └───────────────────────────────────────────────
function factorial(n) {
    if (n < 0)
        return(-1); /*Wrong value*/
    if (n == 0)
        return(1);  /*Terminating condition*/
    else
    {
        return(n * factorial(n - 1));
    }}
//! ┌───────────────────────────────────────────────
//! │ Used in Bezier Curve
//! └───────────────────────────────────────────────
function nCr(n, r) {
    // log(n+','+r)
    // log(factorial(n))
    // log(factorial(r))
    // log(factorial(n-r))
    res = factorial(n) / (factorial(r) * factorial(n - r));

    if (isNaN(res)) {
        return(0)
    } else {
        return(res)
    }}
//! ┌───────────────────────────────────────────────
//! │ JSON output
//! └───────────────────────────────────────────────
function jstr(obj) {
    console.log(JSON.stringify(obj),null,2)}
//! ┌───────────────────────────────────────────────
//! │ convenience functions
//! └───────────────────────────────────────────────
function log(txt) {
    console.log(txt)}
function call_log(txt) {
    console.log("\t\t"+txt)}
//! ┌───────────────────────────────────────────────
//! │ Create Bezier curve form a list of values
//! └───────────────────────────────────────────────
function BezierCurve(points) {
    //? expect data for be array of associative arrays of x/y values
    //? [{"x":-64.25896664854749,"y":12.508200260460674},{"x":-89.73634559153838,"y":4.5384851983379075},{"x":-38.78158770555659,"y":20.477915322583442},{"x":-56.28925158642472,"y":37.98557920345157},{"x":-72.22868171067026,"y":-12.969178682530222}]

    let n = points.length;
    let curvepoints = [];
    for (let u = 0; u <= 1; u += 0.01) {
        let p = {x: 0, y: 0};
        for (let i = 0; i < n; i++) {
            let B = nCr(n - 1, i) * Math.pow((1 - u), (n - 1) - i) * Math.pow(u, i);
            let px = points[i].x * B;
            let py = points[i].y * B;
            p.x += px;
            p.y += py;
        }
        curvepoints.push(p);
    }
    return curvepoints;}
//! ┌───────────────────────────────────────────────
//! │ crossums and series or number to a single digit, i.e., -1.2E3 = 1+2+3=6
//! └───────────────────────────────────────────────
function crosssum(val) {
    let sval = String("" + val)
    sval = sval.replace("-", "")
    sval = sval.replace("+", "")
    sval = sval.replace("e", "")
    sval = sval.replace("E", "")
    sval = sval.replace(".", "")

    let rval = 0
    for (let i = 0; i < sval.length; i++) {
        try {
            rval = rval + parseInt(sval[i])
        } catch (error) {
            let x = 1
        }
    }
    if (rval > 9) {
        rval = crosssum(rval)
    }
    return(rval)}
//! ┌───────────────────────────────────────────────
//! │Fron Adam... no dea what this is
//! └───────────────────────────────────────────────
function next() {
    return}
//! ┌───────────────────────────────────────────────
//! │ moves data series to a min/max range 
//! └───────────────────────────────────────────────
const normalize = (set, range = [0, 1]) => {
    if (range.length > 2 || !Array.isArray(set) || !Array.isArray(range))
        throw new Error("invalid arguments to normalize");

    const min = Math.min(...set);
    let newSet = set.map(n => n - min);
    const max = Math.max(...newSet);
    newSet = newSet.map(n => n / max);

    // newSet is now in range [0, 1]
    let newRange = range[1] - range[0];
    let initial = range[0];

    // normalized = (array * new range) + range[0];
    return newSet.map(n => n * newRange + initial);};
//! ┌───────────────────────────────────────────────
//! │ Javascript math library trig functions take radians and not degrees by default 
//! └───────────────────────────────────────────────
function toRadians(angle) {
    return angle * Math.PI / 180;}
//! ┌───────────────────────────────────────────────
//! │ traverse a tree object and return the edges in the form of a list
//! └───────────────────────────────────────────────
function getTreeEdges(tree) {
    if (tree.left_tree) {
        var edges = getTreeEdges(tree.right_tree).concat(getTreeEdges(tree.left_tree));
        edges.push(tree.left_branch);
        edges.push(tree.right_branch);
        return edges;
    } else {
        return [];
    }}
//! ┌───────────────────────────────────────────────
//! │ Remove all children on the SVG canvas                                             
//! └───────────────────────────────────────────────
function clearCanvas() {
    const myNode = document.getElementById("svg");
    while (myNode.firstChild) {
        myNode.removeChild(myNode.lastChild);
    }}
//! ┌───────────────────────────────────────────────
//! │ ??? reverse engineer the generation level based on the points generated
//! └───────────────────────────────────────────────
function getLevel(p) {
    for (let n = 12; n >= 0; n--) {
        if (p >= 2 ** n) {
            return (n)
        }
    }
    return (0)}
//! ┌───────────────────────────────────────────────
//! │ return string of time data
//! └───────────────────────────────────────────────
function TimeCalculator(seconds) {
    let y = Math.floor(seconds / 31536000);
    let mo = Math.floor((seconds % 31536000) / 2628000);
    let d = Math.floor(((seconds % 31536000) % 2628000) / 86400);
    let h = Math.floor((seconds % (3600 * 24)) / 3600);
    let m = Math.floor((seconds % 3600) / 60);
    let s = Math.floor(seconds % 60);

    let yDisplay = y > 0 ? y + (y === 1 ? " year, " : " years, ") : "";
    let moDisplay = mo > 0 ? mo + (mo === 1 ? " month, " : " months, ") : "";
    let dDisplay = d > 0 ? d + (d === 1 ? " day, " : " days, ") : "";
    let hDisplay = h > 0 ? h + (h === 1 ? " hour, " : " hours, ") : "";
    let mDisplay = m > 0 ? m + (m === 1 ? " minute " : " minutes, ") : "";
    let sDisplay = s > 0 ? s + (s === 1 ? " second" : " seconds ") : "";
    return yDisplay + moDisplay + dDisplay + hDisplay + mDisplay + sDisplay;}
//! ┌───────────────────────────────────────────────
//! │ returns array of time data
//! └───────────────────────────────────────────────
function TimeAry(seconds) {
    let y = Math.floor(seconds / 31536000);
    let mo = Math.floor((seconds % 31536000) / 2628000);
    let d = Math.floor(((seconds % 31536000) % 2628000) / 86400);
    let h = Math.floor((seconds % (3600 * 24)) / 3600);
    let m = Math.floor((seconds % 3600) / 60);
    let s = Math.floor(seconds % 60);
    return {
        'Y': y,
        'M': mo,
        'D': d,
        'h': h,
        'm': m,
        's': s
    }}
//! ┌───────────────────────────────────────────────
//! │ return random integer
//! └───────────────────────────────────────────────
function randint(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min + 1)) + min;}
//! ┌───────────────────────────────────────────────
//! │ return random integer EXCEPT a particular number
//! └───────────────────────────────────────────────
function randintEx(min, max, excluded) {
    var n = Math.floor(Math.random() * (max - min) + min);
    if (n >= excluded) n++;
    return n;}
//! ┌───────────────────────────────────────────────
//! │ converts degrees to radians
//! └───────────────────────────────────────────────
function deg2rad(degrees) {
    let pi = Math.PI;
    return degrees / (180.0 / pi);}
//! ┌───────────────────────────────────────────────
//! │ converts radians to degrees
//! └───────────────────────────────────────────────
function rad2deg(radians) {
    let pi = Math.PI;
    return radians * (180.0 / pi);}
//! ┌───────────────────────────────────────────────
//! │ a (failed) attemped to calculates the total time of the cycles
//! └───────────────────────────────────────────────
function cycletimes(loop_delay, deg_adj, leftary, rightary) {
    let tot_ticks = parseInt(360 / deg_adj);
    cycletime = TimeCalculator(tot_ticks * (loop_delay / 1000));

    ltot = leftary[0];
    rtot = rightary[0];
    for (let j = 1; j < leftary.length; j++) {
        ltot = ltot * leftary[j];
    }
    for (let k = 1; k < rightary.length; k++) {
        rtot = rtot * rightary[k];
    }
    lrdif = Math.abs(rtot - ltot) + 1
    tot_images = (parseInt(360 / deg_adj) * (loop_delay / 1000)) * rtot * lrdif
    tot_cycletime = TimeCalculator(tot_images)
    return {
        'cycletime': cycletime,
        'tot_cycletime': tot_cycletime,
        'tot_images': tot_images
    }}
//! ┌───────────────────────────────────────────────
//! │ general loop timer with variable delay
//! └───────────────────────────────────────────────
var timer = {
    running: false,
    iv: 5000,
    timeout: false,
    cb: function () {},
    start: function (cb, iv) {
        var elm = this;
        clearInterval(this.timeout);
        this.running = true;
        if (cb)
            this.cb = cb;
        if (iv)
            this.iv = iv;
        this.timeout = setTimeout(function () {
            elm.execute(elm)
        }, this.iv);
    },
    execute: function (e) {
        if (!e.running)
            return false;
        e.cb();
        e.start();
    },
    stop: function () {
        this.running = false;
    },
    set_interval: function (iv) {
        clearInterval(this.timeout);
        this.start(false, iv);
    }};
var timer2 = {
    running: false,
    iv: 5000,
    timeout: false,
    cb: function () {},
    start: function (cb, iv) {
        var elm = this;
        clearInterval(this.timeout);
        this.running = true;
        if (cb)
            this.cb = cb;
        if (iv)
            this.iv = iv;
        this.timeout = setTimeout(function () {
            elm.execute(elm)
        }, this.iv);
    },
    execute: function (e) {
        if (!e.running)
            return false;
        e.cb();
        e.start();
    },
    stop: function () {
        this.running = false;
    },
    set_interval: function (iv) {
        clearInterval(this.timeout);
        this.start(false, iv);
    }};
//! ┌───────────────────────────────────────────────
//! │ array of frequencies based on a single freuency
//! └───────────────────────────────────────────────
function getNotes(basenote) {
    var nFreq = []
    for (let n = -6; n < 6; n++) {
        nFreq.push(basenote * 2 ** (n / 12))
    }
    return nFreq}
//! ┌───────────────────────────────────────────────
//! │ only frequencoes that are 5:4 ratio, as they are the most harmonious
//! └───────────────────────────────────────────────
function getHarmoniousNotes(basenote) {
    var nFreq = []
    for (let n = 1; n < 8; n++) {
        //nFreq.push(basenote * 2.5 *n*2)
        //if ((n % 2)==0) {
        let this_note = nFreq.push(parseFloat(basenote * 1.25 * n * 2)).toFixed(2)
        if (this_note > 600) {
            this_note = this_note / 2
        }
        nFreq.push(parseFloat(basenote * 1.25 * n * 2)).toFixed(2)
        //}
    }
    return nFreq}
//! ┌───────────────────────────────────────────────
//! │ Init AudioContext, called by a user action (CTRL-Y in this case)
//! └───────────────────────────────────────────────
function initSound(state) {
    //var osc = []
    var osc = []
    var gain = []
    var freq = []
    var basenote = 432
    //var nFreq = getHarmoniousNotes(108)

    if (state == 0) {
        console.log("SOUND (initSound) initialized")
        context = new AudioContext()
        sound_initialized = 1
    } else {
        console.log("SOUND (initSound) uninitialized")
        // AudioContext.close()
        sound_initialized = 0
    }}
//! ┌───────────────────────────────────────────────
//! │ Long sound  (note: update "var num_of_audios")
//! └───────────────────────────────────────────────
function playSound_oscLong(v1, dv) {
    if (sound_initialized == 1&& cycle_audio != 0) {
        console.log("["+cycle_audio+"] playSound_oscLong(v1="+v1+", dv="+dv+")")
        var osc = context.createOscillator()
        var gain = context.createGain()

        osc.frequency.value = notes[v1] / dv; // A note
        osc.start(0);
        osc.connect(gain);
        gain.connect(context.destination);

        gain.gain.setValueAtTime(0.00001, context.currentTime); // <-- line of interest

        // UP/DN
        gain.gain.exponentialRampToValueAtTime(0.1 / (dv / 2), context.currentTime + (v1 * 2));
        gain.gain.exponentialRampToValueAtTime(0.00001, context.currentTime + (v1 * 2 * 2));

        setTimeout(function () {
            osc.stop();
        }, v1 * 2 * 2 * 1000);
    }}
//! ┌───────────────────────────────────────────────
//! │ Short sound  (note: update "var num_of_audios")
//! └───────────────────────────────────────────────

function playSound_oscShort(v1, dv) { 
    if (sound_initialized == 1 && cycle_audio != 0) {
        console.log("["+cycle_audio+"] playSound_oscShort(v1="+v1+", dv="+dv+")")
        var osc = context.createOscillator()
        var gain = context.createGain()
        let x = Math.abs((parseInt(mnotes[tc[1]%3][v1] / dv) * 1000) / 1000)
        osc.frequency.value = x * 1.5 * hshft[tc[1]%hshft.length][randint(0,5)];// A note
        osc.start(0);
        osc.connect(gain);
        gain.connect(context.destination);
        gain.gain.setValueAtTime(0.00001, context.currentTime); // <-- line of interest

        let upt = 0.0 * dv*  1/hshft[tc[1]%hshft.length][randint(0,5)]
        let dnt = 1 * dv*  1/hshft[tc[1]%hshft.length][randint(0,5)]

        gain.gain.exponentialRampToValueAtTime(0.1 / (dv / 1 *  hshft[tc[1]%hshft.length][randint(0,5)] ), context.currentTime + upt);
        gain.gain.exponentialRampToValueAtTime(0.00001, context.currentTime + dnt);

        setTimeout(function () {
            osc.stop();
        }, dnt * 1000);
    }}
//! ┌───────────────────────────────────────────────
//! │ manually added FFT data
//! └───────────────────────────────────────────────
function playSound_fft() {
    if (sound_initialized == 1) {
        var real = new Float32Array(7);
        var imag = new Float32Array(7);
        var ac = new AudioContext();
        var osc = ac.createOscillator();

        real = [1, 0.618033989, 0.414213562, 0.302775638, 0.236067978, 0.192582404, 0.162277660];
        imag = [1, 0.618033989, 0.414213562, 0.302775638, 0.236067978, 0.192582404, 0.162277660];

        const wave = ac.createPeriodicWave(real, imag);

        osc.setPeriodicWave(wave);
        osc.connect(ac.destination);
        osc.start();
        osc.stop(1);
    }}
//! ┌───────────────────────────────────────────────
//! │ variable length  (note: update "var num_of_audios")
//! └───────────────────────────────────────────────
// function playSound_oscShort(v1, dv) {
//     if (sound_initialized == 1) {
//         debugger
//         var osc = context.createOscillator()
//         var gain = context.createGain()
//         let x = Math.abs((parseInt(notes[v1] / dv) * 1000) / 1000)
//         osc.frequency.value = x;// A note
//         osc.start(0);
//         osc.connect(gain);
//         gain.connect(context.destination);

//         //tell is ti do what ist is souyopposed to do
//         gain.gain.setValueAtTime(0.00001, context.currentTime); // <-- line of interest

//         let upt = 0.0 * dv
//         let dnt = 1 * dv
//         gain.gain.exponentialRampToValueAtTime(0.1 / (dv / 2), context.currentTime + upt);
//         gain.gain.exponentialRampToValueAtTime(0.00001, context.currentTime + dnt);

//         setTimeout(function () {
//             osc.stop();
//         }, dnt * 1000);
//     }}
//! ┌───────────────────────────────────────────────
//! │ halt the program for 1000 seconds
//! └─────────────────────────────────────────────── 
function freeze() {
    console.log("freezing ...")
    loop_delay = 1000000000
    timer.set_interval(loop_delay);}
//! ┌───────────────────────────────────────────────
//! │ plays an MP3 sound file using
//! └───────────────────────────────────────────────
var playSoundData = (function () {
    var df = document.createDocumentFragment();
    return function Sound(src) {
        var snd = new Audio(src);
        df.appendChild(snd); // keep in fragment until finished playing
        snd.addEventListener('ended', function () {
            df.removeChild(snd);
        });
        snd.volume = 1;
        snd.play();
        return snd;
    }}());
//! ┌───────────────────────────────────────────────
//! │ read query string and override existing default values
//! └───────────────────────────────────────────────
function qget(tag, val) {
    var r = false
    if (typeof refs[tag] !== 'undefined') {
        r = refs[tag]
    } else {
        r = val
    }
    console.log("OVERRIDING [" + tag + "] with [" + r + "]")
    return r}
//! ┌───────────────────────────────────────────────
//! │ Build SVG 'd' paths 
//! └───────────────────────────────────────────────
function buildpath(xfr) { 
    //? each xfry_* array has 63 elements
    //@ why is there 63 when there is supposed to be 31 each? 
    //@ Added {0,0} in idx 0 to make it 64


    var sqary_r = [ [],[],[],[],[],[] ]
    var lines_r = []
    var g,x,y
    //! load all data. 64 points total (1+2+4+8+16=31 * 2 = 64)
    //? push the 6 elemnts 
    var idxs = [6,5,4,3,2,1,0]
    //? assign sqary_r
    for (let k = 0; k<xfr.length; k++) {
        g = xfr[k]['g']
        alt_g = idxs[g]
        x = parseFloat(xfr[k]['x'])
        y = parseFloat(xfr[k]['y'])

        for (let i = 0; i<6; i++) {
            //? there is only 1 value in level 0, we fill in the 64 with v0 
            //? there are only 2 values in level 1, we fill in the first 32 with v0 and teh 2nd 32 with v2
            //? there are 4 values, in level 2, 8 vals in L3, 16 in l4 and 32 in L5
            for (let j = 0; j<xfr.length; j = j+(2**j)) {
                sqary_r[i].push({x,y})
            }
        }
    }
    //? not sur what I did, but the array is massive and needs to be cleaned up
    var fixed_ary = [ [],[],[],[],[],[] ]
    for (let k=0;k<6;k++) {
        for (let i=0;i<64;i++) {
            fixed_ary[k].push(sqary_r[k][i*4])
        }
    }
    sqary_r=fixed_ary

    //? join all 6*64 arrays together

    //? CUBIC CURVE v5 - TRUE CURVE - OPEN          #1 True Curve Open
    function makepath_CS1(q) {
//        path_width = 2
        path_ary = []
        path=[0,0,0,0,0,0]
        let x = ""
        for (let k=0;k< sqary_r.length;k++) {
            let s = sqary_r[k]
            x = x + "M 0 0 "
            j=0
            for (let i=1; i<64;i+=1) {
                x = x + "S " +s[i+j].x*q+" "+s[i+j].y+" ";j++;
                x = x + "  " +s[i+j].x*q+" "+s[i+j].y+" ";j++;
                i= i+j
            }
            path[k]=x
        }
        return path
    }

    //? CUBIC CURVE v5 - TRUE CURVE - CLOSED        #2 True Curve Closed
    function makepath_CS2(q) {
//        path_width = 2
        path_ary = []
        path=[0,0,0,0,0,0]
        let x = ""
        for (let k=0;k< sqary_r.length;k++) {
            let s = sqary_r[k]
            x = x + "M 0 0 "
            j=0
            for (let i=1; i<64;i+=1) {
                x = x + "S " +s[i+j].x*q+" "+s[i+j].y+" ";j++;
                x = x + "  " +s[i+j].x*q+" "+s[i+j].y+" ";j++;
                i= i+j
            }
            x = x + "S 0 0 0 0z";
            path[k]=x
        }
        return path
    }

    //? CUBIC CURVE v3                              #4 Complex Curve 2
    function makepath_CS3(q) {
//        path_width = 2
        path_ary = []
        path=[0,0,0,0,0,0]

        let x = ""
        for (let k=0;k< sqary_r.length;k++) {
            let s = sqary_r[k]
            x = x + "M "+s[0].x*q+","+s[0].y+" "
            j=0
            for (let i=1; i<28;i++) {
                x = x + "C " +s[i+j].x*q+","+s[i+j].y+" ";j++;
                x = x + "  " +s[i+j].x*q+","+s[i+j].y+" ";j++;
                x = x + "  " +s[i+j].x*q+","+s[i+j].y+" ";j++;
                x = x + "S " +s[i+j].x*q+","+s[i+j].y+" ";j++;
                x = x + "  " +s[i+j].x*q+","+s[i+j].y+" ";j++;
                x = x + "S " +s[i+j].x*q+","+s[i+j].y+" ";j++;
                x = x + "  " +s[i+j].x*q+","+s[i+j].y+" ";j++;
                x = x + "S " +s[i+j].x*q+","+s[i+j].y+" ";j++;
                x = x + "  " +s[i+j].x*q+","+s[i+j].y+" ";j++;
                x = x + "S " +s[i+j].x*q+","+s[i+j].y+" ";j++;
                x = x + "  " +s[i+j].x*q+","+s[i+j].y+" ";j++;
                x = x + "S " +s[i+j].x*q+","+s[i+j].y+" ";j++;
                x = x + "  " +s[i+j].x*q+","+s[i+j].y+" ";j++;
                x = x + "S " +s[i+j].x*q+","+s[i+j].y+" ";j++;
                x = x + "  " +s[i+j].x*q+","+s[i+j].y+" ";j++;
                x = x + "S " +s[i+j].x*q+","+s[i+j].y+" ";j++;
                x = x + "  " +s[i+j].x*q+","+s[i+j].y+" ";j++;
                x = x + "S " +s[i+j].x*q+","+s[i+j].y+" ";j++;
                x = x + "  " +s[i+j].x*q+","+s[i+j].y+" ";j++;
                x = x + "S " +s[i+j].x*q+","+s[i+j].y+" ";j++;
                x = x + "  " +s[i+j].x*q+","+s[i+j].y+" ";j++;
                x = x + "S " +s[i+j].x*q+","+s[i+j].y+" ";j++;
                x = x + "  " +s[i+j].x*q+","+s[i+j].y+" ";j++;
                x = x + "S " +s[i+j].x*q+","+s[i+j].y+" ";j++;
                x = x + "  " +s[i+j].x*q+","+s[i+j].y+" ";j++;
                x = x + "S " +s[i+j].x*q+","+s[i+j].y+" ";j++;
                x = x + "  " +s[i+j].x*q+","+s[i+j].y+" ";j++;
                // i=i+j
                i=j
            }
            path[k]=x
        }
        return path
    }

    //? CUBIC CURVE v4                              #6 Complex Curve 3
    function makepath_CS4(q) {
        path_ary = []
        path=[0,0,0,0,0,0]
//        path_width=2  //? this is a very dense and busy path, so thinner lines

        let x = ""
        for (let k=0;k< sqary_r.length;k++) {
            let s = sqary_r[k]

            x = x + "M "+s[0].x*q+","+s[0].y+" "
            j=0
            for (let i=1; i<26;i++) {
                x = x + "C " +s[i+j+j].x*q+","+s[i+j-j].y+" ";j++;
                x = x + "  " +s[i+j].x*q+","+s[i+j].y+" ";j++;
                x = x + "  " +s[i+j].x*q+","+s[i+j].y+" ";j++;
                x = x + "S " +s[i+j].x*q+","+s[i+j].y+" ";j++;
                x = x + "  " +s[i+j].x*q+","+s[i+j].y+" ";j++;
                // i=i+j
                i=j
            }
            path[k]=x
        }
        return path
    }

    //? CUBIC CURVE - cmplex                        #2 Complex Curve 4
    function makepath_CS5(q) {
//        path_width = 2
        path_ary = []
        path=[0,0,0,0,0,0]
        j=0
        for (let k=0;k< sqary_r.length;k++) {
            let s = sqary_r[k]
            let x = ""
            x = x + "M "+s[0].x*q+" "+s[0].y+" "
            x = x + "C "+s[1].x*q+" "+s[1].y+","
            for (let i=3; i<64-2;i++) {
                x = x + ""  +s[i].x*q+" "+s[i].y+","
            }
            x = x + "S "+s[63].x*q+" "+s[63].y+","
            x = x + " "  +s[63].x*q+" "+s[63].y+" "
            path[k]=x
        }    
        return path
    }

    //? CUBIC CURVE v5 - TRUE CURVE call combined- OPEN          #6 super complex
    function makepath_CS6(q) {
        var bigary = []
        for (let k=0;k<6;k++) {
            for (let i=0;i<64;i++) {
                bigary.push(sqary_r[k][i])
            }
        }
//        path_width = 1
//        path_ary = []
        path=[]

        let x = ""
        let s = bigary
        x = x + "M 0 0 "
        j=0
        for (let i=1; i<128;i+=1) {
            x = x + "S " +s[i+j].x*q+" "+s[i+j].y+" ";j++;
            x = x + "  " +s[i+j].x*q+" "+s[i+j].y+" ";j++;
//            i = i+j
        }
        for (let i=1; i<6;i+=1) {
            path.push(x)
        }
        return path
    }

{
    //? QUADRATIC CURVE = not very curvy
//    function makepath_QT(q) {
//        path_width=3
//        path_ary = []
//        path=[0,0,0,0,0,0]
//
//        let x = ""
//        for (let k=0;k< sqary_r.length;k++) {
//            let s = sqary_r[k]
//            x = x + "M "+s[0].x*q+","+s[1].y+" "
//            j=0
//            for (let i=1; i<51;i++) {
//                x = x + "Q " +s[i+j].x*q+","+s[i+j].y+" ";j++;
//                x = x + "  " +s[i+j].x*q+","+s[i+j].y+" ";j++;
//                x = x + "T " +s[i+j].x*q+","+s[i+j].y+" ";j++;
//                i= i+j
//            }
//            path[k]=x
//        }
//        return path
//    }
    //? ARC PATHS - sorta useless
//    function makepath_LA(q) {
//        path_width=3
//        path_ary = []
//        path=[0,0,0,0,0,0]
//        for (let k=0;k< sqary_r.length;k++) {
//            let s = sqary_r[k]
//            let x = ""
//            x = x + "M "+s[0].x*q+","+s[1].y+" "
//            j=0
//            for (let i=1; i<51;i = i++) {
//                //A rx ry x-axis-rotation large-arc-flag sweep-flag x y
//                x = x + "L " +s[i+j].x*q+","+s[i+j].y+" ";j++
//                x = x + "A 60 60 0 0 0 " +s[i+j].x*q+","+s[i+j].y+" ";j++
//                x = x + "L " +s[i+j].x*q+","+s[i+j].y+" ";j++
//                x = x + "A 60 60 0 0 1 " +s[i+j].x*q+","+s[i+j].y+" ";j++
//                x = x + "L " +s[i+j].x*q+","+s[i+j].y+" ";j++
//                i = i+j
//            }
//            path[k]=x
//        }
//        return path
//    }
}

    updateObjMinMax(sqary_r);
    var rs = false;

    if (cycle_path == 1) { rs=[makepath_CS1(1),makepath_CS1(-1)]}  //? true curve open
    if (cycle_path == 2) { rs=[makepath_CS2(1),makepath_CS2(-1)]}  //? true curve closed
//    if (cycle_path == 3) { rs=[makepath_CS3(1),makepath_CS3(-1)]}  //? complex l.1
    if (cycle_path == 3) { rs=[makepath_CS3(1),makepath_CS3(-1)]}  //? complex l.2
    if (cycle_path == 4) { rs=[makepath_CS4(1),makepath_CS4(-1)]}  //? complex l.3
    if (cycle_path == 5) { rs=[makepath_CS5(1),makepath_CS5(-1)]}  //? complex l.4
    if (cycle_path == 6) { rs=[makepath_CS6(1),makepath_CS6(-1)]}  //? super complex

    return rs}




            //@ %PRAGMA:insert:clock_1_lib.js

            //? when used as an object, allow attributes to be changed by params passed in the query string
            var paramList = [];
            var refs = []; //? holds qs name/values

            //? get everything but the qs from the URL
            var href = window.location.protocol+'//'+window.location.hostname+window.location.pathname //document.defaultView.location.href;

            //? get everything and extract the qs
            var fullhref = document.defaultView.location.href;
            log(fullhref);

            //? parse qs into name/value array
            if ( -1 != fullhref.indexOf("?") ) {
                paramList = fullhref.split("?")[1].split(/&|;/);
                for ( let p = 0, pLen = paramList.length; pLen > p; p++ ) {
                    var eachParam = paramList[ p ];
                    var valList = eachParam.split("=");
                    var name = unescape(valList[0]);
                    var value = unescape(valList[1]);
                    refs[name] = value;
                }
            }

            // var cumxy = [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]]//xdel


             var wait_flag = true;  //? for timed operations

            //? array to hold variable line opacities
            var di =0;
            dlAry =  [[],[],[],[],[],[],[]];
            xdlAry = [[],[],[],[],[],[]];
            //? fill array with 1s for now
            for (let j = 0; j<7; j++) {
                di=1;
                for (let i=0;i<100;i++) {
                    dlAry[j].push(di);
                    di = di + j;
                }
            }

            /*
            dlAry now looks somethign like....
            0:(100) [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,..., 1]
            1:(100) [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,..., 100]
            2:(100) [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27,..., 199]
            3:(100) [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40,..., 298]
            4:(100) [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53,..., 397]
            5:(100) [1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 61, 66,..., 496]
            6:(100) [1, 7, 13, 19, 25, 31, 37, 43, 49, 55, 61, 67, 73, 79,..., 595]
            */

            var xdlAry = [];
            for (let j = 0; j<6; j++) {
                xdlAry[j] = dlAry[j+1];
            }

            /*
            xdlAry now looks somethign like....
            0:(100) [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,..., 100]
            1:(100) [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27,..., 199]
            2:(100) [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40,..., 298]
            3:(100) [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53,..., 397]
            4:(100) [1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 61, 66,..., 496]
            5:(100) [1, 7, 13, 19, 25, 31, 37, 43, 49, 55, 61, 67, 73, 79,..., 595]
            */

            const svgns = 'http://www.w3.org/2000/svg';
            var defs = document.createElementNS(svgns, 'defs');  //@ Global 'defs', do I need/want this?

            //? globals for polygon gradiant stops
            var polyColor_1_offset = 33.33;
            var polyColor_2_offset = 33.33*2;
            var polyColor_3_offset = 33.33*3;

            var idx1 = tree_counter%360;
            var idx2 = tree_counter*30%360;
            var idx3 = tree_counter*60%360;

            var idx4 = tree_counter%360;
            var idx5 = tree_counter*33%360;
            var idx6 = tree_counter*66%360;

            var this_color_1 = 0;
            var this_color_2 = 0;
            var this_color_3 = 0;

            //? globals for line opacities
            // var opacities       = [0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0]
            var opacities   = [1,1,1,1,1,1];
            var maxlengths  = [0,0,0,0,0,0];
            var mladj       = [0,0,0,0,0,0];

            //? general global vars
            var gens        = 6;
            var gen         = 0;
            var start_x     = 0;
            var start_y     = 0;
            var inf         = 10e10;  //@ I think JS has an 'infinity' var, but not sure how it works
            var ON          = true;
            var OFF         = false;
            var this_length;
            var start_x;
            var start_y;
            var branch_angle;
            var last_angle;


            //% █████████████ ADJUSTMENTS █████████████
            //% let noteseed = (54+tree_counter+ rotation)%108+108


            //!  ────────────────────────────────────────────────
            //? ALT CHARACTERS
            //  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  <- all
            //        D E F   H                                      <- USED BY BRAVE
            //  A B C       G   I J K   M N O P Q R S T U V W X Y Z  <- USED BY THIS APP
            //%                       L                              <- AVAILABLE
            //! ────────────────────────────────────────────────
            //@ ALT-D only works once... using KeyJ is OK
            //@ ALT-H seems to not reapond at all
            //@ ALT-G doesn't work in Firefox


            //@ ARGS
            var loop_delay      = parseFloat(qget("up",DEF_loop_delay));
            var iangle          = parseFloat(qget("ia",DEF_iangle));
            var deg_adj         = parseFloat(qget("de",DEF_deg_adj));
            var poly_opacity    = parseFloat(qget("aO",DEF_poly_opacity));
            var jump_delta      = parseFloat(qget("aJ",DEF_jump_delta));
            var circle_opacity  = parseFloat(qget("aX",DEF_circle_opacity));
            var circle_radius   = parseInt(qget("aN",  DEF_circle_radius));
            var cycle_circles   = parseInt(qget("aM" , DEF_cycle_circles));
            var cycle_colors    = parseInt(qget("aR",  DEF_cycle_colors));
            var show_0          = parseInt(qget("ca1", DEF_show_0));
            var show_1          = parseInt(qget("ca2", DEF_show_1));
            var show_2          = parseInt(qget("ca3", DEF_show_2));
            var show_3          = parseInt(qget("ca4", DEF_show_3));
            var show_4          = parseInt(qget("ca5", DEF_show_4));
            var show_5          = parseInt(qget("ca6", DEF_show_5));
            var show_all_lines  = parseInt(qget("ca0", DEF_show_all_lines));
            var cycle_audio     = parseInt(qget("aG",  DEF_cycle_audio));
            var cycle_poly      = parseInt(qget("aV",  DEF_cycle_poly));  //? default polygon is no polygons
            var cycle_path      = parseInt(qget("aK",  DEF_cycle_path));
            var cycle_dataset   = parseInt(qget("aU",  DEF_cycle_dataset));
            var cycle_preset    = parseInt(qget("aA",  DEF_cycle_preset));
            var cycle_vars      = parseInt(qget("aC",  DEF_cycle_vars));
            var merge_count     = parseInt(qget("aS",  DEF_merge_count));
            var zoomin          = parseInt(qget("aT",  DEF_zoomin));
            var was_zoomed      = 0 //? need to track when zoom is turned off
            var screensave      = parseInt(qget("aP",  DEF_screensave));
            var cycle_ratios    = parseInt(qget("aY",  DEF_cycle_ratios));
            var cycle_flowers   = parseInt(qget("mF",  DEF_cycle_flowers));
            var cycle_fruit     = parseInt(qget("mT",  DEF_cycle_fruit));
            var cycle_genang    = parseInt(qget("aD",  DEF_cycle_genang));
            var showtext        = parseInt(qget("aQ",  DEF_showtext));
            var last_showtext = showtext //? need to track last state
            var show_lines = [show_0,show_1,show_2,show_3,show_4,show_5]


            //? param-only
            var rolling_presets = parseInt(qget("xA", DEF_rolling_presets));
            var fullscreen      = parseInt(qget("FS", DEF_fullscreen));
            var path_mode       = parseInt(qget("li", DEF_path_mode));
            var mouse_angle     = parseInt(qget("ma", DEF_mouse_angle));
            var clock_mode      = parseInt(qget("cm", DEF_clock_mode));
            var merge_colors     = parseInt(qget("mc", DEF_merge_colors));


            var preset_changed  = false //? need to keep track when the cycle preset changes for one-off loads

            //? if -1, use smallest increment
            if (deg_adj == -1) {
                deg_adj = degs_per_level[5];
            } 

            // var rotation    = DEF_rotation;

            if (clock_mode > 0) {
                rotation = DEF_cmRotation;
            }
            if (clock_mode == 3) {
                deg_adj =  degs_per_level[5];
                loop_delay=1851.851851
            } else {
                rotation = DEF_rotation;  //? somewhere 'rotation' is getting changed (but I can't find it!).. so reset it here
            }


            //? these numbers determine the multiple of how many times the child gen rotates in relation to the parent
            //@ even numbers rotate the base by 90
            //@ decimanal rotate the base off center

            genang.push([[5,5,5,5,5,5,5],[5,5,5,5,5,5,5]]);names_of_genang.push("5");
            genang.push([[2,2,2,2,2,2,2],[2,2,2,2,2,2,2]]);names_of_genang.push("2");
            genang.push([[1,1,1,1,1,1,1],[1,1,1,1,1,1,1]]);names_of_genang.push("1");
            genang.push([[3,3,3,3,3,3,3],[3,3,3,3,3,3,3]]);names_of_genang.push("3");
            genang.push([[7,7,7,7,7,7,7],[7,7,7,7,7,7,7]]);names_of_genang.push("7");
            genang.push([[13,3,5,7,9,11,1],[1,3,5,7,9,11,1]]);names_of_genang.push("mx1");
            genang.push([[6,6,6,6,6,6,6],[6,6,6,6,6,6,6]]);names_of_genang.push("6");

            //? in clock mode, set angle multplier to 6
            if (clock_mode > 0) {  
                genang[0]=[[6,6,6,6,6,6,6],[6,6,6,6,6,6,6]];

            }

        //! ┌───────────────────────────────────────────────
        //! │ DEFAULTS
        //! └───────────────────────────────────────────────
            //? the line below can NOT have an ending semicolon... bug in the python merge code... will eventually fix
    var _VERSION = 3.69


    var _DEV_MODE = false

            //? vars for drawing live box
            var gMin_x = 0;
            var gMax_x = 0;
            var gMin_y = 0;
            var gMax_y = 0;
            var boxWidth  = 0;
            var boxHeight = 0;
            var boxSize   = 0;

            var _ = "" //? convenience var for menus

            var last_loop_delay   = loop_delay;
            var line_thickness    = 1;          //? adjustment factor
            var linelength_adj    = 1.8;        //? adjustment factor
            var sel_bg            = 0;          //? toggle background color... 1= white 0=black
            var bg_color          = "black";    //? default bg color
            var tree_counter      = 0;          //? just a simple +1 tree_counter
            var tc=[0,0,0,0,0,0,0,0,0,0,0,0,0]; //? tree_counters
            var branch_counter    = 0;          //? just a simple +1 tree_counter
            var sound_initialized = 0;
            var sound_on          = 0;
            var opwave            = 0;          //@ opwave is dead - probably
            var cv6inherit        = false;      //? flag for cv5 
            var pause             = 0;          //@ ?

            //? the count for each of these variable arrays, needed for MOD-cycling
            // console.log(names_of_colors);
            var num_of_colors   = names_of_colors.length; 
            var num_of_ratios   = names_of_ratios.length;
            //? the follwing all have 'off' conditions in index [0]
            var num_of_paths    = names_of_paths.length;
            var num_of_polys    = names_of_polys.length;
            var num_of_audios   = names_of_audios.length;
            var num_of_datasets = names_of_datasets.length;
            var num_of_circles  = names_of_circles.length;
            //? for random cycling
            var num_of_vars     = names_of_vars.length;
            var num_of_flowers  = names_of_flowers.length;
            var num_of_fruit    = names_of_fruit.length;
            //? for preset cycling
            var num_of_presets  = preqs.length;
            //? for revolution ratios
            var num_of_genang   = names_of_genang.length;
            var num_of_showtext = names_of_showtext.length;
            var num_of_merges = names_of_merges.length;



            //? for clock levels
            var line_angles=[0,0,0,0,0,0];
            var clock_angle = [0,0,0,0,0,0,0];
            var clock_time = [0,0,0,0,0,0,0];
            var t_time = [0,0,0,0,0,0];
            var cHour = 0;
            var z_index = 1;
            incremental = 0;
            var order = false;
            var gen = false;
            var cg = [false,false,false,false,false,false,false];
            var current_level = 0;
            var hand_coords = [
                {"x":0,"y":0},
                {"x":0,"y":0},
                {"x":0,"y":0},
                {"x":0,"y":0},
                {"x":0,"y":0},
                {"x":0,"y":0},
                {"x":0,"y":0},
            ];
            var tot_end_pts = [];
            var tot_end_pts_str = "";

            var inner_gen = false;
            var t_time_str = "";
            var t_time_step = 0;
            var t_time_secs = 0;
            var tick_counter = 0;

            var total_ticks = 6**6; //? 46656
            var total_secs = 24*60*60; //? 86400
            var total_degs = 360;

            var degs_per_tick = total_degs/total_ticks; //? = 0.00771604938 deg per tick
            var ticks_per_deg = total_ticks/total_degs; //? = 129.6         ticks per deg
            var secs_per_deg  = total_degs/total_secs;  //? = 0.00416666666 deg per sec
            var deg_per_sec   = total_secs/total_degs;  //? = 240 secs      secs per deg 
            var secs_per_tick = total_secs/total_ticks; //? = 1.8518518518  secs per tick
            var ticks_per_sec = total_ticks/total_secs; //? = 0.54          ticks per sec

            //? for function putCircle()
            var pcir_defs        = [];
            var pcir_gradient    = [];
            var pcir_circle      = [];
            var pcir_stops       = [];
            var pcir_color       = [];

            for (let i =0; i<116;i++) {  //? 116 is the number of call in the tree porocess that create circles
                pcir_defs.push(false);
                pcir_gradient.push(false);
                pcir_circle.push(false);
                pcir_stops.push(false);
                pcir_color.push(false);
            }

            //? for array of circles with gradients
            var mCIRdefs        = [false,false,false,false,false,false];
            var mCIRgradient    = [false,false,false,false,false,false];
            var mCIRcircle      = [false,false,false,false,false,false];
            var mCIRstops       = [false,false,false,false,false,false];
            var mCIRcolor       = [false,false,false,false,false,false];

            //? for array of lines with gradients
            var mLINEdefs        = [false,false,false,false,false,false];
            var mLINEgradient    = [false,false,false,false,false,false];
            var mLINEline        = [false,false,false,false,false,false];
            var mLINEstops       = [false,false,false,false,false,false];
            var mLINEcolor       = [false,false,false,false,false,false];

            //? all for transitioning, which never worked, but I'm optimistic
            var mratios             = DEF_mratios;
            var next_ratio          = 0;

            var vPensize         = [0,0,0,0,0,0];
            var last_pos         = 0;
            var this_length      = 0;
            var last_angle       = branch_angle;    //? init last_angle
            var rnum             = 0;               //? menu line counter

            //? for menu
            var menu_fontsize       = "18px";
            var menu_spacing        = 22;
            var menu_fontweight     ="600";
            var menu_fontclr        ="white";
            var menuCols            = [];
            var menuAltCols         = [];

            //? default menu column positions
            menuCols.push(0);                //? qs val
            menuCols.push(menuCols[0]+85);   //? key
            menuCols.push(menuCols[1]+110);  //? desc
            menuCols.push(menuCols[2]+220);  //? counters
            menuCols.push(menuCols[3]+110);

            //? alternative menu column positions
            menuAltCols.push(0);
            menuAltCols.push(menuAltCols[0]+30);
            menuAltCols.push(menuAltCols[1]+100);
            menuAltCols.push(menuAltCols[2]+100);
            menuAltCols.push(menuAltCols[3]+130);

            //? set the default rotation ratios
            var genangLEFT  = genang[cycle_genang][0];
            var genangRIGHT  = genang[cycle_genang][1];

            //? calculate the duration of a 'cycle' - currently not working properly
            tt = cycletimes(loop_delay, deg_adj, genangLEFT, genangRIGHT);
            var cycletime       = tt['cycletime'];
            var tot_cycletime   = tt['tot_cycletime'];
            var tot_images      = tt['tot_images'];

            //? define SVG element and do some intiial stuff
            //@ shoudl eleSvg be global?
            const eleSvg        = document.querySelector('svg');
            eleSvg.innerText    = `transform: translate(0,0)`;
            var pt              = eleSvg.createSVGPoint();  //@ prob can use 'point'
            eleSvg.dispatchEvent(new Event('click')); //@ why do I need this
            var point           = eleSvg.createSVGPoint();

            //? these x,y points determine where the angle starts from
            //? and also store the mouse coodinates for screen, page and viewbox
            point.y     = 0;
            point.x     = 0;
            point.va    = 0;
            point.vx    = 0;
            point.vy    = 0;
            point.va    = 0;

            var randang1 = randint(0,359);
            var randang2 = randint(0,359);


            var dump = [];

            //? initial angle determined by the time in seconds
            //? if iangle set to on the query string; 'ia=-1'
            if (iangle == -1) {
                iangle = nowsecs() % 360;
            }
            //@ implemewnt
            // if (iangle == -2) {
            //     iangle = clockmode_angle();
            // }
            var branch_angle = iangle;

            //? In javascript, with objects you can't say a=b and have 2 objects, as a[] is only a reference to b[], 
            //? and as there is no way to assign-by-value for arrays and object, you have to do this bullshit
            var pensize         = [0,0,0,0,0,0];
            var pre_maxlengths  = [0,0,0,0,0,0];
            for (let i=0;i<6;i++) {pensize[i]=DEF_pensize[i];}
            for (let i=0;i<6;i++) {pre_maxlengths[i] = DEF_pre_maxlengths[i];}
            var path_width      = 1;
            var path_opacity    = 1;
            var path_color      = 0;
            //? fill the linelengths
            var base_length     = 130;
            for (let i = 0; i<6; i++) {
                pre_maxlengths[i] = (base_length * mratios[cycle_ratios][i])||1; //? 0s not allowed
            }


            //? ────────────────────────────────────────────────
            //? SOUND stuff
            //? create global audiocontext
            var context     = false; //new AudioContext()

            //? initial 'scale'
            var notes   = getHarmoniousNotes(54);  // 54 comes from the 432 set of frequencies
            var notes2  = getHarmoniousNotes(54*(1+(1/5)));  // 63... 
            var notes3  = getHarmoniousNotes(54*(1-(1/3)));  // 45...

            notes.reverse(); //? reverse to match frequencies with levels
            notes2.reverse(); //? reverse to match frequencies with levels
            notes3.reverse(); //? reverse to match frequencies with levels

            var mnotes = [notes,notes2,notes3];

            // var notes21     = getHarmoniousNotes(54,21);  // 54 comes from the 432 set of frequencies

            // notes6 = [];
            // for (let i = 0; i<notes21.length-3; i=i+3) {
            //     notes6.push([
            //         notes21[i],
            //         notes21[i+1],
            //         notes21[i+2]
            //         ]
            //     )
            // }

            //? arrays for DATASETS
            fullary_right   = fullary_left = [];
            xfullary_right  = xfullary_left = [{'g':7,'x':0,'y':0}];



            //? ────────────────────────────────────────────────
            //! ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ SOCKET STUFF ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
            //! 0   CONNECTING  Socket has been created. The connection is not yet open.
            //! 1   OPEN        The connection is open and ready to communicate.
            //! 2   CLOSING     The connection is in the process of closing.
            //! 3   CLOSED      The connection is closed or couldn't be opened.
            //@ 'try' doesn't appear to catch anything :/
            try {
                const socket = new WebSocket('ws://localhost:8000');
                socket.addEventListener('open', function (event) {
                    socket.send('Connection Established');
                });

                const msgsend = function(mtype) {
                    let _c = tree_counter.toString().padStart(4,'0');
                    let _a = (Math.round(branch_angle)%180).toString().padStart(3,'0');
                    msg = mtype+":"+_c+":"+_a;
                    socket.send(msg);
                }

                const consoleMsg = () => {socket.send("console:")}
                if (socket.readyState == 1) {socket.send('msg');}
            } catch(e) {
                console.log("Server does not appear to be running...");
            }
            //! ═════════════════════════════════════════════════
            //? start a seconds time
            var seconds = 0
            timer2.start(function() {
                wait_flag = false;
                seconds +=1;
            },1000);

            var thedate = false;
            var this_date = false;

            // thedate = "17 Dec 1995 00:00:00";
            // thedate = "17 Dec 1995 01:00:00";
            // thedate = "17 Dec 1995 02:00:00";
            // thedate = "17 Dec 1995 03:00:00";
            // thedate = "17 Dec 1995 04:00:00";
            // thedate = "17 Dec 1995 05:00:00";
            // thedate = "17 Dec 1995 06:00:00";
            // thedate = "17 Dec 1995 07:00:00";
            // thedate = "17 Dec 1995 08:00:00";
            // thedate = "17 Dec 1995 09:00:00";
            // thedate = "17 Dec 1995 10:00:00";
            // thedate = "17 Dec 1995 11:00:00";
            // thedate = "17 Dec 1995 12:00:00";

            // thedate = "17 Dec 1995 13:00:00";
            // thedate = "17 Dec 1995 14:00:00";
            // thedate = "17 Dec 1995 15:00:00";
            // thedate = "17 Dec 1995 16:00:00";
            // thedate = "17 Dec 1995 17:00:00";
            // thedate = "17 Dec 1995 18:00:00";
            // thedate = "17 Dec 1995 19:00:00";
            // thedate = "17 Dec 1995 20:00:00";
            // thedate = "17 Dec 1995 21:00:00";
            // thedate = "17 Dec 1995 22:00:00";
            // thedate = "17 Dec 1995 23:00:00";
            
            if (thedate == false) {
                this_date = new Date();
            } else {
                this_date = new Date(thedate);
            }

            //? if there are seconds in a day, need to update tick_counter to be n sync
            //? ticks / secs * increment = degs_per_tick  .... ergo
            //? (secs*increment)*degs_per_tick = ticks


            let daysecs = getSecsInDay(this_date);
            //? override for 4AM mode

            // if (clock_mode == 3) {
            if (clock_mode > 0) {
                daysecs = getSecsInDay(this_date,14400);
            } else {

            }
            tick_counter = daysecs * ticks_per_sec
            branch_angle = (daysecs * secs_per_deg)%360;



            //! ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
            //! 
            //! ███████ ████████  █████  ██████  ████████     ██       ██████   ██████  ██████  
            //! ██         ██    ██   ██ ██   ██    ██        ██      ██    ██ ██    ██ ██   ██ 
            //! ███████    ██    ███████ ██████     ██        ██      ██    ██ ██    ██ ██████  
            //!      ██    ██    ██   ██ ██   ██    ██        ██      ██    ██ ██    ██ ██      
            //! ███████    ██    ██   ██ ██   ██    ██        ███████  ██████   ██████  ██      
            //! 
            //! ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓

            //? this works for gnang = 6 AND ONLY orients horizontally, but at least the lines are in order.
            //? use '* 6' just flips the lines horisontally
            // rotation = DEF_rotation + (DEF_rotation*5);

            drawTree(branch_angle, rotation);
            timer.start(function() {

                if (mouse_angle == 1) {
                    branch_angle = point.va = (rad2deg(Math.atan2(point.vy,point.vx))+90+360)%360;
                }
                last_angle = branch_angle;
                //? rebuild ratio lengths
                for (let i = 0; i<6; i++) {
                    pre_maxlengths[i] = (base_length * mratios[cycle_ratios][i])||1; //? 0s not allowed
                }
                branch_angle = branch_angle + deg_adj;

                //? build tree
                drawTree(branch_angle,rotation);

                //? update counters
                tree_counter++;
                if (branch_angle != last_angle) {
                    tick_counter++;
                }
                t_time_str = "";
                t_time_step = 0;
                tc[1]=tree_counter;
                for (let i=2;i<tc.length;i++) {
                    if (tree_counter%(i) == 0) {
                        tc[i]++;
                    }
                }
                //? reset vars
                fullary_right   = fullary_left = [];
                xfullary_right  = xfullary_left = [{'g':7,'x':0,'y':0}];
                gMin_x = gMax_x = gMin_y = gMax_y = 0;
                if (screensave == 1) {msgsend("saveScreen:"+branch_angle+":"+rotation)}


                // if (clock_mode == 1) {            
                //     rotation = (45 * (tree_counter%6))%360;
                // }

            },loop_delay);
            //! ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

            //@ vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
            //@ INSERT LISTENERS HERE (and comment out script below)
            //@ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        var lastkey = {}

        isCtl = false
        isAlt = false
        isKey = false
        isMet = false
        isSft = false
        isSftCtl = false
        isAltCtl = false
        isAltMet = false
        isCtlMet = false            


        function toggle(n,t) {
            // console.log(">n,t",n,t);
            // let nn = n%t;
            // console.log(">nn",nn);
            // return nn
            return (n+1)%t
        }
        function dnlimit(v,step,lim) {
            v = v - step;
            if (v <lim) {v=lim}
            return v
        }
        function uplimit(v,step,lim) {
            v = v + step;
            if (v >lim) {v=lim}
            return v
        }
        function dnCircOpac(n,lim) {
            n = (parseInt((n*100) - 1)/100);
            if (n < lim) {
                n = lim
            }
            return n            
        }
        function upCircOpac(n,lim) {
            n = (parseInt((n*100) + 1)/100);
            if (n > lim) {
                n = lim
            }
            return n            
        }

        function dnPolyOpac(n,lim) {
            n = Math.round((n*100) - 1)/100
            if (n < lim) {
                n = lim
            }
            return n            
        }
        function upPolyOpac(n,lim) {
            n = Math.round((n*100) + 1)/100
            if (n > lim) {
                n = lim
            }
            console.log("po after:",n)
            return n            
        }
        function spacepause(pause) {
                pause = toggle(pause,2)
                if (pause == 1) {
                    last_loop_delay = loop_delay
                    loop_delay = 1000000000 
                    console.log("pausing for "+parseInt(loop_delay/1000)+" seconds")
                    timer.set_interval(loop_delay);
                } else {
                    loop_delay = last_loop_delay
                    console.log("resuming delay of "+loop_delay+" milliseconds")
                    timer.set_interval(loop_delay);
                }
                return pause

        }
        function homekey() {
            var svg = document.getElementById("svg");
            if (sel_bg == 1) { //white
                svg.setAttribute("style", "border:1px solid #444; background-color: #000;");
                log("Changing BG color to BLACK")
                bg_color = "black"
                sel_bg = 0
            } else {
                svg.setAttribute("style", "border:1px solid #444; background-color: #FFF;");
                log("Changing BG color to WHITE")
                bg_color = "white"
                sel_bg = 1
            }
        }

        //? ug!  another example of the horribleness of javascript
        function isOn(key) {
            if (typeof lastkey[key] === "undefined") {
                res = false
            } else {
                res = true
            }
            if (typeof lastkey[key] === "boolean") {
                res = lastkey[key]
            }
            return res
        }

        window.addEventListener('keydown', function (event) {
            lastkey[event.code] = true
            lastkey[event.key] = true


            if ( isOn('Alt') && !isOn('Control') && !isOn('Meta') && !isOn('Shift') ) {isAlt = true;}
            if (!isOn('Alt') &&  isOn('Control') && !isOn('Meta') && !isOn('Shift') ) {isCtl = true;}
            if (!isOn('Alt') && !isOn('Control') && !isOn('Meta') && !isOn('Shift') ) {isKey = true;}
            if (!isOn('Alt') && !isOn('Control') &&  isOn('Meta') && !isOn('Shift') ) {isMet = true;}
            if (!isOn('Alt') && !isOn('Control') && !isOn('Meta') &&  isOn('Shift') ) {isSft = true;}


            //? CONTROL-ALT
            if ( isOn('Alt') &&  isOn('Control') && !isOn('Meta') && !isOn('Shift')) {
                isAltCtl = true;
                isCtl = false
                isAlt = false
                isSft = false
            }
            //? ALT-META
            if ( isOn('Alt') &&  !isOn('Control') && isOn('Meta') && !isOn('Shift')) {
                isAltMet = true;
                isMet = false
                isAlt = false
                isSft = false
            }
            //? CONTROL-META
            if (!isOn('Alt') &&  isOn('Control') && isOn('Meta') && !isOn('Shift')) {
                isCtlMet = true;
                isCtl = false
                isMet = false
                isSft = false
            }
            //? SHIFT-CONTROL
            if (!isOn('Alt') &&  isOn('Control') && !isOn('Meta') && isOn('Shift')) {
                isSftCtl = true;
                isCtl = false
                isMet = false
                isSft = false
                isAlt = false
            }

// console.log("event.code: ",event.code)
// console.log("event.key: ",event.key)
// console.log("isAlt: ",isAlt)
// console.log("isCtl: ",isCtl)
// console.log("isKey: ",isKey)
// console.log("isMet: ",isMet)
// console.log("isSft: ",isSft)
// console.log("isAltCtl: ",isAltCtl)
// console.log("isSftCtl: ",isSftCtl)
// console.log("isCtlMet: ",isCtlMet)
// console.log("isAltMet: ",isAltMet)


//            //? ──────────────────────────────────────────────── SNAPSHOT
//            if (isKey && lastkey['Backspace']) {
//                snapshot=1
//                log("Snaphot")
//            }
            //? ──────────────────────────────────────────────── GENANG
            if (isAlt && lastkey['Period']) {
                cycle_genang = toggle(cycle_genang,num_of_genang-1);
            }
            //? ──────────────────────────────────────────────── MERGE COLORS
            if (isMet && lastkey['KeyC']) {
                merge_colors = toggle(merge_colors,num_of_merges-1);
            }
            //? ──────────────────────────────────────────────── FRUITS and FLOWERES
            if (isMet && lastkey['KeyF']) {cycle_flowers = toggle(cycle_flowers,num_of_flowers);log("Flower:"+cycle_flowers)}
            if (isMet && lastkey['KeyT']) {cycle_fruit = toggle(cycle_fruit,num_of_fruit);log("Fruit:"+cycle_fruit)}

            //? ──────────────────────────────────────────────── BACKGROUND
            if (isKey && lastkey['Home']) {homekey();log("Changing BG color")}
            //? ──────────────────────────────────────────────── PAUSE
            if (isKey && lastkey['Space']) {pause = spacepause(pause)}
            //? ──────────────────────────────────────────────── PRESETS
            if (isAlt && lastkey['KeyA']) {preset_changed = true;cycle_preset = toggle(cycle_preset,num_of_presets);log("Cycle Presets: "+cycle_preset)}
            //? ──────────────────────────────────────────────── SOUND
            if (isCtl && lastkey['KeyY']) {initSound(sound_on);sound_on = toggle(sound_on,2);log("sound system:"+sound_on)}
            //? ──────────────────────────────────────────────── FAST/SLOW
            if (isKey && lastkey['ArrowUp']) {loop_delay = dnlimit(loop_delay,50,-200);timer.set_interval(loop_delay);log("loop delay: "+loop_delay)}
            if (isKey && lastkey['ArrowDown'])  {loop_delay = uplimit(loop_delay,50, inf);timer.set_interval(loop_delay);log("loop delay: "+loop_delay)}
            //? ──────────────────────────────────────────────── DEG 
            if (isKey && lastkey['Insert']) {deg_adj = deg_adj*1.618;log("Degree Adjust: "+deg_adj);let tot_ticks = parseInt(360/deg_adj);}
            if (isKey && lastkey['Delete']) {deg_adj = deg_adj/1.618; log("Degree Adjust: "+deg_adj); let tot_ticks = parseInt(360/deg_adj);}
            if (isAlt && lastkey['KeyJ']) {
                branch_angle = branch_angle + jump_delta;
                log("++jump_delta:"+jump_delta)
                tick_counter = tick_counter + (jump_delta * ticks_per_deg);
            }
            if (isMet && lastkey['KeyJ']) {
                branch_angle = branch_angle - jump_delta;
                log("--jump_delta:"+jump_delta);
                tick_counter = tick_counter - (jump_delta * ticks_per_deg);
            }
            //? ──────────────────────────────────────────────── FAT/THIN
            if (isKey && lastkey['ArrowLeft'])  {line_thickness = line_thickness *  .99;log("line_thickness: "+line_thickness)}
            if (isKey && lastkey['ArrowRight']) {line_thickness = line_thickness * 1.01;log("line_thickness: "+line_thickness)}
            //? ──────────────────────────────────────────────── LONG/SHORT
            if (isKey && lastkey['PageDown'])   {linelength_adj = linelength_adj * 0.99;log("linelength_adj: "+linelength_adj)}
            if (isKey && lastkey['PageUp'])     {linelength_adj = linelength_adj * 1.01;log("linelength_adj: "+linelength_adj)}
            if (isSftCtl && lastkey['Digit1']) {mladj[0]=mladj[0]-5;log("Line 1 length: "+mladj[0])}
            if (isSftCtl && lastkey['Digit2']) {mladj[1]=mladj[1]-5;log("Line 2 length: "+mladj[1])}
            if (isSftCtl && lastkey['Digit3']) {mladj[2]=mladj[2]-5;log("Line 3 length: "+mladj[2])}
            if (isSftCtl && lastkey['Digit4']) { mladj[3]=mladj[3]-5;log("Line 4 length: "+mladj[3])}
            if (isSftCtl && lastkey['Digit5']) {mladj[4]=mladj[4]-5;log("Line 5 length: "+mladj[4]);}
            if (isSftCtl && lastkey['Digit6']) {mladj[5]=mladj[5]-5;log("Line 6 length: "+mladj[5])}
            //? ──────────────────────────────────────────────── SHOW/HIDE
            if (isSftCtl && lastkey['F1']) {mladj[0]=mladj[0]+5;log("Line 1 length: "+mladj[0])}
            if (isSftCtl && lastkey['F2']) {mladj[1]=mladj[1]+5;log("Line 2 length: "+mladj[1])}
            if (isSftCtl && lastkey['F3']) {mladj[2]=mladj[2]+5;log("Line 3 length: "+mladj[2])}
            if (isSftCtl && lastkey['F4']) {mladj[3]=mladj[3]+5;log("Line 4 length: "+mladj[3])}
            if (isSftCtl && lastkey['F5']) {mladj[4]=mladj[4]+5;log("Line 5 length: "+mladj[4])}
            if (isSftCtl && lastkey['F6']) {mladj[5]=mladj[5]+5;log("Line 6 length: "+mladj[5])}

            if (isAltCtl && lastkey['Digit0']) {
                show_all_lines = toggle(show_all_lines,2); 
                log("toggle all:"+show_all_lines); 
            }
          
            if (isAltCtl && lastkey['Digit1']) {show_0 = toggle(show_0,2); log("toggle level 1") }
            if (isAltCtl && lastkey['Digit2']) {show_1 = toggle(show_1,2); log("toggle level 2") }
            if (isAltCtl && lastkey['Digit3']) {show_2 = toggle(show_2,2); log("toggle level 3") }
            if (isAltCtl && lastkey['Digit4']) {show_3 = toggle(show_3,2); log("toggle level 4") }
            if (isAltCtl && lastkey['Digit5']) {show_4 = toggle(show_4,2); log("toggle level 5") }
            if (isAltCtl && lastkey['Digit6']) {show_5 = toggle(show_5,2);log("toggle level 6") }

            show_lines = [show_0,show_1,show_2,show_3,show_4,show_5]

            //? ──────────────────────────────────────────────── SHOW/HIDE MENU
            if (isAlt && lastkey['KeyQ']) {
                log("fullscren",fullscreen)
                if (fullscreen == 1) {
                    fullscreen = 0
                    showtext = 1
                    log("Fillscreen off, showtext on") 
                } else {
                    showtext = toggle(showtext,num_of_showtext); 
                    log("Showing text:"+showtext) 
                }
            }
            //? ──────────────────────────────────────────────── SCREENSAVE
            if (isAlt && lastkey['KeyP']) { screensave= toggle(screensave,2); log("screensave: "+screensave) }
            //? ──────────────────────────────────────────────── ZOOM
            if (isAlt && lastkey['KeyT']) {
                zoomin= toggle(zoomin,2); 
                log("Zoomin: "+zoomin) 

                //? this doesn't work here
                // if (zoomin == 1) {
                //     zoomvb(gMin_x, gMax_x, gMin_y, gMax_y)  
                //     showtext=0; //? turn off the menu, as it is unreadable
                // } else {
                //     if (gMin_x+gMax_x+gMin_y+gMax_y != 0) {
                //         zoomvb(-960, 960, -512, 512)  
                //         showtext = 1 //? turn menu back up
                //     }
                // }
            }
            //? ──────────────────────────────────────────────── RATIOS
            if (isAlt && lastkey['KeyY']) { cycle_ratios= toggle(cycle_ratios,num_of_ratios); log("Cycle Ratio: "+cycle_ratios) }
            //? ──────────────────────────────────────────────── COLRS
            if (isAlt && lastkey['KeyR']) { cycle_colors= toggle(cycle_colors,num_of_colors); log("Cycle Colors: "+cycle_colors) }
            //? ──────────────────────────────────────────────── MERGE
            if (isAlt && lastkey['KeyW']) {merge_count = dnlimit(merge_count,1,0);log("- Merge count: "+merge_count)}
            if (isAlt && lastkey['KeyS']) {merge_count = uplimit(merge_count,1,inf);log("+ Merge count: "+merge_count)}
            //? ──────────────────────────────────────────────── CIRCLES
            if (isAlt && lastkey['KeyN']) {circle_radius = uplimit(circle_radius,1,inf);log("+ Radius: "+circle_radius)}
            if (isAlt && lastkey['KeyB']) {circle_radius = dnlimit(circle_radius,1,0);log("- Radius: "+circle_radius)}
            if (isAlt && lastkey['KeyM']) {cycle_circles = toggle(cycle_circles,num_of_circles); log("Circle type: "+cycle_circles) }
            //? ──────────────────────────────────────────────── POLY
            if (isAlt && lastkey['KeyX']) {circle_opacity = upCircOpac(circle_opacity,1);log("+ Opacity: "+circle_opacity)}
            if (isAlt && lastkey['KeyZ']) {circle_opacity = dnCircOpac(circle_opacity,0);log("- Opacity: "+circle_opacity)}
            if (isAlt && lastkey['KeyO']) {
                poly_opacity = upPolyOpac(poly_opacity,1);
                // debugger
                log("+ Poly opacity: "+poly_opacity)}
            if (isAlt && lastkey['KeyI']) {poly_opacity = dnPolyOpac(poly_opacity,0);log("- Poly opacity: "+poly_opacity)}
            //? ──────────────────────────────────────────────── CYCLES
            if (isAlt && lastkey['KeyC']) {cycle_vars = toggle(cycle_vars,num_of_vars); log("Cycling vars: "+cycle_vars) }
            if (isAlt && lastkey['KeyV']) {cycle_poly = toggle(cycle_poly,num_of_polys);log("Show polys: "+cycle_poly)}
            // if (isAlt && lastkey['KeyU']) {cycle_dataset = toggle(cycle_dataset,num_of_datasets); log("Using dataset "+cycle_dataset+"/"+num_of_datasets) }
            if (isAlt && lastkey['KeyK']) {cycle_path = toggle(cycle_path,num_of_paths); log("Using path "+cycle_path, num_of_paths) }
            if (isAlt && lastkey['KeyG']) {cycle_audio = toggle(cycle_audio,num_of_audios); log("Using audio "+cycle_audio, num_of_audios) }
            if (isAlt && lastkey['KeyU']) {
                cycle_dataset = toggle(cycle_dataset,num_of_datasets); 
                console.log(cycle_dataset)
                if (cycle_dataset > 0) {
                    cycle_circles = toggle(cycle_circles,num_of_circles)
                    circle_radius = uplimit(circle_radius,15,inf)
                } else {
                    cycles_circles=0
                    circle_radius=0
                }
                log("Using dataset "+cycle_dataset+"/"+num_of_datasets) 
            }


            //@ ARGS
        });
        eleSvg.addEventListener('keyup', function (event) {
            lastkey[event.code] = false
            lastkey[event.key] = false

            isCtl = false
            isAlt = false
            isKey = false
            isMet = false
            isSft = false
            isSftCtl = false
            isAltCtl = false
            isAltMet = false
            isCtlMet = false

        });

        eleSvg.addEventListener('mousemove', ({clientX, clientY,screenX, screenY, pageX, pageY}) => {
            point.x = clientX;
            point.y = clientY;

            point.sx = screenX;
            point.sy = screenY;

            point.px = pageX;
            point.py = pageY;

            //? The cursor point, translated into svg coordinates
            var cursorpt =  point.matrixTransform(eleSvg.getScreenCTM().inverse());
            point.vx =  cursorpt.x
            point.vy =  cursorpt.y
            point.va = (rad2deg(Math.atan2(point.vy,point.vx))+90+360)%360 //? rotate c-clockwise to adj
            rotation = point.va;
        })
        eleSvg.addEventListener('wheel', function(event) {
            if (mouse_angle==1) {
                if (event.deltaY < 0) {
//                    point_y_delta -=0.1
                } else if (event.deltaY > 0) {
//                    point_y_delta +=0.1
//                console.log("y_delta",point_y_delta)
                }
            }
//            if (event.deltaY < 0) {
//                console.log('scrolling up');
//            } else if (event.deltaY > 0) {
//                console.log('scrolling down');
//            }
        });

            //@ %PRAGMA:insert:clock_1_listeners.js:

            ]]>
            </script>

        </svg>
    <!-- /body -->
<!-- /html -->

