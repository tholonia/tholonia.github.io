<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
        "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg
        id="svg"
        class="svg"
        viewBox="-960 -540 1920 1080"
        width="99%"
        height="99%"
        fill="white"
        style="border:1px solid #444; background-color: #fff;"
        xmlns="http://www.w3.org/2000/svg"
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke="white"
        stroke-width="3"
        xml:space="preserve"
        align="center"
>

    <!--         viewBox="-540 -960 1080 1920" -->
    <!--         viewBox="-960 -540 1920 1080" -->
    <!--         viewBox="-960 -540 1920 1080" -->
    <!--        transform="translate(0 -0) rotate(-90) "-->
    <!--        transform="translate(450 -400) rotate(-90) "-->
    <!--        transform="rotate(-90 50 100)"-->
    <!--        <rect x="0" y="0" width="400" height="400"  style="stroke: #ffffff; fill:none;"/>-->
    <!--        width="400"-->
    <!--        height="400"-->
    <!--        version="1.1"-->
    <!--        fill-rule="evenodd"-->
    <!--        zoomAndPan="magnify" width="1150" height="767"-->

    <!-- you must wrap scripts in CDATA tags as SVG should be valid XML -->
    <script type="text/javascript"><![CDATA[
    <!-- ------------------------------------------------------------- -->
    class Node {
        constructor(a, b) {
            this.x = a;
            this.y = b;
        }

        toString() {
            return "(" + this.x.toFixed(2) + ", " + this.y.toFixed(2) + ")";
        }
    }
    <!--  connections between nodes in a graph -->
    <!-- ------------------------------------------------------------- -->
    class Edge {
        constructor(node_a, node_b) {
            this.node_1 = node_a;
            this.node_2 = node_b;
        }
        toString() {
            return "[" + this.node_1.toString() + ", " + this.node_2.toString() + "]";
        }
    }
    <!--  Javascript math library trig functions take radians and not degrees by default -->
    <!-- ------------------------------------------------------------- -->
    function toRadians(angle) {
        return angle * Math.PI / 180;
    }
    <!--  recursive collection of nodes and edges that form a tree -->
    <!-- ------------------------------------------------------------- -->
    class Tree {
        <!--  constructor(gens, m, x, y, a, t) {  // renamed to match my old code  -->
        constructor(gens, lineLength, x, y, angle, rotation) {
            <!--  all trees have a base node -->
            this.base_node = new Node(x, y);

            <!--  check if we are at end of tree -->
            if (gens > 0) {

                <!--  determine next node to the right in the tree with trig -->
                this.right_node = new Node(
                    x + lineLength * Math.cos(toRadians(angle - rotation)),
                    y + lineLength * Math.sin(toRadians(angle - rotation))
                );

                <!--  determine next node to the left in the tree with trig -->
                    this.left_node = new Node(
                    x + lineLength * Math.cos(toRadians(angle + rotation)),
                    y + lineLength * Math.sin(toRadians(angle + rotation))
                );

                <!--  create edges in the graph that connect the base node to the following nodes -->
                this.right_branch = new Edge(this.base_node, this.right_node);
                this.left_branch = new Edge(this.base_node, this.left_node);

                <!--  generate a tree beginning at the left node, with a lower depth and new start angle -->
                this.left_tree = new Tree(
                    gens - 1,
                    lineLength,
                    this.left_node.x,
                    this.left_node.y,
                    angle + rotation,
                    rotation
                );

                <!--  generate a tree beginning at the right node, with a lower depth and new start angle -->
                this.right_tree = new Tree(
                    gens - 1,
                    lineLength,
                    this.right_node.x,
                    this.right_node.y,
                    angle - rotation,
                    rotation
                );
            }
        }
    }

    <!--  traverse a tree object and return the edges in the form of a list -->
    <!-- ------------------------------------------------------------- -->
    function getTreeEdges(tree) {
        if (tree.left_tree) {
            var edges = getTreeEdges(tree.right_tree).concat(getTreeEdges(tree.left_tree));
            edges.push(tree.left_branch);
            edges.push(tree.right_branch);
            return edges;
        } else {
            return [];
        }
    }
    <!-- ------------------------------------------------------------- -->
    <!--  Expected usage for integration -->
    <!--  example_tree = new Tree(8, 15, 100,175,15,270); -->
    <!--  console.log(getTreeEdges(example_tree).toString()); -->

    <!--  draw the tree for testing purposes -->
    <!-- ------------------------------------------------------------- -->
    function clearCanvas() {
        const myNode = document.getElementById("svg");
        while (myNode.firstChild) {
            myNode.removeChild(myNode.lastChild);
        }
    }
    <!-- ------------------------------------------------------------- -->
    function cycle_in_range(number, amin, amax, invert=0) {
        try {
            mod_num = number % amax
        } catch {
            mod_num = 0
        }

        try {
            mod_num2 = number % (amax * 2)
        } catch {
            mod_num2 = 0
        }

        new_val1 = Math.abs(mod_num2 - (mod_num * 2))

        old_min = 0
        old_min = 0
        old_max = amax
        new_max = amax
        new_min = amin

        try {
            new_value = ((new_val1 - old_min) / (old_max - old_min)) * (new_max - new_min) + new_min
        } catch {
            new_value = 0
        }
        if (invert == 1) {
            new_value = amax - new_value
        }
        return (Math.round(new_value))
    }
    <!-- ------------------------------------------------------------- -->
    function clearSVG() {
        var svg = document.getElementById("svg");
        svg.parentNode.replaceChild(svg.cloneNode(false), svg);
    }
    <!-- ------------------------------------------------------------- -->
    function sleep(miliseconds) {
        var currentTime = new Date().getTime();
        while (currentTime + miliseconds >= new Date().getTime()) {
        }
    }
    <!-- ------------------------------------------------------------- -->
    function getLevel(p) {
        for (n = 12; n >= 0; n--) {
            if (p >= 2 ** n) {
                return (n)
            }
        }
        return (0)
    }


    <!-- ------------------------------------------------------------- -->
    function drawTree(gens, this_length, start_x, start_y, branch_angle, rotation) {
        <!--  clearSVG() doesn't work when the root element is 'svg', as is the case here (I *THINK* this it is necessary -->
        <!--  when creating an SVG that is XML compliant) -->
        <!--  clearSVG(); -->
        clearCanvas()
        console.log("-----------------------------------------------------------")
        var draw_tree = new Tree(gens, this_length, start_x, start_y, branch_angle, rotation);
        // console.log(getTreeEdges(draw_tree).toString());
        var draw_edges = getTreeEdges(draw_tree);
        var svg = document.getElementById("svg");

            // alert(1)
        gen = 0
        draw_edges.forEach(element => {
            // console.log(element)
            var newLine = document.createElementNS('http://www.w3.org/2000/svg', 'line');
            newLine.setAttribute('x1', element.node_1.x.toString());
            newLine.setAttribute('y1', element.node_1.y.toString());
            newLine.setAttribute('x2', element.node_2.x.toString());
            newLine.setAttribute('y2', element.node_2.y.toString());
            // newLine.setAttribute("stroke", "black");
            // newLine.setAttribute("stroke-width", "1");
            let order = lOrder[gen]
            let this_pem = pensize[order].toString()
            newLine.setAttribute("stroke-width", pensize[order]);
            let this_color = colors2[0][order].toString()
            newLine.setAttribute("stroke", this_color);

            svg.appendChild(newLine);
            gen++;
        });
    }
    var colors2 = [
        [
            'red','orange','yellow','green','cyan','blue','magenta',
            'blue','cyan','green','yellow','orange','red','orange',
            'yellow'
        ],
        [
            '#D72504','#D72504','#D72504','#D72504','#E09E7C','#E3A17F',
            '#E3D79B','#CD9733','#87314B','#759CB1','#AFCBD1','#719129',
            '#BDC873','#E3C94E','#B7817B'
        ],
        [
            '#d72631','#a2d5c6','#077b8a','#5c3c92','#1e3d59','#f5f0e1',
            '#ff6e40','#ffc13b','#26495c','#c4a35a','#c66b3d','#e5e5dc',
            '#aed6dc','#ff9a8d','#4a536b'
        ],
        [
            '#000000','#222222','#444444','#666666','#888888','#aaaaaa',
            '#cccccc','#eeeeee','#ffffff','#dddddd','#bbbbbb','#999999',
            '#777777','#555555','#333333'
        ]
    ]


    lOrder=[5,5,5,5,4,4,5,5,5,5,4,4,3,3,5,5,5,5,4,4,5,5,5,5,4,4,3,3,2,2,5,5,5,5,4,4,5,5,5,5,4,4,3,3,5,5,5,5,4,4,5,5,5,5,4,4,3,3,2,2,1,1,5,5,5,5,4,4,5,5,5,5,4,4,3,3,5,5,5,5,4,4,5,5,5,5,4,4,3,3,2,2,5,5,5,5,4,4,5,5,5,5,4,4,3,3,5,5,5,5,4,4,5,5,5,5,4,4,3,3,2,2,1,1,0,0]
    // pensize = [61, 51, 41, 31, 21, 11, 6]
    pensize = [61, 51, 41, 31, 21, 11, 6]
    var gens = 6
    var gen = 0
    var maxlength = 150
    var start_x = 0
    var start_y = 0
    var rotation = 270
    var show_message = false
    var last_pos = 0

    const eleSvg = document.querySelector('svg');
    eleSvg.addEventListener('mousemove', ({clientX, clientY}) => {
        if (show_message) {
            sleep(3000);
            show_message = false;
        }
        let point = eleSvg.createSVGPoint();
        point.x = clientX;
        point.y = clientY;
        let this_pos = point.x + point.y
        if (this_pos !== last_pos) {
            let this_length = cycle_in_range(point.y/6, 0, maxlength, invert=0)
            let this_angle =  (point.x/5) % 360
            // console.log("length:"+this_length, "angle:"+this_angle)

            <!--  this is the original, only rotates -->
            <!--  drawTree(gens, this_length, start_x, start_y, this_angle, rotation); -->

            <!--  this one works, but have two swap the last 2 args -->
            drawTree(gens, this_length, start_x, start_y, rotation, this_angle);
        }
    })


          // Expected usage for integration
      // example_tree = new Tree(8, 15, 100,175,15,270);
      // console.log(getTreeEdges(example_tree).toString());


    <!-- everything below here are the even listeners -->

    var lastkey = {}
    eleSvg.addEventListener('keydown', function (event) {
        lastkey[event.code] = true
        lastkey[event.key] = true
        <!-- random 2sec loop -->
        if (event.code === "ArrowUp") {
            console.log("random 2s loop")
            <!-- let timerId = setInterval(() => drawForm(randint(0, 500), randint(0, 500)), 2000); -->
            setInterval(() => drawForm(randint(0, 500), randint(0, 500)), 2000);
        }
        if (lastkey['Control'] && lastkey['Shift'] && event.code === "ArrowUp") {
            console.log("timebased 2s loop")
            <!-- let timerId = setInterval(() => drawForm(randint(0, 500), randint(0, 500)), 2000); -->
            var currentTime = new Date();
            let tangle = currentTime.getSeconds() * 6
            let tx = Math.cos(deg2rad(tx)) * 360
            let ty = Math.sin(deg2rad(tx)) * 360
            setInterval(() => drawForm(tx, ty), 1000);
        }
        if (lastkey['Control'] && lastkey['Shift'] && event.code === "ArrowDown") {
            console.log("slow progression ");
            baseangle = 0;
            <!-- let timerId = setInterval(() => drawForm(randint(0, 500), randint(0, 500)), 2000); -->
            setInterval(() => drawForm(start_x, start_y, baseangle + 0.1), 100);
        }
        <!-- random step -->
        if (event.code === "ArrowDown") {
            console.log("random step")
            let x = randint(0, 500);
            let y = randint(0, 500);
            drawForm(x, y);
        }
        <!-- minus 1 degree -->
        if (event.code === "ArrowLeft") {
            console.log("1 deg back")
            let new_angle = last_angle - 1;
            drawForm(500, 0, new_angle);
        }
        <!-- plus 1 degree -->
        if (event.code === "ArrowRight") {
            console.log("1 deg forward")
            let new_angle = (last_angle + 1) % 720;
            drawForm(500, 0, new_angle);
        }
        <!-- 0 degrees -->
        if (event.code === "Insert") {
            console.log("move to 0 degrees")
            drawForm(500, 0, 0);
        }
        <!-- 30 degrees -->
        if (event.code === "Home") {
            console.log("move to 30 degrees")
            drawForm(500, 0, 30);
        }
        <!-- 60 degrees -->
        if (event.code === "PageUp") {
            console.log("move to 60 degrees")
            drawForm(500, 0, 60);
        }
        <!-- 90 degrees -->
        if (event.code === "Delete") {
            console.log("move to 90 degrees")
            drawForm(500, 0, 90);
        }
        <!-- 120 degrees -->
        if (event.code === "End") {
            console.log("move to 120 degrees")
            drawForm(500, 0, 120);
        }
        <!-- 180 degrees -->
        if (event.code === "PageDown") {
            console.log("move to 180 degrees")
            drawForm(500, 0, 180);
        }

        <!-- ANGLE-MODE -->

        <!-- 0 -->
        if (lastkey['Control'] && lastkey['Shift'] && event.key == ')') {
            console.log("angle_mode set to 1")
            angle_mode = 1
            document.getElementById('svg').focus();
        }
        <!-- 1 -->
        if (lastkey['Control'] && lastkey['Shift'] && event.key == '!') {
            console.log("angle_mode set to 1")
            angle_mode = 1
            document.getElementById('svg').focus();
        }
        <!-- 2 -->
        if (lastkey['Control'] && lastkey['Shift'] && event.key == '@') {
            console.log("angle_mode set to 2")
            angle_mode = 2
            document.getElementById('svg').focus();
        }
        <!-- 3 -->
        if (lastkey['Control'] && lastkey['Shift'] && event.key == '#') {
            console.log("angle_mode set to 3")
            angle_mode = 3
            document.getElementById('svg').focus();
        }
        <!-- 4 -->
        if (lastkey['Control'] && lastkey['Shift'] && event.key == '$') {
            console.log("angle_mode set to 4")
            angle_mode = 4
            document.getElementById('svg').focus();
        }

        <!-- TOGGLE SHOWLEAVES -->

        if (lastkey['Control'] && lastkey['Shift'] && event.key == 'L') {
            console.log("SHOWLEAVES toggled")
            SHOWLEAVES = (SHOWLEAVES + 1) % 2
            document.getElementById('svg').focus();
        }

        <!-- LEAF-MODES -->

        if (lastkey['Control'] && lastkey['Shift'] && event.key == 'F1') {
            console.log("leaf_mode set to 0")
            leaf_mode = 0
            document.getElementById('svg').focus();
        }
        if (lastkey['Control'] && lastkey['Shift'] && event.key == 'F2') {
            console.log("leaf_mode set to 1")
            leaf_mode = 1
            document.getElementById('svg').focus();
        }
        if (lastkey['Control'] && lastkey['Shift'] && event.key == 'F3') {
            console.log("leaf_mode set to 2")
            leaf_mode = 2
            document.getElementById('svg').focus();
        }
        if (lastkey['Control'] && lastkey['Shift'] && event.key == 'F4') {
            console.log("leaf_mode set to 3")
            leaf_mode = 3
            document.getElementById('svg').focus();
        }
        if (lastkey['Control'] && lastkey['Shift'] && event.key == 'F5') {
            console.log("leaf_mode set to 4")
            leaf_mode = 4
            document.getElementById('svg').focus();
        }


        <!-- ROTATIONS -->

        if (lastkey['Control'] && lastkey['Shift'] && event.key == 'F6') {
            console.log("rotation_type  set to 0")
            rotation_type = 0
            document.getElementById('svg').focus();
        }
        if (lastkey['Control'] && lastkey['Shift'] && event.key == 'F7') {
            console.log("rotation_type  set to 1")
            rotation_type = 1
            document.getElementById('svg').focus();
        }
        if (lastkey['Control'] && lastkey['Shift'] && event.key == 'F8') {
            console.log("rotation_type  set to 2")
            rotation_type = 2
            document.getElementById('svg').focus();
        }
        if (lastkey['Control'] && lastkey['Shift'] && event.key == 'F9') {
            console.log("rotation_type  set to 3")
            rotation_type = 3
            document.getElementById('svg').focus();
        }
        if (lastkey['Control'] && lastkey['Shift'] && event.key == 'F10') {
            console.log("rotation_type  set to 4")
            rotation_type = 4
            document.getElementById('svg').focus();
        }


        <!-- SPECTRUMS -->


        if (lastkey['Control'] && lastkey['Shift'] && event.key == 'U') {
            colorSchemeIndex = (colorSchemeIndex + 1) % 3
            console.log("Changed model to " + colorSchemeIndex)
            <!-- colorScheme = getColorScheme(colorSchemeIndex, colors) -->
            colorScheme = getColorScheme(colorSchemeIndex, colors2[paletteIndex])
            document.getElementById('svg').focus();
        }
        if (lastkey['Control'] && lastkey['Shift'] && event.key == 'G') {
            paletteIndex = (paletteIndex + 1) % colors2.length
            console.log("Changed palette to " + paletteIndex)
            colors = colors2[paletteIndex]
            colorScheme = getColorScheme(colorSchemeIndex, colors)
            document.getElementById('svg').focus();
        }

        <!-- ROTATE MENU -->


        if (lastkey['Control'] && lastkey['Shift'] && event.key == 'X') {
            console.log("rotate screen");
            let new_rotation = rotation - 15;
            svg.setAttribute("transform", "rotate(" + new_rotation + ")");
            rotation = new_rotation;
            svg.setAttribute("viewbox", "-960 -960 1920 1920");
            // <!-- height = 1920; -->
            // <!-- width = 1920; -->
            drawForm(x, y);
            document.getElementById('svg').focus();
        }

        <!-- HELP MENU -->

        if (lastkey['Control'] && lastkey['Shift'] && event.key == 'S') {
            showtext = (showtext + 1) % 2
        }
        if (lastkey['Control'] && lastkey['Shift'] && event.key == 'Z') {
            console.log("show help screen")
            let helpobj = getHelpImage();
            helpobj.setAttribute("x", "-400")
            helpobj.setAttribute("y", "-400")
            helpobj.setAttribute("height", "80%")
            svg.appendChild(helpobj);
            document.getElementById('svg').focus();
        }
    });
    eleSvg.addEventListener('keyup', function (event) {
        lastkey[event.code] = false
        lastkey[event.key] = false
    });


    ]]></script>
</svg>
